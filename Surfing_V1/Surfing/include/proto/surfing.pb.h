// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: surfing.proto

#ifndef PROTOBUF_surfing_2eproto__INCLUDED
#define PROTOBUF_surfing_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace surfing {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_surfing_2eproto();
void protobuf_AssignDesc_surfing_2eproto();
void protobuf_ShutdownFile_surfing_2eproto();

class BlobProto;
class Datum;
class FilterParameter;
class SolverParameter;
class NetParameter;
class LayerParameter;
class BatchNormalizationParameter;
class ConcatenateParameter;
class ConvolutionParameter;
class DataParameter;
class DropoutParameter;
class InnerProductParameter;
class LCNParameter;
class LRNParameter;
class PoolingParameter;
class ReluParameter;
class ResultParameter;
class SigmoidParameter;
class SoftmaxParameter;
class TanhParameter;

enum FilterParameter_FilterType {
  FilterParameter_FilterType_GAUSSIAN = 0,
  FilterParameter_FilterType_UNIFORM = 1
};
bool FilterParameter_FilterType_IsValid(int value);
const FilterParameter_FilterType FilterParameter_FilterType_FilterType_MIN = FilterParameter_FilterType_GAUSSIAN;
const FilterParameter_FilterType FilterParameter_FilterType_FilterType_MAX = FilterParameter_FilterType_UNIFORM;
const int FilterParameter_FilterType_FilterType_ARRAYSIZE = FilterParameter_FilterType_FilterType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FilterParameter_FilterType_descriptor();
inline const ::std::string& FilterParameter_FilterType_Name(FilterParameter_FilterType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FilterParameter_FilterType_descriptor(), value);
}
inline bool FilterParameter_FilterType_Parse(
    const ::std::string& name, FilterParameter_FilterType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FilterParameter_FilterType>(
    FilterParameter_FilterType_descriptor(), name, value);
}
enum SolverParameter_IS_PRE_TRAIN {
  SolverParameter_IS_PRE_TRAIN_PRE_TRAIN = 0,
  SolverParameter_IS_PRE_TRAIN_NEW = 1
};
bool SolverParameter_IS_PRE_TRAIN_IsValid(int value);
const SolverParameter_IS_PRE_TRAIN SolverParameter_IS_PRE_TRAIN_IS_PRE_TRAIN_MIN = SolverParameter_IS_PRE_TRAIN_PRE_TRAIN;
const SolverParameter_IS_PRE_TRAIN SolverParameter_IS_PRE_TRAIN_IS_PRE_TRAIN_MAX = SolverParameter_IS_PRE_TRAIN_NEW;
const int SolverParameter_IS_PRE_TRAIN_IS_PRE_TRAIN_ARRAYSIZE = SolverParameter_IS_PRE_TRAIN_IS_PRE_TRAIN_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverParameter_IS_PRE_TRAIN_descriptor();
inline const ::std::string& SolverParameter_IS_PRE_TRAIN_Name(SolverParameter_IS_PRE_TRAIN value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverParameter_IS_PRE_TRAIN_descriptor(), value);
}
inline bool SolverParameter_IS_PRE_TRAIN_Parse(
    const ::std::string& name, SolverParameter_IS_PRE_TRAIN* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverParameter_IS_PRE_TRAIN>(
    SolverParameter_IS_PRE_TRAIN_descriptor(), name, value);
}
enum LayerParameter_Type {
  LayerParameter_Type_BATCHNORMALIZATION = 13,
  LayerParameter_Type_CONCATENATE = 12,
  LayerParameter_Type_CONVOLUTION = 0,
  LayerParameter_Type_DATA = 1,
  LayerParameter_Type_DROPOUT = 2,
  LayerParameter_Type_INNERPRODUCT = 3,
  LayerParameter_Type_LCN = 4,
  LayerParameter_Type_LRN = 5,
  LayerParameter_Type_POOLING = 6,
  LayerParameter_Type_RELU = 7,
  LayerParameter_Type_RESULT = 8,
  LayerParameter_Type_SIGMOID = 9,
  LayerParameter_Type_SOFTMAX = 10,
  LayerParameter_Type_TANH = 11
};
bool LayerParameter_Type_IsValid(int value);
const LayerParameter_Type LayerParameter_Type_Type_MIN = LayerParameter_Type_CONVOLUTION;
const LayerParameter_Type LayerParameter_Type_Type_MAX = LayerParameter_Type_BATCHNORMALIZATION;
const int LayerParameter_Type_Type_ARRAYSIZE = LayerParameter_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* LayerParameter_Type_descriptor();
inline const ::std::string& LayerParameter_Type_Name(LayerParameter_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    LayerParameter_Type_descriptor(), value);
}
inline bool LayerParameter_Type_Parse(
    const ::std::string& name, LayerParameter_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LayerParameter_Type>(
    LayerParameter_Type_descriptor(), name, value);
}
enum LayerParameter_Phase {
  LayerParameter_Phase_TRAIN = 0,
  LayerParameter_Phase_TEST = 1,
  LayerParameter_Phase_ALL = 2
};
bool LayerParameter_Phase_IsValid(int value);
const LayerParameter_Phase LayerParameter_Phase_Phase_MIN = LayerParameter_Phase_TRAIN;
const LayerParameter_Phase LayerParameter_Phase_Phase_MAX = LayerParameter_Phase_ALL;
const int LayerParameter_Phase_Phase_ARRAYSIZE = LayerParameter_Phase_Phase_MAX + 1;

const ::google::protobuf::EnumDescriptor* LayerParameter_Phase_descriptor();
inline const ::std::string& LayerParameter_Phase_Name(LayerParameter_Phase value) {
  return ::google::protobuf::internal::NameOfEnum(
    LayerParameter_Phase_descriptor(), value);
}
inline bool LayerParameter_Phase_Parse(
    const ::std::string& name, LayerParameter_Phase* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LayerParameter_Phase>(
    LayerParameter_Phase_descriptor(), name, value);
}
enum BatchNormalizationParameter_Type {
  BatchNormalizationParameter_Type_CONV = 0,
  BatchNormalizationParameter_Type_IP = 1
};
bool BatchNormalizationParameter_Type_IsValid(int value);
const BatchNormalizationParameter_Type BatchNormalizationParameter_Type_Type_MIN = BatchNormalizationParameter_Type_CONV;
const BatchNormalizationParameter_Type BatchNormalizationParameter_Type_Type_MAX = BatchNormalizationParameter_Type_IP;
const int BatchNormalizationParameter_Type_Type_ARRAYSIZE = BatchNormalizationParameter_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* BatchNormalizationParameter_Type_descriptor();
inline const ::std::string& BatchNormalizationParameter_Type_Name(BatchNormalizationParameter_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    BatchNormalizationParameter_Type_descriptor(), value);
}
inline bool BatchNormalizationParameter_Type_Parse(
    const ::std::string& name, BatchNormalizationParameter_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BatchNormalizationParameter_Type>(
    BatchNormalizationParameter_Type_descriptor(), name, value);
}
enum PoolingParameter_PoolingMethod {
  PoolingParameter_PoolingMethod_MAX = 0,
  PoolingParameter_PoolingMethod_AVE = 1
};
bool PoolingParameter_PoolingMethod_IsValid(int value);
const PoolingParameter_PoolingMethod PoolingParameter_PoolingMethod_PoolingMethod_MIN = PoolingParameter_PoolingMethod_MAX;
const PoolingParameter_PoolingMethod PoolingParameter_PoolingMethod_PoolingMethod_MAX = PoolingParameter_PoolingMethod_AVE;
const int PoolingParameter_PoolingMethod_PoolingMethod_ARRAYSIZE = PoolingParameter_PoolingMethod_PoolingMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoolingParameter_PoolingMethod_descriptor();
inline const ::std::string& PoolingParameter_PoolingMethod_Name(PoolingParameter_PoolingMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoolingParameter_PoolingMethod_descriptor(), value);
}
inline bool PoolingParameter_PoolingMethod_Parse(
    const ::std::string& name, PoolingParameter_PoolingMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolingParameter_PoolingMethod>(
    PoolingParameter_PoolingMethod_descriptor(), name, value);
}
enum ResultParameter_LossType {
  ResultParameter_LossType_L1 = 0,
  ResultParameter_LossType_L2 = 1
};
bool ResultParameter_LossType_IsValid(int value);
const ResultParameter_LossType ResultParameter_LossType_LossType_MIN = ResultParameter_LossType_L1;
const ResultParameter_LossType ResultParameter_LossType_LossType_MAX = ResultParameter_LossType_L2;
const int ResultParameter_LossType_LossType_ARRAYSIZE = ResultParameter_LossType_LossType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultParameter_LossType_descriptor();
inline const ::std::string& ResultParameter_LossType_Name(ResultParameter_LossType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultParameter_LossType_descriptor(), value);
}
inline bool ResultParameter_LossType_Parse(
    const ::std::string& name, ResultParameter_LossType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultParameter_LossType>(
    ResultParameter_LossType_descriptor(), name, value);
}
// ===================================================================

class BlobProto : public ::google::protobuf::Message {
 public:
  BlobProto();
  virtual ~BlobProto();

  BlobProto(const BlobProto& from);

  inline BlobProto& operator=(const BlobProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobProto& default_instance();

  void Swap(BlobProto* other);

  // implements Message ----------------------------------------------

  BlobProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobProto& from);
  void MergeFrom(const BlobProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 num = 1 [default = 0];
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 channels = 2 [default = 0];
  inline bool has_channels() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 2;
  inline ::google::protobuf::int32 channels() const;
  inline void set_channels(::google::protobuf::int32 value);

  // optional int32 height = 3 [default = 0];
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional int32 width = 4 [default = 0];
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 4;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // repeated float data = 5 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline float data(int index) const;
  inline void set_data(int index, float value);
  inline void add_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // repeated float diff = 6 [packed = true];
  inline int diff_size() const;
  inline void clear_diff();
  static const int kDiffFieldNumber = 6;
  inline float diff(int index) const;
  inline void set_diff(int index, float value);
  inline void add_diff(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      diff() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_diff();

  // repeated double double_data = 7 [packed = true];
  inline int double_data_size() const;
  inline void clear_double_data();
  static const int kDoubleDataFieldNumber = 7;
  inline double double_data(int index) const;
  inline void set_double_data(int index, double value);
  inline void add_double_data(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      double_data() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_double_data();

  // repeated double double_diff = 8 [packed = true];
  inline int double_diff_size() const;
  inline void clear_double_diff();
  static const int kDoubleDiffFieldNumber = 8;
  inline double double_diff(int index) const;
  inline void set_double_diff(int index, double value);
  inline void add_double_diff(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      double_diff() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_double_diff();

  // @@protoc_insertion_point(class_scope:surfing.BlobProto)
 private:
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > diff_;
  mutable int _diff_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_data_;
  mutable int _double_data_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_diff_;
  mutable int _double_diff_cached_byte_size_;
  friend void  protobuf_AddDesc_surfing_2eproto();
  friend void protobuf_AssignDesc_surfing_2eproto();
  friend void protobuf_ShutdownFile_surfing_2eproto();

  void InitAsDefaultInstance();
  static BlobProto* default_instance_;
};
// -------------------------------------------------------------------

class Datum : public ::google::protobuf::Message {
 public:
  Datum();
  virtual ~Datum();

  Datum(const Datum& from);

  inline Datum& operator=(const Datum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Datum& default_instance();

  void Swap(Datum* other);

  // implements Message ----------------------------------------------

  Datum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Datum& from);
  void MergeFrom(const Datum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 channels = 1;
  inline bool has_channels() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 1;
  inline ::google::protobuf::int32 channels() const;
  inline void set_channels(::google::protobuf::int32 value);

  // optional int32 height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional int32 width = 3;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 3;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional bytes data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional int32 label = 5;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 5;
  inline ::google::protobuf::int32 label() const;
  inline void set_label(::google::protobuf::int32 value);

  // repeated float float_data = 6;
  inline int float_data_size() const;
  inline void clear_float_data();
  static const int kFloatDataFieldNumber = 6;
  inline float float_data(int index) const;
  inline void set_float_data(int index, float value);
  inline void add_float_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      float_data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_float_data();

  // @@protoc_insertion_point(class_scope:surfing.Datum)
 private:
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_label();
  inline void clear_has_label();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::std::string* data_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 label_;
  ::google::protobuf::RepeatedField< float > float_data_;
  friend void  protobuf_AddDesc_surfing_2eproto();
  friend void protobuf_AssignDesc_surfing_2eproto();
  friend void protobuf_ShutdownFile_surfing_2eproto();

  void InitAsDefaultInstance();
  static Datum* default_instance_;
};
// -------------------------------------------------------------------

class FilterParameter : public ::google::protobuf::Message {
 public:
  FilterParameter();
  virtual ~FilterParameter();

  FilterParameter(const FilterParameter& from);

  inline FilterParameter& operator=(const FilterParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FilterParameter& default_instance();

  void Swap(FilterParameter* other);

  // implements Message ----------------------------------------------

  FilterParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FilterParameter& from);
  void MergeFrom(const FilterParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FilterParameter_FilterType FilterType;
  static const FilterType GAUSSIAN = FilterParameter_FilterType_GAUSSIAN;
  static const FilterType UNIFORM = FilterParameter_FilterType_UNIFORM;
  static inline bool FilterType_IsValid(int value) {
    return FilterParameter_FilterType_IsValid(value);
  }
  static const FilterType FilterType_MIN =
    FilterParameter_FilterType_FilterType_MIN;
  static const FilterType FilterType_MAX =
    FilterParameter_FilterType_FilterType_MAX;
  static const int FilterType_ARRAYSIZE =
    FilterParameter_FilterType_FilterType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FilterType_descriptor() {
    return FilterParameter_FilterType_descriptor();
  }
  static inline const ::std::string& FilterType_Name(FilterType value) {
    return FilterParameter_FilterType_Name(value);
  }
  static inline bool FilterType_Parse(const ::std::string& name,
      FilterType* value) {
    return FilterParameter_FilterType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .surfing.FilterParameter.FilterType filter = 1 [default = GAUSSIAN];
  inline bool has_filter() const;
  inline void clear_filter();
  static const int kFilterFieldNumber = 1;
  inline ::surfing::FilterParameter_FilterType filter() const;
  inline void set_filter(::surfing::FilterParameter_FilterType value);

  // optional float mean = 2 [default = 0];
  inline bool has_mean() const;
  inline void clear_mean();
  static const int kMeanFieldNumber = 2;
  inline float mean() const;
  inline void set_mean(float value);

  // optional float std = 3 [default = 0.1];
  inline bool has_std() const;
  inline void clear_std();
  static const int kStdFieldNumber = 3;
  inline float std() const;
  inline void set_std(float value);

  // optional float range = 4 [default = 0.1];
  inline bool has_range() const;
  inline void clear_range();
  static const int kRangeFieldNumber = 4;
  inline float range() const;
  inline void set_range(float value);

  // optional float bias = 6 [default = 0];
  inline bool has_bias() const;
  inline void clear_bias();
  static const int kBiasFieldNumber = 6;
  inline float bias() const;
  inline void set_bias(float value);

  // optional int32 num = 7 [default = 0];
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 7;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 channels = 8 [default = 0];
  inline bool has_channels() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 8;
  inline ::google::protobuf::int32 channels() const;
  inline void set_channels(::google::protobuf::int32 value);

  // optional int32 height = 9 [default = 0];
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 9;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional int32 width = 10 [default = 0];
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 10;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:surfing.FilterParameter)
 private:
  inline void set_has_filter();
  inline void clear_has_filter();
  inline void set_has_mean();
  inline void clear_has_mean();
  inline void set_has_std();
  inline void clear_has_std();
  inline void set_has_range();
  inline void clear_has_range();
  inline void set_has_bias();
  inline void clear_has_bias();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int filter_;
  float mean_;
  float std_;
  float range_;
  float bias_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  friend void  protobuf_AddDesc_surfing_2eproto();
  friend void protobuf_AssignDesc_surfing_2eproto();
  friend void protobuf_ShutdownFile_surfing_2eproto();

  void InitAsDefaultInstance();
  static FilterParameter* default_instance_;
};
// -------------------------------------------------------------------

class SolverParameter : public ::google::protobuf::Message {
 public:
  SolverParameter();
  virtual ~SolverParameter();

  SolverParameter(const SolverParameter& from);

  inline SolverParameter& operator=(const SolverParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverParameter& default_instance();

  void Swap(SolverParameter* other);

  // implements Message ----------------------------------------------

  SolverParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SolverParameter& from);
  void MergeFrom(const SolverParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SolverParameter_IS_PRE_TRAIN IS_PRE_TRAIN;
  static const IS_PRE_TRAIN PRE_TRAIN = SolverParameter_IS_PRE_TRAIN_PRE_TRAIN;
  static const IS_PRE_TRAIN NEW = SolverParameter_IS_PRE_TRAIN_NEW;
  static inline bool IS_PRE_TRAIN_IsValid(int value) {
    return SolverParameter_IS_PRE_TRAIN_IsValid(value);
  }
  static const IS_PRE_TRAIN IS_PRE_TRAIN_MIN =
    SolverParameter_IS_PRE_TRAIN_IS_PRE_TRAIN_MIN;
  static const IS_PRE_TRAIN IS_PRE_TRAIN_MAX =
    SolverParameter_IS_PRE_TRAIN_IS_PRE_TRAIN_MAX;
  static const int IS_PRE_TRAIN_ARRAYSIZE =
    SolverParameter_IS_PRE_TRAIN_IS_PRE_TRAIN_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  IS_PRE_TRAIN_descriptor() {
    return SolverParameter_IS_PRE_TRAIN_descriptor();
  }
  static inline const ::std::string& IS_PRE_TRAIN_Name(IS_PRE_TRAIN value) {
    return SolverParameter_IS_PRE_TRAIN_Name(value);
  }
  static inline bool IS_PRE_TRAIN_Parse(const ::std::string& name,
      IS_PRE_TRAIN* value) {
    return SolverParameter_IS_PRE_TRAIN_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .surfing.SolverParameter.IS_PRE_TRAIN is_pre_train = 1 [default = NEW];
  inline bool has_is_pre_train() const;
  inline void clear_is_pre_train();
  static const int kIsPreTrainFieldNumber = 1;
  inline ::surfing::SolverParameter_IS_PRE_TRAIN is_pre_train() const;
  inline void set_is_pre_train(::surfing::SolverParameter_IS_PRE_TRAIN value);

  // optional string net = 2;
  inline bool has_net() const;
  inline void clear_net();
  static const int kNetFieldNumber = 2;
  inline const ::std::string& net() const;
  inline void set_net(const ::std::string& value);
  inline void set_net(const char* value);
  inline void set_net(const char* value, size_t size);
  inline ::std::string* mutable_net();
  inline ::std::string* release_net();
  inline void set_allocated_net(::std::string* net);

  // optional string net_binary = 3;
  inline bool has_net_binary() const;
  inline void clear_net_binary();
  static const int kNetBinaryFieldNumber = 3;
  inline const ::std::string& net_binary() const;
  inline void set_net_binary(const ::std::string& value);
  inline void set_net_binary(const char* value);
  inline void set_net_binary(const char* value, size_t size);
  inline ::std::string* mutable_net_binary();
  inline ::std::string* release_net_binary();
  inline void set_allocated_net_binary(::std::string* net_binary);

  // optional int32 max_iter = 4;
  inline bool has_max_iter() const;
  inline void clear_max_iter();
  static const int kMaxIterFieldNumber = 4;
  inline ::google::protobuf::int32 max_iter() const;
  inline void set_max_iter(::google::protobuf::int32 value);

  // optional float global_learning_rate = 5;
  inline bool has_global_learning_rate() const;
  inline void clear_global_learning_rate();
  static const int kGlobalLearningRateFieldNumber = 5;
  inline float global_learning_rate() const;
  inline void set_global_learning_rate(float value);

  // optional float momentum = 6;
  inline bool has_momentum() const;
  inline void clear_momentum();
  static const int kMomentumFieldNumber = 6;
  inline float momentum() const;
  inline void set_momentum(float value);

  // optional float weight_decay = 7;
  inline bool has_weight_decay() const;
  inline void clear_weight_decay();
  static const int kWeightDecayFieldNumber = 7;
  inline float weight_decay() const;
  inline void set_weight_decay(float value);

  // optional int32 test_epoch = 8;
  inline bool has_test_epoch() const;
  inline void clear_test_epoch();
  static const int kTestEpochFieldNumber = 8;
  inline ::google::protobuf::int32 test_epoch() const;
  inline void set_test_epoch(::google::protobuf::int32 value);

  // optional int32 display_epoch = 9 [default = 100];
  inline bool has_display_epoch() const;
  inline void clear_display_epoch();
  static const int kDisplayEpochFieldNumber = 9;
  inline ::google::protobuf::int32 display_epoch() const;
  inline void set_display_epoch(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:surfing.SolverParameter)
 private:
  inline void set_has_is_pre_train();
  inline void clear_has_is_pre_train();
  inline void set_has_net();
  inline void clear_has_net();
  inline void set_has_net_binary();
  inline void clear_has_net_binary();
  inline void set_has_max_iter();
  inline void clear_has_max_iter();
  inline void set_has_global_learning_rate();
  inline void clear_has_global_learning_rate();
  inline void set_has_momentum();
  inline void clear_has_momentum();
  inline void set_has_weight_decay();
  inline void clear_has_weight_decay();
  inline void set_has_test_epoch();
  inline void clear_has_test_epoch();
  inline void set_has_display_epoch();
  inline void clear_has_display_epoch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* net_;
  int is_pre_train_;
  ::google::protobuf::int32 max_iter_;
  ::std::string* net_binary_;
  float global_learning_rate_;
  float momentum_;
  float weight_decay_;
  ::google::protobuf::int32 test_epoch_;
  ::google::protobuf::int32 display_epoch_;
  friend void  protobuf_AddDesc_surfing_2eproto();
  friend void protobuf_AssignDesc_surfing_2eproto();
  friend void protobuf_ShutdownFile_surfing_2eproto();

  void InitAsDefaultInstance();
  static SolverParameter* default_instance_;
};
// -------------------------------------------------------------------

class NetParameter : public ::google::protobuf::Message {
 public:
  NetParameter();
  virtual ~NetParameter();

  NetParameter(const NetParameter& from);

  inline NetParameter& operator=(const NetParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetParameter& default_instance();

  void Swap(NetParameter* other);

  // implements Message ----------------------------------------------

  NetParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetParameter& from);
  void MergeFrom(const NetParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .surfing.LayerParameter layer = 100;
  inline int layer_size() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 100;
  inline const ::surfing::LayerParameter& layer(int index) const;
  inline ::surfing::LayerParameter* mutable_layer(int index);
  inline ::surfing::LayerParameter* add_layer();
  inline const ::google::protobuf::RepeatedPtrField< ::surfing::LayerParameter >&
      layer() const;
  inline ::google::protobuf::RepeatedPtrField< ::surfing::LayerParameter >*
      mutable_layer();

  // @@protoc_insertion_point(class_scope:surfing.NetParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::surfing::LayerParameter > layer_;
  friend void  protobuf_AddDesc_surfing_2eproto();
  friend void protobuf_AssignDesc_surfing_2eproto();
  friend void protobuf_ShutdownFile_surfing_2eproto();

  void InitAsDefaultInstance();
  static NetParameter* default_instance_;
};
// -------------------------------------------------------------------

class LayerParameter : public ::google::protobuf::Message {
 public:
  LayerParameter();
  virtual ~LayerParameter();

  LayerParameter(const LayerParameter& from);

  inline LayerParameter& operator=(const LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerParameter& default_instance();

  void Swap(LayerParameter* other);

  // implements Message ----------------------------------------------

  LayerParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LayerParameter& from);
  void MergeFrom(const LayerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LayerParameter_Type Type;
  static const Type BATCHNORMALIZATION = LayerParameter_Type_BATCHNORMALIZATION;
  static const Type CONCATENATE = LayerParameter_Type_CONCATENATE;
  static const Type CONVOLUTION = LayerParameter_Type_CONVOLUTION;
  static const Type DATA = LayerParameter_Type_DATA;
  static const Type DROPOUT = LayerParameter_Type_DROPOUT;
  static const Type INNERPRODUCT = LayerParameter_Type_INNERPRODUCT;
  static const Type LCN = LayerParameter_Type_LCN;
  static const Type LRN = LayerParameter_Type_LRN;
  static const Type POOLING = LayerParameter_Type_POOLING;
  static const Type RELU = LayerParameter_Type_RELU;
  static const Type RESULT = LayerParameter_Type_RESULT;
  static const Type SIGMOID = LayerParameter_Type_SIGMOID;
  static const Type SOFTMAX = LayerParameter_Type_SOFTMAX;
  static const Type TANH = LayerParameter_Type_TANH;
  static inline bool Type_IsValid(int value) {
    return LayerParameter_Type_IsValid(value);
  }
  static const Type Type_MIN =
    LayerParameter_Type_Type_MIN;
  static const Type Type_MAX =
    LayerParameter_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    LayerParameter_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return LayerParameter_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return LayerParameter_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return LayerParameter_Type_Parse(name, value);
  }

  typedef LayerParameter_Phase Phase;
  static const Phase TRAIN = LayerParameter_Phase_TRAIN;
  static const Phase TEST = LayerParameter_Phase_TEST;
  static const Phase ALL = LayerParameter_Phase_ALL;
  static inline bool Phase_IsValid(int value) {
    return LayerParameter_Phase_IsValid(value);
  }
  static const Phase Phase_MIN =
    LayerParameter_Phase_Phase_MIN;
  static const Phase Phase_MAX =
    LayerParameter_Phase_Phase_MAX;
  static const int Phase_ARRAYSIZE =
    LayerParameter_Phase_Phase_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Phase_descriptor() {
    return LayerParameter_Phase_descriptor();
  }
  static inline const ::std::string& Phase_Name(Phase value) {
    return LayerParameter_Phase_Name(value);
  }
  static inline bool Phase_Parse(const ::std::string& name,
      Phase* value) {
    return LayerParameter_Phase_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .surfing.LayerParameter.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::surfing::LayerParameter_Type type() const;
  inline void set_type(::surfing::LayerParameter_Type value);

  // repeated string bottom = 3;
  inline int bottom_size() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 3;
  inline const ::std::string& bottom(int index) const;
  inline ::std::string* mutable_bottom(int index);
  inline void set_bottom(int index, const ::std::string& value);
  inline void set_bottom(int index, const char* value);
  inline void set_bottom(int index, const char* value, size_t size);
  inline ::std::string* add_bottom();
  inline void add_bottom(const ::std::string& value);
  inline void add_bottom(const char* value);
  inline void add_bottom(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& bottom() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bottom();

  // optional string top = 4;
  inline bool has_top() const;
  inline void clear_top();
  static const int kTopFieldNumber = 4;
  inline const ::std::string& top() const;
  inline void set_top(const ::std::string& value);
  inline void set_top(const char* value);
  inline void set_top(const char* value, size_t size);
  inline ::std::string* mutable_top();
  inline ::std::string* release_top();
  inline void set_allocated_top(::std::string* top);

  // optional int32 num = 11 [default = 0];
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 11;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 channels = 12 [default = 0];
  inline bool has_channels() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 12;
  inline ::google::protobuf::int32 channels() const;
  inline void set_channels(::google::protobuf::int32 value);

  // optional int32 height = 13 [default = 0];
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 13;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional int32 width = 14 [default = 0];
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 14;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional .surfing.LayerParameter.Phase phase = 5 [default = ALL];
  inline bool has_phase() const;
  inline void clear_phase();
  static const int kPhaseFieldNumber = 5;
  inline ::surfing::LayerParameter_Phase phase() const;
  inline void set_phase(::surfing::LayerParameter_Phase value);

  // optional .surfing.BlobProto param = 6;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 6;
  inline const ::surfing::BlobProto& param() const;
  inline ::surfing::BlobProto* mutable_param();
  inline ::surfing::BlobProto* release_param();
  inline void set_allocated_param(::surfing::BlobProto* param);

  // optional .surfing.BlobProto bias = 7;
  inline bool has_bias() const;
  inline void clear_bias();
  static const int kBiasFieldNumber = 7;
  inline const ::surfing::BlobProto& bias() const;
  inline ::surfing::BlobProto* mutable_bias();
  inline ::surfing::BlobProto* release_bias();
  inline void set_allocated_bias(::surfing::BlobProto* bias);

  // optional float filter_learning_rate = 8;
  inline bool has_filter_learning_rate() const;
  inline void clear_filter_learning_rate();
  static const int kFilterLearningRateFieldNumber = 8;
  inline float filter_learning_rate() const;
  inline void set_filter_learning_rate(float value);

  // optional float bias_learning_rate = 9;
  inline bool has_bias_learning_rate() const;
  inline void clear_bias_learning_rate();
  static const int kBiasLearningRateFieldNumber = 9;
  inline float bias_learning_rate() const;
  inline void set_bias_learning_rate(float value);

  // optional .surfing.BatchNormalizationParameter batch_normalization_param = 99;
  inline bool has_batch_normalization_param() const;
  inline void clear_batch_normalization_param();
  static const int kBatchNormalizationParamFieldNumber = 99;
  inline const ::surfing::BatchNormalizationParameter& batch_normalization_param() const;
  inline ::surfing::BatchNormalizationParameter* mutable_batch_normalization_param();
  inline ::surfing::BatchNormalizationParameter* release_batch_normalization_param();
  inline void set_allocated_batch_normalization_param(::surfing::BatchNormalizationParameter* batch_normalization_param);

  // optional .surfing.ConcatenateParameter concat_param = 100;
  inline bool has_concat_param() const;
  inline void clear_concat_param();
  static const int kConcatParamFieldNumber = 100;
  inline const ::surfing::ConcatenateParameter& concat_param() const;
  inline ::surfing::ConcatenateParameter* mutable_concat_param();
  inline ::surfing::ConcatenateParameter* release_concat_param();
  inline void set_allocated_concat_param(::surfing::ConcatenateParameter* concat_param);

  // optional .surfing.ConvolutionParameter conv_param = 101;
  inline bool has_conv_param() const;
  inline void clear_conv_param();
  static const int kConvParamFieldNumber = 101;
  inline const ::surfing::ConvolutionParameter& conv_param() const;
  inline ::surfing::ConvolutionParameter* mutable_conv_param();
  inline ::surfing::ConvolutionParameter* release_conv_param();
  inline void set_allocated_conv_param(::surfing::ConvolutionParameter* conv_param);

  // optional .surfing.DataParameter data_param = 102;
  inline bool has_data_param() const;
  inline void clear_data_param();
  static const int kDataParamFieldNumber = 102;
  inline const ::surfing::DataParameter& data_param() const;
  inline ::surfing::DataParameter* mutable_data_param();
  inline ::surfing::DataParameter* release_data_param();
  inline void set_allocated_data_param(::surfing::DataParameter* data_param);

  // optional .surfing.DropoutParameter dropout_param = 103;
  inline bool has_dropout_param() const;
  inline void clear_dropout_param();
  static const int kDropoutParamFieldNumber = 103;
  inline const ::surfing::DropoutParameter& dropout_param() const;
  inline ::surfing::DropoutParameter* mutable_dropout_param();
  inline ::surfing::DropoutParameter* release_dropout_param();
  inline void set_allocated_dropout_param(::surfing::DropoutParameter* dropout_param);

  // optional .surfing.InnerProductParameter inner_product_param = 104;
  inline bool has_inner_product_param() const;
  inline void clear_inner_product_param();
  static const int kInnerProductParamFieldNumber = 104;
  inline const ::surfing::InnerProductParameter& inner_product_param() const;
  inline ::surfing::InnerProductParameter* mutable_inner_product_param();
  inline ::surfing::InnerProductParameter* release_inner_product_param();
  inline void set_allocated_inner_product_param(::surfing::InnerProductParameter* inner_product_param);

  // optional .surfing.LCNParameter lcn_param = 105;
  inline bool has_lcn_param() const;
  inline void clear_lcn_param();
  static const int kLcnParamFieldNumber = 105;
  inline const ::surfing::LCNParameter& lcn_param() const;
  inline ::surfing::LCNParameter* mutable_lcn_param();
  inline ::surfing::LCNParameter* release_lcn_param();
  inline void set_allocated_lcn_param(::surfing::LCNParameter* lcn_param);

  // optional .surfing.LRNParameter lrn_param = 106;
  inline bool has_lrn_param() const;
  inline void clear_lrn_param();
  static const int kLrnParamFieldNumber = 106;
  inline const ::surfing::LRNParameter& lrn_param() const;
  inline ::surfing::LRNParameter* mutable_lrn_param();
  inline ::surfing::LRNParameter* release_lrn_param();
  inline void set_allocated_lrn_param(::surfing::LRNParameter* lrn_param);

  // optional .surfing.PoolingParameter pooling_param = 107;
  inline bool has_pooling_param() const;
  inline void clear_pooling_param();
  static const int kPoolingParamFieldNumber = 107;
  inline const ::surfing::PoolingParameter& pooling_param() const;
  inline ::surfing::PoolingParameter* mutable_pooling_param();
  inline ::surfing::PoolingParameter* release_pooling_param();
  inline void set_allocated_pooling_param(::surfing::PoolingParameter* pooling_param);

  // optional .surfing.ReluParameter relu_param = 108;
  inline bool has_relu_param() const;
  inline void clear_relu_param();
  static const int kReluParamFieldNumber = 108;
  inline const ::surfing::ReluParameter& relu_param() const;
  inline ::surfing::ReluParameter* mutable_relu_param();
  inline ::surfing::ReluParameter* release_relu_param();
  inline void set_allocated_relu_param(::surfing::ReluParameter* relu_param);

  // optional .surfing.ResultParameter result_param = 109;
  inline bool has_result_param() const;
  inline void clear_result_param();
  static const int kResultParamFieldNumber = 109;
  inline const ::surfing::ResultParameter& result_param() const;
  inline ::surfing::ResultParameter* mutable_result_param();
  inline ::surfing::ResultParameter* release_result_param();
  inline void set_allocated_result_param(::surfing::ResultParameter* result_param);

  // optional .surfing.SigmoidParameter sigmoid_param = 110;
  inline bool has_sigmoid_param() const;
  inline void clear_sigmoid_param();
  static const int kSigmoidParamFieldNumber = 110;
  inline const ::surfing::SigmoidParameter& sigmoid_param() const;
  inline ::surfing::SigmoidParameter* mutable_sigmoid_param();
  inline ::surfing::SigmoidParameter* release_sigmoid_param();
  inline void set_allocated_sigmoid_param(::surfing::SigmoidParameter* sigmoid_param);

  // optional .surfing.SoftmaxParameter softmax_param = 111;
  inline bool has_softmax_param() const;
  inline void clear_softmax_param();
  static const int kSoftmaxParamFieldNumber = 111;
  inline const ::surfing::SoftmaxParameter& softmax_param() const;
  inline ::surfing::SoftmaxParameter* mutable_softmax_param();
  inline ::surfing::SoftmaxParameter* release_softmax_param();
  inline void set_allocated_softmax_param(::surfing::SoftmaxParameter* softmax_param);

  // optional .surfing.TanhParameter tanh_param = 112;
  inline bool has_tanh_param() const;
  inline void clear_tanh_param();
  static const int kTanhParamFieldNumber = 112;
  inline const ::surfing::TanhParameter& tanh_param() const;
  inline ::surfing::TanhParameter* mutable_tanh_param();
  inline ::surfing::TanhParameter* release_tanh_param();
  inline void set_allocated_tanh_param(::surfing::TanhParameter* tanh_param);

  // @@protoc_insertion_point(class_scope:surfing.LayerParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_top();
  inline void clear_has_top();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_phase();
  inline void clear_has_phase();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_bias();
  inline void clear_has_bias();
  inline void set_has_filter_learning_rate();
  inline void clear_has_filter_learning_rate();
  inline void set_has_bias_learning_rate();
  inline void clear_has_bias_learning_rate();
  inline void set_has_batch_normalization_param();
  inline void clear_has_batch_normalization_param();
  inline void set_has_concat_param();
  inline void clear_has_concat_param();
  inline void set_has_conv_param();
  inline void clear_has_conv_param();
  inline void set_has_data_param();
  inline void clear_has_data_param();
  inline void set_has_dropout_param();
  inline void clear_has_dropout_param();
  inline void set_has_inner_product_param();
  inline void clear_has_inner_product_param();
  inline void set_has_lcn_param();
  inline void clear_has_lcn_param();
  inline void set_has_lrn_param();
  inline void clear_has_lrn_param();
  inline void set_has_pooling_param();
  inline void clear_has_pooling_param();
  inline void set_has_relu_param();
  inline void clear_has_relu_param();
  inline void set_has_result_param();
  inline void clear_has_result_param();
  inline void set_has_sigmoid_param();
  inline void clear_has_sigmoid_param();
  inline void set_has_softmax_param();
  inline void clear_has_softmax_param();
  inline void set_has_tanh_param();
  inline void clear_has_tanh_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bottom_;
  int type_;
  ::google::protobuf::int32 num_;
  ::std::string* top_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  int phase_;
  ::surfing::BlobProto* param_;
  ::surfing::BlobProto* bias_;
  float filter_learning_rate_;
  float bias_learning_rate_;
  ::surfing::BatchNormalizationParameter* batch_normalization_param_;
  ::surfing::ConcatenateParameter* concat_param_;
  ::surfing::ConvolutionParameter* conv_param_;
  ::surfing::DataParameter* data_param_;
  ::surfing::DropoutParameter* dropout_param_;
  ::surfing::InnerProductParameter* inner_product_param_;
  ::surfing::LCNParameter* lcn_param_;
  ::surfing::LRNParameter* lrn_param_;
  ::surfing::PoolingParameter* pooling_param_;
  ::surfing::ReluParameter* relu_param_;
  ::surfing::ResultParameter* result_param_;
  ::surfing::SigmoidParameter* sigmoid_param_;
  ::surfing::SoftmaxParameter* softmax_param_;
  ::surfing::TanhParameter* tanh_param_;
  friend void  protobuf_AddDesc_surfing_2eproto();
  friend void protobuf_AssignDesc_surfing_2eproto();
  friend void protobuf_ShutdownFile_surfing_2eproto();

  void InitAsDefaultInstance();
  static LayerParameter* default_instance_;
};
// -------------------------------------------------------------------

class BatchNormalizationParameter : public ::google::protobuf::Message {
 public:
  BatchNormalizationParameter();
  virtual ~BatchNormalizationParameter();

  BatchNormalizationParameter(const BatchNormalizationParameter& from);

  inline BatchNormalizationParameter& operator=(const BatchNormalizationParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchNormalizationParameter& default_instance();

  void Swap(BatchNormalizationParameter* other);

  // implements Message ----------------------------------------------

  BatchNormalizationParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BatchNormalizationParameter& from);
  void MergeFrom(const BatchNormalizationParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BatchNormalizationParameter_Type Type;
  static const Type CONV = BatchNormalizationParameter_Type_CONV;
  static const Type IP = BatchNormalizationParameter_Type_IP;
  static inline bool Type_IsValid(int value) {
    return BatchNormalizationParameter_Type_IsValid(value);
  }
  static const Type Type_MIN =
    BatchNormalizationParameter_Type_Type_MIN;
  static const Type Type_MAX =
    BatchNormalizationParameter_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    BatchNormalizationParameter_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return BatchNormalizationParameter_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return BatchNormalizationParameter_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return BatchNormalizationParameter_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .surfing.BatchNormalizationParameter.Type type = 1 [default = CONV];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::surfing::BatchNormalizationParameter_Type type() const;
  inline void set_type(::surfing::BatchNormalizationParameter_Type value);

  // @@protoc_insertion_point(class_scope:surfing.BatchNormalizationParameter)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  friend void  protobuf_AddDesc_surfing_2eproto();
  friend void protobuf_AssignDesc_surfing_2eproto();
  friend void protobuf_ShutdownFile_surfing_2eproto();

  void InitAsDefaultInstance();
  static BatchNormalizationParameter* default_instance_;
};
// -------------------------------------------------------------------

class ConcatenateParameter : public ::google::protobuf::Message {
 public:
  ConcatenateParameter();
  virtual ~ConcatenateParameter();

  ConcatenateParameter(const ConcatenateParameter& from);

  inline ConcatenateParameter& operator=(const ConcatenateParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConcatenateParameter& default_instance();

  void Swap(ConcatenateParameter* other);

  // implements Message ----------------------------------------------

  ConcatenateParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConcatenateParameter& from);
  void MergeFrom(const ConcatenateParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:surfing.ConcatenateParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_surfing_2eproto();
  friend void protobuf_AssignDesc_surfing_2eproto();
  friend void protobuf_ShutdownFile_surfing_2eproto();

  void InitAsDefaultInstance();
  static ConcatenateParameter* default_instance_;
};
// -------------------------------------------------------------------

class ConvolutionParameter : public ::google::protobuf::Message {
 public:
  ConvolutionParameter();
  virtual ~ConvolutionParameter();

  ConvolutionParameter(const ConvolutionParameter& from);

  inline ConvolutionParameter& operator=(const ConvolutionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvolutionParameter& default_instance();

  void Swap(ConvolutionParameter* other);

  // implements Message ----------------------------------------------

  ConvolutionParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConvolutionParameter& from);
  void MergeFrom(const ConvolutionParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional uint32 kernel_size = 2;
  inline bool has_kernel_size() const;
  inline void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 kernel_size() const;
  inline void set_kernel_size(::google::protobuf::uint32 value);

  // optional uint32 pad_h = 3 [default = 0];
  inline bool has_pad_h() const;
  inline void clear_pad_h();
  static const int kPadHFieldNumber = 3;
  inline ::google::protobuf::uint32 pad_h() const;
  inline void set_pad_h(::google::protobuf::uint32 value);

  // optional uint32 pad_w = 4 [default = 0];
  inline bool has_pad_w() const;
  inline void clear_pad_w();
  static const int kPadWFieldNumber = 4;
  inline ::google::protobuf::uint32 pad_w() const;
  inline void set_pad_w(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 5 [default = 1];
  inline bool has_stride_h() const;
  inline void clear_stride_h();
  static const int kStrideHFieldNumber = 5;
  inline ::google::protobuf::uint32 stride_h() const;
  inline void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 6 [default = 1];
  inline bool has_stride_w() const;
  inline void clear_stride_w();
  static const int kStrideWFieldNumber = 6;
  inline ::google::protobuf::uint32 stride_w() const;
  inline void set_stride_w(::google::protobuf::uint32 value);

  // optional .surfing.FilterParameter filter_parameter = 7;
  inline bool has_filter_parameter() const;
  inline void clear_filter_parameter();
  static const int kFilterParameterFieldNumber = 7;
  inline const ::surfing::FilterParameter& filter_parameter() const;
  inline ::surfing::FilterParameter* mutable_filter_parameter();
  inline ::surfing::FilterParameter* release_filter_parameter();
  inline void set_allocated_filter_parameter(::surfing::FilterParameter* filter_parameter);

  // @@protoc_insertion_point(class_scope:surfing.ConvolutionParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_kernel_size();
  inline void clear_has_kernel_size();
  inline void set_has_pad_h();
  inline void clear_has_pad_h();
  inline void set_has_pad_w();
  inline void clear_has_pad_w();
  inline void set_has_stride_h();
  inline void clear_has_stride_h();
  inline void set_has_stride_w();
  inline void clear_has_stride_w();
  inline void set_has_filter_parameter();
  inline void clear_has_filter_parameter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::uint32 kernel_size_;
  ::google::protobuf::uint32 pad_h_;
  ::google::protobuf::uint32 pad_w_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;
  ::surfing::FilterParameter* filter_parameter_;
  friend void  protobuf_AddDesc_surfing_2eproto();
  friend void protobuf_AssignDesc_surfing_2eproto();
  friend void protobuf_ShutdownFile_surfing_2eproto();

  void InitAsDefaultInstance();
  static ConvolutionParameter* default_instance_;
};
// -------------------------------------------------------------------

class DataParameter : public ::google::protobuf::Message {
 public:
  DataParameter();
  virtual ~DataParameter();

  DataParameter(const DataParameter& from);

  inline DataParameter& operator=(const DataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataParameter& default_instance();

  void Swap(DataParameter* other);

  // implements Message ----------------------------------------------

  DataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataParameter& from);
  void MergeFrom(const DataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional uint32 batch_size = 2;
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 batch_size() const;
  inline void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional string mean_file = 4;
  inline bool has_mean_file() const;
  inline void clear_mean_file();
  static const int kMeanFileFieldNumber = 4;
  inline const ::std::string& mean_file() const;
  inline void set_mean_file(const ::std::string& value);
  inline void set_mean_file(const char* value);
  inline void set_mean_file(const char* value, size_t size);
  inline ::std::string* mutable_mean_file();
  inline ::std::string* release_mean_file();
  inline void set_allocated_mean_file(::std::string* mean_file);

  // repeated uint32 cropped_size = 5;
  inline int cropped_size_size() const;
  inline void clear_cropped_size();
  static const int kCroppedSizeFieldNumber = 5;
  inline ::google::protobuf::uint32 cropped_size(int index) const;
  inline void set_cropped_size(int index, ::google::protobuf::uint32 value);
  inline void add_cropped_size(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cropped_size() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cropped_size();

  // @@protoc_insertion_point(class_scope:surfing.DataParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* source_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 num_;
  ::std::string* mean_file_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cropped_size_;
  friend void  protobuf_AddDesc_surfing_2eproto();
  friend void protobuf_AssignDesc_surfing_2eproto();
  friend void protobuf_ShutdownFile_surfing_2eproto();

  void InitAsDefaultInstance();
  static DataParameter* default_instance_;
};
// -------------------------------------------------------------------

class DropoutParameter : public ::google::protobuf::Message {
 public:
  DropoutParameter();
  virtual ~DropoutParameter();

  DropoutParameter(const DropoutParameter& from);

  inline DropoutParameter& operator=(const DropoutParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DropoutParameter& default_instance();

  void Swap(DropoutParameter* other);

  // implements Message ----------------------------------------------

  DropoutParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DropoutParameter& from);
  void MergeFrom(const DropoutParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float dropout_ratio = 1 [default = 0.5];
  inline bool has_dropout_ratio() const;
  inline void clear_dropout_ratio();
  static const int kDropoutRatioFieldNumber = 1;
  inline float dropout_ratio() const;
  inline void set_dropout_ratio(float value);

  // @@protoc_insertion_point(class_scope:surfing.DropoutParameter)
 private:
  inline void set_has_dropout_ratio();
  inline void clear_has_dropout_ratio();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float dropout_ratio_;
  friend void  protobuf_AddDesc_surfing_2eproto();
  friend void protobuf_AssignDesc_surfing_2eproto();
  friend void protobuf_ShutdownFile_surfing_2eproto();

  void InitAsDefaultInstance();
  static DropoutParameter* default_instance_;
};
// -------------------------------------------------------------------

class InnerProductParameter : public ::google::protobuf::Message {
 public:
  InnerProductParameter();
  virtual ~InnerProductParameter();

  InnerProductParameter(const InnerProductParameter& from);

  inline InnerProductParameter& operator=(const InnerProductParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InnerProductParameter& default_instance();

  void Swap(InnerProductParameter* other);

  // implements Message ----------------------------------------------

  InnerProductParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InnerProductParameter& from);
  void MergeFrom(const InnerProductParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional .surfing.FilterParameter filter_parameter = 2;
  inline bool has_filter_parameter() const;
  inline void clear_filter_parameter();
  static const int kFilterParameterFieldNumber = 2;
  inline const ::surfing::FilterParameter& filter_parameter() const;
  inline ::surfing::FilterParameter* mutable_filter_parameter();
  inline ::surfing::FilterParameter* release_filter_parameter();
  inline void set_allocated_filter_parameter(::surfing::FilterParameter* filter_parameter);

  // @@protoc_insertion_point(class_scope:surfing.InnerProductParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_filter_parameter();
  inline void clear_has_filter_parameter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::surfing::FilterParameter* filter_parameter_;
  ::google::protobuf::uint32 num_output_;
  friend void  protobuf_AddDesc_surfing_2eproto();
  friend void protobuf_AssignDesc_surfing_2eproto();
  friend void protobuf_ShutdownFile_surfing_2eproto();

  void InitAsDefaultInstance();
  static InnerProductParameter* default_instance_;
};
// -------------------------------------------------------------------

class LCNParameter : public ::google::protobuf::Message {
 public:
  LCNParameter();
  virtual ~LCNParameter();

  LCNParameter(const LCNParameter& from);

  inline LCNParameter& operator=(const LCNParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LCNParameter& default_instance();

  void Swap(LCNParameter* other);

  // implements Message ----------------------------------------------

  LCNParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LCNParameter& from);
  void MergeFrom(const LCNParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:surfing.LCNParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_surfing_2eproto();
  friend void protobuf_AssignDesc_surfing_2eproto();
  friend void protobuf_ShutdownFile_surfing_2eproto();

  void InitAsDefaultInstance();
  static LCNParameter* default_instance_;
};
// -------------------------------------------------------------------

class LRNParameter : public ::google::protobuf::Message {
 public:
  LRNParameter();
  virtual ~LRNParameter();

  LRNParameter(const LRNParameter& from);

  inline LRNParameter& operator=(const LRNParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LRNParameter& default_instance();

  void Swap(LRNParameter* other);

  // implements Message ----------------------------------------------

  LRNParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LRNParameter& from);
  void MergeFrom(const LRNParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 local_size = 1 [default = 5];
  inline bool has_local_size() const;
  inline void clear_local_size();
  static const int kLocalSizeFieldNumber = 1;
  inline ::google::protobuf::uint32 local_size() const;
  inline void set_local_size(::google::protobuf::uint32 value);

  // optional float alpha = 2 [default = 0.0001];
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 2;
  inline float alpha() const;
  inline void set_alpha(float value);

  // optional float beta = 3 [default = 0.75];
  inline bool has_beta() const;
  inline void clear_beta();
  static const int kBetaFieldNumber = 3;
  inline float beta() const;
  inline void set_beta(float value);

  // optional float k = 4 [default = 1];
  inline bool has_k() const;
  inline void clear_k();
  static const int kKFieldNumber = 4;
  inline float k() const;
  inline void set_k(float value);

  // @@protoc_insertion_point(class_scope:surfing.LRNParameter)
 private:
  inline void set_has_local_size();
  inline void clear_has_local_size();
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_beta();
  inline void clear_has_beta();
  inline void set_has_k();
  inline void clear_has_k();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 local_size_;
  float alpha_;
  float beta_;
  float k_;
  friend void  protobuf_AddDesc_surfing_2eproto();
  friend void protobuf_AssignDesc_surfing_2eproto();
  friend void protobuf_ShutdownFile_surfing_2eproto();

  void InitAsDefaultInstance();
  static LRNParameter* default_instance_;
};
// -------------------------------------------------------------------

class PoolingParameter : public ::google::protobuf::Message {
 public:
  PoolingParameter();
  virtual ~PoolingParameter();

  PoolingParameter(const PoolingParameter& from);

  inline PoolingParameter& operator=(const PoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoolingParameter& default_instance();

  void Swap(PoolingParameter* other);

  // implements Message ----------------------------------------------

  PoolingParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PoolingParameter& from);
  void MergeFrom(const PoolingParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PoolingParameter_PoolingMethod PoolingMethod;
  static const PoolingMethod MAX = PoolingParameter_PoolingMethod_MAX;
  static const PoolingMethod AVE = PoolingParameter_PoolingMethod_AVE;
  static inline bool PoolingMethod_IsValid(int value) {
    return PoolingParameter_PoolingMethod_IsValid(value);
  }
  static const PoolingMethod PoolingMethod_MIN =
    PoolingParameter_PoolingMethod_PoolingMethod_MIN;
  static const PoolingMethod PoolingMethod_MAX =
    PoolingParameter_PoolingMethod_PoolingMethod_MAX;
  static const int PoolingMethod_ARRAYSIZE =
    PoolingParameter_PoolingMethod_PoolingMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolingMethod_descriptor() {
    return PoolingParameter_PoolingMethod_descriptor();
  }
  static inline const ::std::string& PoolingMethod_Name(PoolingMethod value) {
    return PoolingParameter_PoolingMethod_Name(value);
  }
  static inline bool PoolingMethod_Parse(const ::std::string& name,
      PoolingMethod* value) {
    return PoolingParameter_PoolingMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .surfing.PoolingParameter.PoolingMethod pooling_method = 1 [default = MAX];
  inline bool has_pooling_method() const;
  inline void clear_pooling_method();
  static const int kPoolingMethodFieldNumber = 1;
  inline ::surfing::PoolingParameter_PoolingMethod pooling_method() const;
  inline void set_pooling_method(::surfing::PoolingParameter_PoolingMethod value);

  // optional uint32 pad_h = 2 [default = 0];
  inline bool has_pad_h() const;
  inline void clear_pad_h();
  static const int kPadHFieldNumber = 2;
  inline ::google::protobuf::uint32 pad_h() const;
  inline void set_pad_h(::google::protobuf::uint32 value);

  // optional uint32 pad_w = 3 [default = 0];
  inline bool has_pad_w() const;
  inline void clear_pad_w();
  static const int kPadWFieldNumber = 3;
  inline ::google::protobuf::uint32 pad_w() const;
  inline void set_pad_w(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 4 [default = 2];
  inline bool has_stride_h() const;
  inline void clear_stride_h();
  static const int kStrideHFieldNumber = 4;
  inline ::google::protobuf::uint32 stride_h() const;
  inline void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 5 [default = 2];
  inline bool has_stride_w() const;
  inline void clear_stride_w();
  static const int kStrideWFieldNumber = 5;
  inline ::google::protobuf::uint32 stride_w() const;
  inline void set_stride_w(::google::protobuf::uint32 value);

  // optional uint32 window_h = 6 [default = 2];
  inline bool has_window_h() const;
  inline void clear_window_h();
  static const int kWindowHFieldNumber = 6;
  inline ::google::protobuf::uint32 window_h() const;
  inline void set_window_h(::google::protobuf::uint32 value);

  // optional uint32 window_w = 7 [default = 2];
  inline bool has_window_w() const;
  inline void clear_window_w();
  static const int kWindowWFieldNumber = 7;
  inline ::google::protobuf::uint32 window_w() const;
  inline void set_window_w(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:surfing.PoolingParameter)
 private:
  inline void set_has_pooling_method();
  inline void clear_has_pooling_method();
  inline void set_has_pad_h();
  inline void clear_has_pad_h();
  inline void set_has_pad_w();
  inline void clear_has_pad_w();
  inline void set_has_stride_h();
  inline void clear_has_stride_h();
  inline void set_has_stride_w();
  inline void clear_has_stride_w();
  inline void set_has_window_h();
  inline void clear_has_window_h();
  inline void set_has_window_w();
  inline void clear_has_window_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int pooling_method_;
  ::google::protobuf::uint32 pad_h_;
  ::google::protobuf::uint32 pad_w_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;
  ::google::protobuf::uint32 window_h_;
  ::google::protobuf::uint32 window_w_;
  friend void  protobuf_AddDesc_surfing_2eproto();
  friend void protobuf_AssignDesc_surfing_2eproto();
  friend void protobuf_ShutdownFile_surfing_2eproto();

  void InitAsDefaultInstance();
  static PoolingParameter* default_instance_;
};
// -------------------------------------------------------------------

class ReluParameter : public ::google::protobuf::Message {
 public:
  ReluParameter();
  virtual ~ReluParameter();

  ReluParameter(const ReluParameter& from);

  inline ReluParameter& operator=(const ReluParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReluParameter& default_instance();

  void Swap(ReluParameter* other);

  // implements Message ----------------------------------------------

  ReluParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReluParameter& from);
  void MergeFrom(const ReluParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:surfing.ReluParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_surfing_2eproto();
  friend void protobuf_AssignDesc_surfing_2eproto();
  friend void protobuf_ShutdownFile_surfing_2eproto();

  void InitAsDefaultInstance();
  static ReluParameter* default_instance_;
};
// -------------------------------------------------------------------

class ResultParameter : public ::google::protobuf::Message {
 public:
  ResultParameter();
  virtual ~ResultParameter();

  ResultParameter(const ResultParameter& from);

  inline ResultParameter& operator=(const ResultParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResultParameter& default_instance();

  void Swap(ResultParameter* other);

  // implements Message ----------------------------------------------

  ResultParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResultParameter& from);
  void MergeFrom(const ResultParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ResultParameter_LossType LossType;
  static const LossType L1 = ResultParameter_LossType_L1;
  static const LossType L2 = ResultParameter_LossType_L2;
  static inline bool LossType_IsValid(int value) {
    return ResultParameter_LossType_IsValid(value);
  }
  static const LossType LossType_MIN =
    ResultParameter_LossType_LossType_MIN;
  static const LossType LossType_MAX =
    ResultParameter_LossType_LossType_MAX;
  static const int LossType_ARRAYSIZE =
    ResultParameter_LossType_LossType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LossType_descriptor() {
    return ResultParameter_LossType_descriptor();
  }
  static inline const ::std::string& LossType_Name(LossType value) {
    return ResultParameter_LossType_Name(value);
  }
  static inline bool LossType_Parse(const ::std::string& name,
      LossType* value) {
    return ResultParameter_LossType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .surfing.ResultParameter.LossType losstype = 1 [default = L1];
  inline bool has_losstype() const;
  inline void clear_losstype();
  static const int kLosstypeFieldNumber = 1;
  inline ::surfing::ResultParameter_LossType losstype() const;
  inline void set_losstype(::surfing::ResultParameter_LossType value);

  // @@protoc_insertion_point(class_scope:surfing.ResultParameter)
 private:
  inline void set_has_losstype();
  inline void clear_has_losstype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int losstype_;
  friend void  protobuf_AddDesc_surfing_2eproto();
  friend void protobuf_AssignDesc_surfing_2eproto();
  friend void protobuf_ShutdownFile_surfing_2eproto();

  void InitAsDefaultInstance();
  static ResultParameter* default_instance_;
};
// -------------------------------------------------------------------

class SigmoidParameter : public ::google::protobuf::Message {
 public:
  SigmoidParameter();
  virtual ~SigmoidParameter();

  SigmoidParameter(const SigmoidParameter& from);

  inline SigmoidParameter& operator=(const SigmoidParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SigmoidParameter& default_instance();

  void Swap(SigmoidParameter* other);

  // implements Message ----------------------------------------------

  SigmoidParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SigmoidParameter& from);
  void MergeFrom(const SigmoidParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:surfing.SigmoidParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_surfing_2eproto();
  friend void protobuf_AssignDesc_surfing_2eproto();
  friend void protobuf_ShutdownFile_surfing_2eproto();

  void InitAsDefaultInstance();
  static SigmoidParameter* default_instance_;
};
// -------------------------------------------------------------------

class SoftmaxParameter : public ::google::protobuf::Message {
 public:
  SoftmaxParameter();
  virtual ~SoftmaxParameter();

  SoftmaxParameter(const SoftmaxParameter& from);

  inline SoftmaxParameter& operator=(const SoftmaxParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoftmaxParameter& default_instance();

  void Swap(SoftmaxParameter* other);

  // implements Message ----------------------------------------------

  SoftmaxParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SoftmaxParameter& from);
  void MergeFrom(const SoftmaxParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:surfing.SoftmaxParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_surfing_2eproto();
  friend void protobuf_AssignDesc_surfing_2eproto();
  friend void protobuf_ShutdownFile_surfing_2eproto();

  void InitAsDefaultInstance();
  static SoftmaxParameter* default_instance_;
};
// -------------------------------------------------------------------

class TanhParameter : public ::google::protobuf::Message {
 public:
  TanhParameter();
  virtual ~TanhParameter();

  TanhParameter(const TanhParameter& from);

  inline TanhParameter& operator=(const TanhParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TanhParameter& default_instance();

  void Swap(TanhParameter* other);

  // implements Message ----------------------------------------------

  TanhParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TanhParameter& from);
  void MergeFrom(const TanhParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:surfing.TanhParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_surfing_2eproto();
  friend void protobuf_AssignDesc_surfing_2eproto();
  friend void protobuf_ShutdownFile_surfing_2eproto();

  void InitAsDefaultInstance();
  static TanhParameter* default_instance_;
};
// ===================================================================


// ===================================================================

// BlobProto

// optional int32 num = 1 [default = 0];
inline bool BlobProto::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobProto::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobProto::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobProto::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 BlobProto::num() const {
  // @@protoc_insertion_point(field_get:surfing.BlobProto.num)
  return num_;
}
inline void BlobProto::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:surfing.BlobProto.num)
}

// optional int32 channels = 2 [default = 0];
inline bool BlobProto::has_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobProto::set_has_channels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobProto::clear_has_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobProto::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
inline ::google::protobuf::int32 BlobProto::channels() const {
  // @@protoc_insertion_point(field_get:surfing.BlobProto.channels)
  return channels_;
}
inline void BlobProto::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:surfing.BlobProto.channels)
}

// optional int32 height = 3 [default = 0];
inline bool BlobProto::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobProto::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobProto::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobProto::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 BlobProto::height() const {
  // @@protoc_insertion_point(field_get:surfing.BlobProto.height)
  return height_;
}
inline void BlobProto::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:surfing.BlobProto.height)
}

// optional int32 width = 4 [default = 0];
inline bool BlobProto::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlobProto::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlobProto::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlobProto::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 BlobProto::width() const {
  // @@protoc_insertion_point(field_get:surfing.BlobProto.width)
  return width_;
}
inline void BlobProto::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:surfing.BlobProto.width)
}

// repeated float data = 5 [packed = true];
inline int BlobProto::data_size() const {
  return data_.size();
}
inline void BlobProto::clear_data() {
  data_.Clear();
}
inline float BlobProto::data(int index) const {
  // @@protoc_insertion_point(field_get:surfing.BlobProto.data)
  return data_.Get(index);
}
inline void BlobProto::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:surfing.BlobProto.data)
}
inline void BlobProto::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:surfing.BlobProto.data)
}
inline const ::google::protobuf::RepeatedField< float >&
BlobProto::data() const {
  // @@protoc_insertion_point(field_list:surfing.BlobProto.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
BlobProto::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:surfing.BlobProto.data)
  return &data_;
}

// repeated float diff = 6 [packed = true];
inline int BlobProto::diff_size() const {
  return diff_.size();
}
inline void BlobProto::clear_diff() {
  diff_.Clear();
}
inline float BlobProto::diff(int index) const {
  // @@protoc_insertion_point(field_get:surfing.BlobProto.diff)
  return diff_.Get(index);
}
inline void BlobProto::set_diff(int index, float value) {
  diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:surfing.BlobProto.diff)
}
inline void BlobProto::add_diff(float value) {
  diff_.Add(value);
  // @@protoc_insertion_point(field_add:surfing.BlobProto.diff)
}
inline const ::google::protobuf::RepeatedField< float >&
BlobProto::diff() const {
  // @@protoc_insertion_point(field_list:surfing.BlobProto.diff)
  return diff_;
}
inline ::google::protobuf::RepeatedField< float >*
BlobProto::mutable_diff() {
  // @@protoc_insertion_point(field_mutable_list:surfing.BlobProto.diff)
  return &diff_;
}

// repeated double double_data = 7 [packed = true];
inline int BlobProto::double_data_size() const {
  return double_data_.size();
}
inline void BlobProto::clear_double_data() {
  double_data_.Clear();
}
inline double BlobProto::double_data(int index) const {
  // @@protoc_insertion_point(field_get:surfing.BlobProto.double_data)
  return double_data_.Get(index);
}
inline void BlobProto::set_double_data(int index, double value) {
  double_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:surfing.BlobProto.double_data)
}
inline void BlobProto::add_double_data(double value) {
  double_data_.Add(value);
  // @@protoc_insertion_point(field_add:surfing.BlobProto.double_data)
}
inline const ::google::protobuf::RepeatedField< double >&
BlobProto::double_data() const {
  // @@protoc_insertion_point(field_list:surfing.BlobProto.double_data)
  return double_data_;
}
inline ::google::protobuf::RepeatedField< double >*
BlobProto::mutable_double_data() {
  // @@protoc_insertion_point(field_mutable_list:surfing.BlobProto.double_data)
  return &double_data_;
}

// repeated double double_diff = 8 [packed = true];
inline int BlobProto::double_diff_size() const {
  return double_diff_.size();
}
inline void BlobProto::clear_double_diff() {
  double_diff_.Clear();
}
inline double BlobProto::double_diff(int index) const {
  // @@protoc_insertion_point(field_get:surfing.BlobProto.double_diff)
  return double_diff_.Get(index);
}
inline void BlobProto::set_double_diff(int index, double value) {
  double_diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:surfing.BlobProto.double_diff)
}
inline void BlobProto::add_double_diff(double value) {
  double_diff_.Add(value);
  // @@protoc_insertion_point(field_add:surfing.BlobProto.double_diff)
}
inline const ::google::protobuf::RepeatedField< double >&
BlobProto::double_diff() const {
  // @@protoc_insertion_point(field_list:surfing.BlobProto.double_diff)
  return double_diff_;
}
inline ::google::protobuf::RepeatedField< double >*
BlobProto::mutable_double_diff() {
  // @@protoc_insertion_point(field_mutable_list:surfing.BlobProto.double_diff)
  return &double_diff_;
}

// -------------------------------------------------------------------

// Datum

// optional int32 channels = 1;
inline bool Datum::has_channels() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Datum::set_has_channels() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Datum::clear_has_channels() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Datum::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
inline ::google::protobuf::int32 Datum::channels() const {
  // @@protoc_insertion_point(field_get:surfing.Datum.channels)
  return channels_;
}
inline void Datum::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:surfing.Datum.channels)
}

// optional int32 height = 2;
inline bool Datum::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Datum::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Datum::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Datum::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 Datum::height() const {
  // @@protoc_insertion_point(field_get:surfing.Datum.height)
  return height_;
}
inline void Datum::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:surfing.Datum.height)
}

// optional int32 width = 3;
inline bool Datum::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Datum::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Datum::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Datum::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 Datum::width() const {
  // @@protoc_insertion_point(field_get:surfing.Datum.width)
  return width_;
}
inline void Datum::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:surfing.Datum.width)
}

// optional bytes data = 4;
inline bool Datum::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Datum::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Datum::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Datum::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Datum::data() const {
  // @@protoc_insertion_point(field_get:surfing.Datum.data)
  return *data_;
}
inline void Datum::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:surfing.Datum.data)
}
inline void Datum::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:surfing.Datum.data)
}
inline void Datum::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:surfing.Datum.data)
}
inline ::std::string* Datum::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:surfing.Datum.data)
  return data_;
}
inline ::std::string* Datum::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Datum::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:surfing.Datum.data)
}

// optional int32 label = 5;
inline bool Datum::has_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Datum::set_has_label() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Datum::clear_has_label() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Datum::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline ::google::protobuf::int32 Datum::label() const {
  // @@protoc_insertion_point(field_get:surfing.Datum.label)
  return label_;
}
inline void Datum::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:surfing.Datum.label)
}

// repeated float float_data = 6;
inline int Datum::float_data_size() const {
  return float_data_.size();
}
inline void Datum::clear_float_data() {
  float_data_.Clear();
}
inline float Datum::float_data(int index) const {
  // @@protoc_insertion_point(field_get:surfing.Datum.float_data)
  return float_data_.Get(index);
}
inline void Datum::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:surfing.Datum.float_data)
}
inline void Datum::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:surfing.Datum.float_data)
}
inline const ::google::protobuf::RepeatedField< float >&
Datum::float_data() const {
  // @@protoc_insertion_point(field_list:surfing.Datum.float_data)
  return float_data_;
}
inline ::google::protobuf::RepeatedField< float >*
Datum::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:surfing.Datum.float_data)
  return &float_data_;
}

// -------------------------------------------------------------------

// FilterParameter

// optional .surfing.FilterParameter.FilterType filter = 1 [default = GAUSSIAN];
inline bool FilterParameter::has_filter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FilterParameter::set_has_filter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FilterParameter::clear_has_filter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FilterParameter::clear_filter() {
  filter_ = 0;
  clear_has_filter();
}
inline ::surfing::FilterParameter_FilterType FilterParameter::filter() const {
  // @@protoc_insertion_point(field_get:surfing.FilterParameter.filter)
  return static_cast< ::surfing::FilterParameter_FilterType >(filter_);
}
inline void FilterParameter::set_filter(::surfing::FilterParameter_FilterType value) {
  assert(::surfing::FilterParameter_FilterType_IsValid(value));
  set_has_filter();
  filter_ = value;
  // @@protoc_insertion_point(field_set:surfing.FilterParameter.filter)
}

// optional float mean = 2 [default = 0];
inline bool FilterParameter::has_mean() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FilterParameter::set_has_mean() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FilterParameter::clear_has_mean() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FilterParameter::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline float FilterParameter::mean() const {
  // @@protoc_insertion_point(field_get:surfing.FilterParameter.mean)
  return mean_;
}
inline void FilterParameter::set_mean(float value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:surfing.FilterParameter.mean)
}

// optional float std = 3 [default = 0.1];
inline bool FilterParameter::has_std() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FilterParameter::set_has_std() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FilterParameter::clear_has_std() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FilterParameter::clear_std() {
  std_ = 0.1f;
  clear_has_std();
}
inline float FilterParameter::std() const {
  // @@protoc_insertion_point(field_get:surfing.FilterParameter.std)
  return std_;
}
inline void FilterParameter::set_std(float value) {
  set_has_std();
  std_ = value;
  // @@protoc_insertion_point(field_set:surfing.FilterParameter.std)
}

// optional float range = 4 [default = 0.1];
inline bool FilterParameter::has_range() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FilterParameter::set_has_range() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FilterParameter::clear_has_range() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FilterParameter::clear_range() {
  range_ = 0.1f;
  clear_has_range();
}
inline float FilterParameter::range() const {
  // @@protoc_insertion_point(field_get:surfing.FilterParameter.range)
  return range_;
}
inline void FilterParameter::set_range(float value) {
  set_has_range();
  range_ = value;
  // @@protoc_insertion_point(field_set:surfing.FilterParameter.range)
}

// optional float bias = 6 [default = 0];
inline bool FilterParameter::has_bias() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FilterParameter::set_has_bias() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FilterParameter::clear_has_bias() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FilterParameter::clear_bias() {
  bias_ = 0;
  clear_has_bias();
}
inline float FilterParameter::bias() const {
  // @@protoc_insertion_point(field_get:surfing.FilterParameter.bias)
  return bias_;
}
inline void FilterParameter::set_bias(float value) {
  set_has_bias();
  bias_ = value;
  // @@protoc_insertion_point(field_set:surfing.FilterParameter.bias)
}

// optional int32 num = 7 [default = 0];
inline bool FilterParameter::has_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FilterParameter::set_has_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FilterParameter::clear_has_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FilterParameter::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 FilterParameter::num() const {
  // @@protoc_insertion_point(field_get:surfing.FilterParameter.num)
  return num_;
}
inline void FilterParameter::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:surfing.FilterParameter.num)
}

// optional int32 channels = 8 [default = 0];
inline bool FilterParameter::has_channels() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FilterParameter::set_has_channels() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FilterParameter::clear_has_channels() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FilterParameter::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
inline ::google::protobuf::int32 FilterParameter::channels() const {
  // @@protoc_insertion_point(field_get:surfing.FilterParameter.channels)
  return channels_;
}
inline void FilterParameter::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:surfing.FilterParameter.channels)
}

// optional int32 height = 9 [default = 0];
inline bool FilterParameter::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FilterParameter::set_has_height() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FilterParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FilterParameter::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 FilterParameter::height() const {
  // @@protoc_insertion_point(field_get:surfing.FilterParameter.height)
  return height_;
}
inline void FilterParameter::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:surfing.FilterParameter.height)
}

// optional int32 width = 10 [default = 0];
inline bool FilterParameter::has_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FilterParameter::set_has_width() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FilterParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FilterParameter::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 FilterParameter::width() const {
  // @@protoc_insertion_point(field_get:surfing.FilterParameter.width)
  return width_;
}
inline void FilterParameter::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:surfing.FilterParameter.width)
}

// -------------------------------------------------------------------

// SolverParameter

// optional .surfing.SolverParameter.IS_PRE_TRAIN is_pre_train = 1 [default = NEW];
inline bool SolverParameter::has_is_pre_train() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolverParameter::set_has_is_pre_train() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolverParameter::clear_has_is_pre_train() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolverParameter::clear_is_pre_train() {
  is_pre_train_ = 1;
  clear_has_is_pre_train();
}
inline ::surfing::SolverParameter_IS_PRE_TRAIN SolverParameter::is_pre_train() const {
  // @@protoc_insertion_point(field_get:surfing.SolverParameter.is_pre_train)
  return static_cast< ::surfing::SolverParameter_IS_PRE_TRAIN >(is_pre_train_);
}
inline void SolverParameter::set_is_pre_train(::surfing::SolverParameter_IS_PRE_TRAIN value) {
  assert(::surfing::SolverParameter_IS_PRE_TRAIN_IsValid(value));
  set_has_is_pre_train();
  is_pre_train_ = value;
  // @@protoc_insertion_point(field_set:surfing.SolverParameter.is_pre_train)
}

// optional string net = 2;
inline bool SolverParameter::has_net() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolverParameter::set_has_net() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolverParameter::clear_has_net() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolverParameter::clear_net() {
  if (net_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    net_->clear();
  }
  clear_has_net();
}
inline const ::std::string& SolverParameter::net() const {
  // @@protoc_insertion_point(field_get:surfing.SolverParameter.net)
  return *net_;
}
inline void SolverParameter::set_net(const ::std::string& value) {
  set_has_net();
  if (net_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    net_ = new ::std::string;
  }
  net_->assign(value);
  // @@protoc_insertion_point(field_set:surfing.SolverParameter.net)
}
inline void SolverParameter::set_net(const char* value) {
  set_has_net();
  if (net_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    net_ = new ::std::string;
  }
  net_->assign(value);
  // @@protoc_insertion_point(field_set_char:surfing.SolverParameter.net)
}
inline void SolverParameter::set_net(const char* value, size_t size) {
  set_has_net();
  if (net_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    net_ = new ::std::string;
  }
  net_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:surfing.SolverParameter.net)
}
inline ::std::string* SolverParameter::mutable_net() {
  set_has_net();
  if (net_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    net_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:surfing.SolverParameter.net)
  return net_;
}
inline ::std::string* SolverParameter::release_net() {
  clear_has_net();
  if (net_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = net_;
    net_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SolverParameter::set_allocated_net(::std::string* net) {
  if (net_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete net_;
  }
  if (net) {
    set_has_net();
    net_ = net;
  } else {
    clear_has_net();
    net_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:surfing.SolverParameter.net)
}

// optional string net_binary = 3;
inline bool SolverParameter::has_net_binary() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SolverParameter::set_has_net_binary() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SolverParameter::clear_has_net_binary() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SolverParameter::clear_net_binary() {
  if (net_binary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    net_binary_->clear();
  }
  clear_has_net_binary();
}
inline const ::std::string& SolverParameter::net_binary() const {
  // @@protoc_insertion_point(field_get:surfing.SolverParameter.net_binary)
  return *net_binary_;
}
inline void SolverParameter::set_net_binary(const ::std::string& value) {
  set_has_net_binary();
  if (net_binary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    net_binary_ = new ::std::string;
  }
  net_binary_->assign(value);
  // @@protoc_insertion_point(field_set:surfing.SolverParameter.net_binary)
}
inline void SolverParameter::set_net_binary(const char* value) {
  set_has_net_binary();
  if (net_binary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    net_binary_ = new ::std::string;
  }
  net_binary_->assign(value);
  // @@protoc_insertion_point(field_set_char:surfing.SolverParameter.net_binary)
}
inline void SolverParameter::set_net_binary(const char* value, size_t size) {
  set_has_net_binary();
  if (net_binary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    net_binary_ = new ::std::string;
  }
  net_binary_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:surfing.SolverParameter.net_binary)
}
inline ::std::string* SolverParameter::mutable_net_binary() {
  set_has_net_binary();
  if (net_binary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    net_binary_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:surfing.SolverParameter.net_binary)
  return net_binary_;
}
inline ::std::string* SolverParameter::release_net_binary() {
  clear_has_net_binary();
  if (net_binary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = net_binary_;
    net_binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SolverParameter::set_allocated_net_binary(::std::string* net_binary) {
  if (net_binary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete net_binary_;
  }
  if (net_binary) {
    set_has_net_binary();
    net_binary_ = net_binary;
  } else {
    clear_has_net_binary();
    net_binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:surfing.SolverParameter.net_binary)
}

// optional int32 max_iter = 4;
inline bool SolverParameter::has_max_iter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SolverParameter::set_has_max_iter() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SolverParameter::clear_has_max_iter() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SolverParameter::clear_max_iter() {
  max_iter_ = 0;
  clear_has_max_iter();
}
inline ::google::protobuf::int32 SolverParameter::max_iter() const {
  // @@protoc_insertion_point(field_get:surfing.SolverParameter.max_iter)
  return max_iter_;
}
inline void SolverParameter::set_max_iter(::google::protobuf::int32 value) {
  set_has_max_iter();
  max_iter_ = value;
  // @@protoc_insertion_point(field_set:surfing.SolverParameter.max_iter)
}

// optional float global_learning_rate = 5;
inline bool SolverParameter::has_global_learning_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SolverParameter::set_has_global_learning_rate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SolverParameter::clear_has_global_learning_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SolverParameter::clear_global_learning_rate() {
  global_learning_rate_ = 0;
  clear_has_global_learning_rate();
}
inline float SolverParameter::global_learning_rate() const {
  // @@protoc_insertion_point(field_get:surfing.SolverParameter.global_learning_rate)
  return global_learning_rate_;
}
inline void SolverParameter::set_global_learning_rate(float value) {
  set_has_global_learning_rate();
  global_learning_rate_ = value;
  // @@protoc_insertion_point(field_set:surfing.SolverParameter.global_learning_rate)
}

// optional float momentum = 6;
inline bool SolverParameter::has_momentum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SolverParameter::set_has_momentum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SolverParameter::clear_has_momentum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SolverParameter::clear_momentum() {
  momentum_ = 0;
  clear_has_momentum();
}
inline float SolverParameter::momentum() const {
  // @@protoc_insertion_point(field_get:surfing.SolverParameter.momentum)
  return momentum_;
}
inline void SolverParameter::set_momentum(float value) {
  set_has_momentum();
  momentum_ = value;
  // @@protoc_insertion_point(field_set:surfing.SolverParameter.momentum)
}

// optional float weight_decay = 7;
inline bool SolverParameter::has_weight_decay() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SolverParameter::set_has_weight_decay() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SolverParameter::clear_has_weight_decay() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SolverParameter::clear_weight_decay() {
  weight_decay_ = 0;
  clear_has_weight_decay();
}
inline float SolverParameter::weight_decay() const {
  // @@protoc_insertion_point(field_get:surfing.SolverParameter.weight_decay)
  return weight_decay_;
}
inline void SolverParameter::set_weight_decay(float value) {
  set_has_weight_decay();
  weight_decay_ = value;
  // @@protoc_insertion_point(field_set:surfing.SolverParameter.weight_decay)
}

// optional int32 test_epoch = 8;
inline bool SolverParameter::has_test_epoch() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SolverParameter::set_has_test_epoch() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SolverParameter::clear_has_test_epoch() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SolverParameter::clear_test_epoch() {
  test_epoch_ = 0;
  clear_has_test_epoch();
}
inline ::google::protobuf::int32 SolverParameter::test_epoch() const {
  // @@protoc_insertion_point(field_get:surfing.SolverParameter.test_epoch)
  return test_epoch_;
}
inline void SolverParameter::set_test_epoch(::google::protobuf::int32 value) {
  set_has_test_epoch();
  test_epoch_ = value;
  // @@protoc_insertion_point(field_set:surfing.SolverParameter.test_epoch)
}

// optional int32 display_epoch = 9 [default = 100];
inline bool SolverParameter::has_display_epoch() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SolverParameter::set_has_display_epoch() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SolverParameter::clear_has_display_epoch() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SolverParameter::clear_display_epoch() {
  display_epoch_ = 100;
  clear_has_display_epoch();
}
inline ::google::protobuf::int32 SolverParameter::display_epoch() const {
  // @@protoc_insertion_point(field_get:surfing.SolverParameter.display_epoch)
  return display_epoch_;
}
inline void SolverParameter::set_display_epoch(::google::protobuf::int32 value) {
  set_has_display_epoch();
  display_epoch_ = value;
  // @@protoc_insertion_point(field_set:surfing.SolverParameter.display_epoch)
}

// -------------------------------------------------------------------

// NetParameter

// optional string name = 1;
inline bool NetParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NetParameter::name() const {
  // @@protoc_insertion_point(field_get:surfing.NetParameter.name)
  return *name_;
}
inline void NetParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:surfing.NetParameter.name)
}
inline void NetParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:surfing.NetParameter.name)
}
inline void NetParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:surfing.NetParameter.name)
}
inline ::std::string* NetParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:surfing.NetParameter.name)
  return name_;
}
inline ::std::string* NetParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NetParameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:surfing.NetParameter.name)
}

// repeated .surfing.LayerParameter layer = 100;
inline int NetParameter::layer_size() const {
  return layer_.size();
}
inline void NetParameter::clear_layer() {
  layer_.Clear();
}
inline const ::surfing::LayerParameter& NetParameter::layer(int index) const {
  // @@protoc_insertion_point(field_get:surfing.NetParameter.layer)
  return layer_.Get(index);
}
inline ::surfing::LayerParameter* NetParameter::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:surfing.NetParameter.layer)
  return layer_.Mutable(index);
}
inline ::surfing::LayerParameter* NetParameter::add_layer() {
  // @@protoc_insertion_point(field_add:surfing.NetParameter.layer)
  return layer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::surfing::LayerParameter >&
NetParameter::layer() const {
  // @@protoc_insertion_point(field_list:surfing.NetParameter.layer)
  return layer_;
}
inline ::google::protobuf::RepeatedPtrField< ::surfing::LayerParameter >*
NetParameter::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:surfing.NetParameter.layer)
  return &layer_;
}

// -------------------------------------------------------------------

// LayerParameter

// optional string name = 1;
inline bool LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LayerParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:surfing.LayerParameter.name)
  return *name_;
}
inline void LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:surfing.LayerParameter.name)
}
inline void LayerParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:surfing.LayerParameter.name)
}
inline void LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:surfing.LayerParameter.name)
}
inline ::std::string* LayerParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:surfing.LayerParameter.name)
  return name_;
}
inline ::std::string* LayerParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LayerParameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:surfing.LayerParameter.name)
}

// optional .surfing.LayerParameter.Type type = 2;
inline bool LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LayerParameter::clear_type() {
  type_ = 13;
  clear_has_type();
}
inline ::surfing::LayerParameter_Type LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:surfing.LayerParameter.type)
  return static_cast< ::surfing::LayerParameter_Type >(type_);
}
inline void LayerParameter::set_type(::surfing::LayerParameter_Type value) {
  assert(::surfing::LayerParameter_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:surfing.LayerParameter.type)
}

// repeated string bottom = 3;
inline int LayerParameter::bottom_size() const {
  return bottom_.size();
}
inline void LayerParameter::clear_bottom() {
  bottom_.Clear();
}
inline const ::std::string& LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:surfing.LayerParameter.bottom)
  return bottom_.Get(index);
}
inline ::std::string* LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:surfing.LayerParameter.bottom)
  return bottom_.Mutable(index);
}
inline void LayerParameter::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:surfing.LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
inline void LayerParameter::set_bottom(int index, const char* value) {
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:surfing.LayerParameter.bottom)
}
inline void LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:surfing.LayerParameter.bottom)
}
inline ::std::string* LayerParameter::add_bottom() {
  return bottom_.Add();
}
inline void LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:surfing.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const char* value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:surfing.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:surfing.LayerParameter.bottom)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:surfing.LayerParameter.bottom)
  return bottom_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:surfing.LayerParameter.bottom)
  return &bottom_;
}

// optional string top = 4;
inline bool LayerParameter::has_top() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LayerParameter::set_has_top() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LayerParameter::clear_has_top() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LayerParameter::clear_top() {
  if (top_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    top_->clear();
  }
  clear_has_top();
}
inline const ::std::string& LayerParameter::top() const {
  // @@protoc_insertion_point(field_get:surfing.LayerParameter.top)
  return *top_;
}
inline void LayerParameter::set_top(const ::std::string& value) {
  set_has_top();
  if (top_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    top_ = new ::std::string;
  }
  top_->assign(value);
  // @@protoc_insertion_point(field_set:surfing.LayerParameter.top)
}
inline void LayerParameter::set_top(const char* value) {
  set_has_top();
  if (top_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    top_ = new ::std::string;
  }
  top_->assign(value);
  // @@protoc_insertion_point(field_set_char:surfing.LayerParameter.top)
}
inline void LayerParameter::set_top(const char* value, size_t size) {
  set_has_top();
  if (top_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    top_ = new ::std::string;
  }
  top_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:surfing.LayerParameter.top)
}
inline ::std::string* LayerParameter::mutable_top() {
  set_has_top();
  if (top_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    top_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:surfing.LayerParameter.top)
  return top_;
}
inline ::std::string* LayerParameter::release_top() {
  clear_has_top();
  if (top_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = top_;
    top_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LayerParameter::set_allocated_top(::std::string* top) {
  if (top_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete top_;
  }
  if (top) {
    set_has_top();
    top_ = top;
  } else {
    clear_has_top();
    top_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:surfing.LayerParameter.top)
}

// optional int32 num = 11 [default = 0];
inline bool LayerParameter::has_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LayerParameter::set_has_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LayerParameter::clear_has_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LayerParameter::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 LayerParameter::num() const {
  // @@protoc_insertion_point(field_get:surfing.LayerParameter.num)
  return num_;
}
inline void LayerParameter::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:surfing.LayerParameter.num)
}

// optional int32 channels = 12 [default = 0];
inline bool LayerParameter::has_channels() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LayerParameter::set_has_channels() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LayerParameter::clear_has_channels() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LayerParameter::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
inline ::google::protobuf::int32 LayerParameter::channels() const {
  // @@protoc_insertion_point(field_get:surfing.LayerParameter.channels)
  return channels_;
}
inline void LayerParameter::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:surfing.LayerParameter.channels)
}

// optional int32 height = 13 [default = 0];
inline bool LayerParameter::has_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LayerParameter::set_has_height() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LayerParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LayerParameter::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 LayerParameter::height() const {
  // @@protoc_insertion_point(field_get:surfing.LayerParameter.height)
  return height_;
}
inline void LayerParameter::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:surfing.LayerParameter.height)
}

// optional int32 width = 14 [default = 0];
inline bool LayerParameter::has_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LayerParameter::set_has_width() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LayerParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LayerParameter::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 LayerParameter::width() const {
  // @@protoc_insertion_point(field_get:surfing.LayerParameter.width)
  return width_;
}
inline void LayerParameter::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:surfing.LayerParameter.width)
}

// optional .surfing.LayerParameter.Phase phase = 5 [default = ALL];
inline bool LayerParameter::has_phase() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LayerParameter::set_has_phase() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LayerParameter::clear_has_phase() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LayerParameter::clear_phase() {
  phase_ = 2;
  clear_has_phase();
}
inline ::surfing::LayerParameter_Phase LayerParameter::phase() const {
  // @@protoc_insertion_point(field_get:surfing.LayerParameter.phase)
  return static_cast< ::surfing::LayerParameter_Phase >(phase_);
}
inline void LayerParameter::set_phase(::surfing::LayerParameter_Phase value) {
  assert(::surfing::LayerParameter_Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:surfing.LayerParameter.phase)
}

// optional .surfing.BlobProto param = 6;
inline bool LayerParameter::has_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LayerParameter::set_has_param() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LayerParameter::clear_has_param() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LayerParameter::clear_param() {
  if (param_ != NULL) param_->::surfing::BlobProto::Clear();
  clear_has_param();
}
inline const ::surfing::BlobProto& LayerParameter::param() const {
  // @@protoc_insertion_point(field_get:surfing.LayerParameter.param)
  return param_ != NULL ? *param_ : *default_instance_->param_;
}
inline ::surfing::BlobProto* LayerParameter::mutable_param() {
  set_has_param();
  if (param_ == NULL) param_ = new ::surfing::BlobProto;
  // @@protoc_insertion_point(field_mutable:surfing.LayerParameter.param)
  return param_;
}
inline ::surfing::BlobProto* LayerParameter::release_param() {
  clear_has_param();
  ::surfing::BlobProto* temp = param_;
  param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_param(::surfing::BlobProto* param) {
  delete param_;
  param_ = param;
  if (param) {
    set_has_param();
  } else {
    clear_has_param();
  }
  // @@protoc_insertion_point(field_set_allocated:surfing.LayerParameter.param)
}

// optional .surfing.BlobProto bias = 7;
inline bool LayerParameter::has_bias() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LayerParameter::set_has_bias() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LayerParameter::clear_has_bias() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LayerParameter::clear_bias() {
  if (bias_ != NULL) bias_->::surfing::BlobProto::Clear();
  clear_has_bias();
}
inline const ::surfing::BlobProto& LayerParameter::bias() const {
  // @@protoc_insertion_point(field_get:surfing.LayerParameter.bias)
  return bias_ != NULL ? *bias_ : *default_instance_->bias_;
}
inline ::surfing::BlobProto* LayerParameter::mutable_bias() {
  set_has_bias();
  if (bias_ == NULL) bias_ = new ::surfing::BlobProto;
  // @@protoc_insertion_point(field_mutable:surfing.LayerParameter.bias)
  return bias_;
}
inline ::surfing::BlobProto* LayerParameter::release_bias() {
  clear_has_bias();
  ::surfing::BlobProto* temp = bias_;
  bias_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_bias(::surfing::BlobProto* bias) {
  delete bias_;
  bias_ = bias;
  if (bias) {
    set_has_bias();
  } else {
    clear_has_bias();
  }
  // @@protoc_insertion_point(field_set_allocated:surfing.LayerParameter.bias)
}

// optional float filter_learning_rate = 8;
inline bool LayerParameter::has_filter_learning_rate() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LayerParameter::set_has_filter_learning_rate() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LayerParameter::clear_has_filter_learning_rate() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LayerParameter::clear_filter_learning_rate() {
  filter_learning_rate_ = 0;
  clear_has_filter_learning_rate();
}
inline float LayerParameter::filter_learning_rate() const {
  // @@protoc_insertion_point(field_get:surfing.LayerParameter.filter_learning_rate)
  return filter_learning_rate_;
}
inline void LayerParameter::set_filter_learning_rate(float value) {
  set_has_filter_learning_rate();
  filter_learning_rate_ = value;
  // @@protoc_insertion_point(field_set:surfing.LayerParameter.filter_learning_rate)
}

// optional float bias_learning_rate = 9;
inline bool LayerParameter::has_bias_learning_rate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LayerParameter::set_has_bias_learning_rate() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LayerParameter::clear_has_bias_learning_rate() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LayerParameter::clear_bias_learning_rate() {
  bias_learning_rate_ = 0;
  clear_has_bias_learning_rate();
}
inline float LayerParameter::bias_learning_rate() const {
  // @@protoc_insertion_point(field_get:surfing.LayerParameter.bias_learning_rate)
  return bias_learning_rate_;
}
inline void LayerParameter::set_bias_learning_rate(float value) {
  set_has_bias_learning_rate();
  bias_learning_rate_ = value;
  // @@protoc_insertion_point(field_set:surfing.LayerParameter.bias_learning_rate)
}

// optional .surfing.BatchNormalizationParameter batch_normalization_param = 99;
inline bool LayerParameter::has_batch_normalization_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LayerParameter::set_has_batch_normalization_param() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LayerParameter::clear_has_batch_normalization_param() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LayerParameter::clear_batch_normalization_param() {
  if (batch_normalization_param_ != NULL) batch_normalization_param_->::surfing::BatchNormalizationParameter::Clear();
  clear_has_batch_normalization_param();
}
inline const ::surfing::BatchNormalizationParameter& LayerParameter::batch_normalization_param() const {
  // @@protoc_insertion_point(field_get:surfing.LayerParameter.batch_normalization_param)
  return batch_normalization_param_ != NULL ? *batch_normalization_param_ : *default_instance_->batch_normalization_param_;
}
inline ::surfing::BatchNormalizationParameter* LayerParameter::mutable_batch_normalization_param() {
  set_has_batch_normalization_param();
  if (batch_normalization_param_ == NULL) batch_normalization_param_ = new ::surfing::BatchNormalizationParameter;
  // @@protoc_insertion_point(field_mutable:surfing.LayerParameter.batch_normalization_param)
  return batch_normalization_param_;
}
inline ::surfing::BatchNormalizationParameter* LayerParameter::release_batch_normalization_param() {
  clear_has_batch_normalization_param();
  ::surfing::BatchNormalizationParameter* temp = batch_normalization_param_;
  batch_normalization_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_batch_normalization_param(::surfing::BatchNormalizationParameter* batch_normalization_param) {
  delete batch_normalization_param_;
  batch_normalization_param_ = batch_normalization_param;
  if (batch_normalization_param) {
    set_has_batch_normalization_param();
  } else {
    clear_has_batch_normalization_param();
  }
  // @@protoc_insertion_point(field_set_allocated:surfing.LayerParameter.batch_normalization_param)
}

// optional .surfing.ConcatenateParameter concat_param = 100;
inline bool LayerParameter::has_concat_param() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LayerParameter::set_has_concat_param() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LayerParameter::clear_has_concat_param() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LayerParameter::clear_concat_param() {
  if (concat_param_ != NULL) concat_param_->::surfing::ConcatenateParameter::Clear();
  clear_has_concat_param();
}
inline const ::surfing::ConcatenateParameter& LayerParameter::concat_param() const {
  // @@protoc_insertion_point(field_get:surfing.LayerParameter.concat_param)
  return concat_param_ != NULL ? *concat_param_ : *default_instance_->concat_param_;
}
inline ::surfing::ConcatenateParameter* LayerParameter::mutable_concat_param() {
  set_has_concat_param();
  if (concat_param_ == NULL) concat_param_ = new ::surfing::ConcatenateParameter;
  // @@protoc_insertion_point(field_mutable:surfing.LayerParameter.concat_param)
  return concat_param_;
}
inline ::surfing::ConcatenateParameter* LayerParameter::release_concat_param() {
  clear_has_concat_param();
  ::surfing::ConcatenateParameter* temp = concat_param_;
  concat_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_concat_param(::surfing::ConcatenateParameter* concat_param) {
  delete concat_param_;
  concat_param_ = concat_param;
  if (concat_param) {
    set_has_concat_param();
  } else {
    clear_has_concat_param();
  }
  // @@protoc_insertion_point(field_set_allocated:surfing.LayerParameter.concat_param)
}

// optional .surfing.ConvolutionParameter conv_param = 101;
inline bool LayerParameter::has_conv_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LayerParameter::set_has_conv_param() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LayerParameter::clear_has_conv_param() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LayerParameter::clear_conv_param() {
  if (conv_param_ != NULL) conv_param_->::surfing::ConvolutionParameter::Clear();
  clear_has_conv_param();
}
inline const ::surfing::ConvolutionParameter& LayerParameter::conv_param() const {
  // @@protoc_insertion_point(field_get:surfing.LayerParameter.conv_param)
  return conv_param_ != NULL ? *conv_param_ : *default_instance_->conv_param_;
}
inline ::surfing::ConvolutionParameter* LayerParameter::mutable_conv_param() {
  set_has_conv_param();
  if (conv_param_ == NULL) conv_param_ = new ::surfing::ConvolutionParameter;
  // @@protoc_insertion_point(field_mutable:surfing.LayerParameter.conv_param)
  return conv_param_;
}
inline ::surfing::ConvolutionParameter* LayerParameter::release_conv_param() {
  clear_has_conv_param();
  ::surfing::ConvolutionParameter* temp = conv_param_;
  conv_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_conv_param(::surfing::ConvolutionParameter* conv_param) {
  delete conv_param_;
  conv_param_ = conv_param;
  if (conv_param) {
    set_has_conv_param();
  } else {
    clear_has_conv_param();
  }
  // @@protoc_insertion_point(field_set_allocated:surfing.LayerParameter.conv_param)
}

// optional .surfing.DataParameter data_param = 102;
inline bool LayerParameter::has_data_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LayerParameter::set_has_data_param() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LayerParameter::clear_has_data_param() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LayerParameter::clear_data_param() {
  if (data_param_ != NULL) data_param_->::surfing::DataParameter::Clear();
  clear_has_data_param();
}
inline const ::surfing::DataParameter& LayerParameter::data_param() const {
  // @@protoc_insertion_point(field_get:surfing.LayerParameter.data_param)
  return data_param_ != NULL ? *data_param_ : *default_instance_->data_param_;
}
inline ::surfing::DataParameter* LayerParameter::mutable_data_param() {
  set_has_data_param();
  if (data_param_ == NULL) data_param_ = new ::surfing::DataParameter;
  // @@protoc_insertion_point(field_mutable:surfing.LayerParameter.data_param)
  return data_param_;
}
inline ::surfing::DataParameter* LayerParameter::release_data_param() {
  clear_has_data_param();
  ::surfing::DataParameter* temp = data_param_;
  data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_data_param(::surfing::DataParameter* data_param) {
  delete data_param_;
  data_param_ = data_param;
  if (data_param) {
    set_has_data_param();
  } else {
    clear_has_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:surfing.LayerParameter.data_param)
}

// optional .surfing.DropoutParameter dropout_param = 103;
inline bool LayerParameter::has_dropout_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LayerParameter::set_has_dropout_param() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LayerParameter::clear_has_dropout_param() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LayerParameter::clear_dropout_param() {
  if (dropout_param_ != NULL) dropout_param_->::surfing::DropoutParameter::Clear();
  clear_has_dropout_param();
}
inline const ::surfing::DropoutParameter& LayerParameter::dropout_param() const {
  // @@protoc_insertion_point(field_get:surfing.LayerParameter.dropout_param)
  return dropout_param_ != NULL ? *dropout_param_ : *default_instance_->dropout_param_;
}
inline ::surfing::DropoutParameter* LayerParameter::mutable_dropout_param() {
  set_has_dropout_param();
  if (dropout_param_ == NULL) dropout_param_ = new ::surfing::DropoutParameter;
  // @@protoc_insertion_point(field_mutable:surfing.LayerParameter.dropout_param)
  return dropout_param_;
}
inline ::surfing::DropoutParameter* LayerParameter::release_dropout_param() {
  clear_has_dropout_param();
  ::surfing::DropoutParameter* temp = dropout_param_;
  dropout_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_dropout_param(::surfing::DropoutParameter* dropout_param) {
  delete dropout_param_;
  dropout_param_ = dropout_param;
  if (dropout_param) {
    set_has_dropout_param();
  } else {
    clear_has_dropout_param();
  }
  // @@protoc_insertion_point(field_set_allocated:surfing.LayerParameter.dropout_param)
}

// optional .surfing.InnerProductParameter inner_product_param = 104;
inline bool LayerParameter::has_inner_product_param() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void LayerParameter::set_has_inner_product_param() {
  _has_bits_[0] |= 0x00040000u;
}
inline void LayerParameter::clear_has_inner_product_param() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void LayerParameter::clear_inner_product_param() {
  if (inner_product_param_ != NULL) inner_product_param_->::surfing::InnerProductParameter::Clear();
  clear_has_inner_product_param();
}
inline const ::surfing::InnerProductParameter& LayerParameter::inner_product_param() const {
  // @@protoc_insertion_point(field_get:surfing.LayerParameter.inner_product_param)
  return inner_product_param_ != NULL ? *inner_product_param_ : *default_instance_->inner_product_param_;
}
inline ::surfing::InnerProductParameter* LayerParameter::mutable_inner_product_param() {
  set_has_inner_product_param();
  if (inner_product_param_ == NULL) inner_product_param_ = new ::surfing::InnerProductParameter;
  // @@protoc_insertion_point(field_mutable:surfing.LayerParameter.inner_product_param)
  return inner_product_param_;
}
inline ::surfing::InnerProductParameter* LayerParameter::release_inner_product_param() {
  clear_has_inner_product_param();
  ::surfing::InnerProductParameter* temp = inner_product_param_;
  inner_product_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_inner_product_param(::surfing::InnerProductParameter* inner_product_param) {
  delete inner_product_param_;
  inner_product_param_ = inner_product_param;
  if (inner_product_param) {
    set_has_inner_product_param();
  } else {
    clear_has_inner_product_param();
  }
  // @@protoc_insertion_point(field_set_allocated:surfing.LayerParameter.inner_product_param)
}

// optional .surfing.LCNParameter lcn_param = 105;
inline bool LayerParameter::has_lcn_param() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void LayerParameter::set_has_lcn_param() {
  _has_bits_[0] |= 0x00080000u;
}
inline void LayerParameter::clear_has_lcn_param() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void LayerParameter::clear_lcn_param() {
  if (lcn_param_ != NULL) lcn_param_->::surfing::LCNParameter::Clear();
  clear_has_lcn_param();
}
inline const ::surfing::LCNParameter& LayerParameter::lcn_param() const {
  // @@protoc_insertion_point(field_get:surfing.LayerParameter.lcn_param)
  return lcn_param_ != NULL ? *lcn_param_ : *default_instance_->lcn_param_;
}
inline ::surfing::LCNParameter* LayerParameter::mutable_lcn_param() {
  set_has_lcn_param();
  if (lcn_param_ == NULL) lcn_param_ = new ::surfing::LCNParameter;
  // @@protoc_insertion_point(field_mutable:surfing.LayerParameter.lcn_param)
  return lcn_param_;
}
inline ::surfing::LCNParameter* LayerParameter::release_lcn_param() {
  clear_has_lcn_param();
  ::surfing::LCNParameter* temp = lcn_param_;
  lcn_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_lcn_param(::surfing::LCNParameter* lcn_param) {
  delete lcn_param_;
  lcn_param_ = lcn_param;
  if (lcn_param) {
    set_has_lcn_param();
  } else {
    clear_has_lcn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:surfing.LayerParameter.lcn_param)
}

// optional .surfing.LRNParameter lrn_param = 106;
inline bool LayerParameter::has_lrn_param() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void LayerParameter::set_has_lrn_param() {
  _has_bits_[0] |= 0x00100000u;
}
inline void LayerParameter::clear_has_lrn_param() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void LayerParameter::clear_lrn_param() {
  if (lrn_param_ != NULL) lrn_param_->::surfing::LRNParameter::Clear();
  clear_has_lrn_param();
}
inline const ::surfing::LRNParameter& LayerParameter::lrn_param() const {
  // @@protoc_insertion_point(field_get:surfing.LayerParameter.lrn_param)
  return lrn_param_ != NULL ? *lrn_param_ : *default_instance_->lrn_param_;
}
inline ::surfing::LRNParameter* LayerParameter::mutable_lrn_param() {
  set_has_lrn_param();
  if (lrn_param_ == NULL) lrn_param_ = new ::surfing::LRNParameter;
  // @@protoc_insertion_point(field_mutable:surfing.LayerParameter.lrn_param)
  return lrn_param_;
}
inline ::surfing::LRNParameter* LayerParameter::release_lrn_param() {
  clear_has_lrn_param();
  ::surfing::LRNParameter* temp = lrn_param_;
  lrn_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_lrn_param(::surfing::LRNParameter* lrn_param) {
  delete lrn_param_;
  lrn_param_ = lrn_param;
  if (lrn_param) {
    set_has_lrn_param();
  } else {
    clear_has_lrn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:surfing.LayerParameter.lrn_param)
}

// optional .surfing.PoolingParameter pooling_param = 107;
inline bool LayerParameter::has_pooling_param() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void LayerParameter::set_has_pooling_param() {
  _has_bits_[0] |= 0x00200000u;
}
inline void LayerParameter::clear_has_pooling_param() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void LayerParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->::surfing::PoolingParameter::Clear();
  clear_has_pooling_param();
}
inline const ::surfing::PoolingParameter& LayerParameter::pooling_param() const {
  // @@protoc_insertion_point(field_get:surfing.LayerParameter.pooling_param)
  return pooling_param_ != NULL ? *pooling_param_ : *default_instance_->pooling_param_;
}
inline ::surfing::PoolingParameter* LayerParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) pooling_param_ = new ::surfing::PoolingParameter;
  // @@protoc_insertion_point(field_mutable:surfing.LayerParameter.pooling_param)
  return pooling_param_;
}
inline ::surfing::PoolingParameter* LayerParameter::release_pooling_param() {
  clear_has_pooling_param();
  ::surfing::PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_pooling_param(::surfing::PoolingParameter* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:surfing.LayerParameter.pooling_param)
}

// optional .surfing.ReluParameter relu_param = 108;
inline bool LayerParameter::has_relu_param() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void LayerParameter::set_has_relu_param() {
  _has_bits_[0] |= 0x00400000u;
}
inline void LayerParameter::clear_has_relu_param() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void LayerParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->::surfing::ReluParameter::Clear();
  clear_has_relu_param();
}
inline const ::surfing::ReluParameter& LayerParameter::relu_param() const {
  // @@protoc_insertion_point(field_get:surfing.LayerParameter.relu_param)
  return relu_param_ != NULL ? *relu_param_ : *default_instance_->relu_param_;
}
inline ::surfing::ReluParameter* LayerParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) relu_param_ = new ::surfing::ReluParameter;
  // @@protoc_insertion_point(field_mutable:surfing.LayerParameter.relu_param)
  return relu_param_;
}
inline ::surfing::ReluParameter* LayerParameter::release_relu_param() {
  clear_has_relu_param();
  ::surfing::ReluParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_relu_param(::surfing::ReluParameter* relu_param) {
  delete relu_param_;
  relu_param_ = relu_param;
  if (relu_param) {
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:surfing.LayerParameter.relu_param)
}

// optional .surfing.ResultParameter result_param = 109;
inline bool LayerParameter::has_result_param() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void LayerParameter::set_has_result_param() {
  _has_bits_[0] |= 0x00800000u;
}
inline void LayerParameter::clear_has_result_param() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void LayerParameter::clear_result_param() {
  if (result_param_ != NULL) result_param_->::surfing::ResultParameter::Clear();
  clear_has_result_param();
}
inline const ::surfing::ResultParameter& LayerParameter::result_param() const {
  // @@protoc_insertion_point(field_get:surfing.LayerParameter.result_param)
  return result_param_ != NULL ? *result_param_ : *default_instance_->result_param_;
}
inline ::surfing::ResultParameter* LayerParameter::mutable_result_param() {
  set_has_result_param();
  if (result_param_ == NULL) result_param_ = new ::surfing::ResultParameter;
  // @@protoc_insertion_point(field_mutable:surfing.LayerParameter.result_param)
  return result_param_;
}
inline ::surfing::ResultParameter* LayerParameter::release_result_param() {
  clear_has_result_param();
  ::surfing::ResultParameter* temp = result_param_;
  result_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_result_param(::surfing::ResultParameter* result_param) {
  delete result_param_;
  result_param_ = result_param;
  if (result_param) {
    set_has_result_param();
  } else {
    clear_has_result_param();
  }
  // @@protoc_insertion_point(field_set_allocated:surfing.LayerParameter.result_param)
}

// optional .surfing.SigmoidParameter sigmoid_param = 110;
inline bool LayerParameter::has_sigmoid_param() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void LayerParameter::set_has_sigmoid_param() {
  _has_bits_[0] |= 0x01000000u;
}
inline void LayerParameter::clear_has_sigmoid_param() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void LayerParameter::clear_sigmoid_param() {
  if (sigmoid_param_ != NULL) sigmoid_param_->::surfing::SigmoidParameter::Clear();
  clear_has_sigmoid_param();
}
inline const ::surfing::SigmoidParameter& LayerParameter::sigmoid_param() const {
  // @@protoc_insertion_point(field_get:surfing.LayerParameter.sigmoid_param)
  return sigmoid_param_ != NULL ? *sigmoid_param_ : *default_instance_->sigmoid_param_;
}
inline ::surfing::SigmoidParameter* LayerParameter::mutable_sigmoid_param() {
  set_has_sigmoid_param();
  if (sigmoid_param_ == NULL) sigmoid_param_ = new ::surfing::SigmoidParameter;
  // @@protoc_insertion_point(field_mutable:surfing.LayerParameter.sigmoid_param)
  return sigmoid_param_;
}
inline ::surfing::SigmoidParameter* LayerParameter::release_sigmoid_param() {
  clear_has_sigmoid_param();
  ::surfing::SigmoidParameter* temp = sigmoid_param_;
  sigmoid_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_sigmoid_param(::surfing::SigmoidParameter* sigmoid_param) {
  delete sigmoid_param_;
  sigmoid_param_ = sigmoid_param;
  if (sigmoid_param) {
    set_has_sigmoid_param();
  } else {
    clear_has_sigmoid_param();
  }
  // @@protoc_insertion_point(field_set_allocated:surfing.LayerParameter.sigmoid_param)
}

// optional .surfing.SoftmaxParameter softmax_param = 111;
inline bool LayerParameter::has_softmax_param() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void LayerParameter::set_has_softmax_param() {
  _has_bits_[0] |= 0x02000000u;
}
inline void LayerParameter::clear_has_softmax_param() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void LayerParameter::clear_softmax_param() {
  if (softmax_param_ != NULL) softmax_param_->::surfing::SoftmaxParameter::Clear();
  clear_has_softmax_param();
}
inline const ::surfing::SoftmaxParameter& LayerParameter::softmax_param() const {
  // @@protoc_insertion_point(field_get:surfing.LayerParameter.softmax_param)
  return softmax_param_ != NULL ? *softmax_param_ : *default_instance_->softmax_param_;
}
inline ::surfing::SoftmaxParameter* LayerParameter::mutable_softmax_param() {
  set_has_softmax_param();
  if (softmax_param_ == NULL) softmax_param_ = new ::surfing::SoftmaxParameter;
  // @@protoc_insertion_point(field_mutable:surfing.LayerParameter.softmax_param)
  return softmax_param_;
}
inline ::surfing::SoftmaxParameter* LayerParameter::release_softmax_param() {
  clear_has_softmax_param();
  ::surfing::SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_softmax_param(::surfing::SoftmaxParameter* softmax_param) {
  delete softmax_param_;
  softmax_param_ = softmax_param;
  if (softmax_param) {
    set_has_softmax_param();
  } else {
    clear_has_softmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:surfing.LayerParameter.softmax_param)
}

// optional .surfing.TanhParameter tanh_param = 112;
inline bool LayerParameter::has_tanh_param() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void LayerParameter::set_has_tanh_param() {
  _has_bits_[0] |= 0x04000000u;
}
inline void LayerParameter::clear_has_tanh_param() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void LayerParameter::clear_tanh_param() {
  if (tanh_param_ != NULL) tanh_param_->::surfing::TanhParameter::Clear();
  clear_has_tanh_param();
}
inline const ::surfing::TanhParameter& LayerParameter::tanh_param() const {
  // @@protoc_insertion_point(field_get:surfing.LayerParameter.tanh_param)
  return tanh_param_ != NULL ? *tanh_param_ : *default_instance_->tanh_param_;
}
inline ::surfing::TanhParameter* LayerParameter::mutable_tanh_param() {
  set_has_tanh_param();
  if (tanh_param_ == NULL) tanh_param_ = new ::surfing::TanhParameter;
  // @@protoc_insertion_point(field_mutable:surfing.LayerParameter.tanh_param)
  return tanh_param_;
}
inline ::surfing::TanhParameter* LayerParameter::release_tanh_param() {
  clear_has_tanh_param();
  ::surfing::TanhParameter* temp = tanh_param_;
  tanh_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tanh_param(::surfing::TanhParameter* tanh_param) {
  delete tanh_param_;
  tanh_param_ = tanh_param;
  if (tanh_param) {
    set_has_tanh_param();
  } else {
    clear_has_tanh_param();
  }
  // @@protoc_insertion_point(field_set_allocated:surfing.LayerParameter.tanh_param)
}

// -------------------------------------------------------------------

// BatchNormalizationParameter

// optional .surfing.BatchNormalizationParameter.Type type = 1 [default = CONV];
inline bool BatchNormalizationParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatchNormalizationParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatchNormalizationParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatchNormalizationParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::surfing::BatchNormalizationParameter_Type BatchNormalizationParameter::type() const {
  // @@protoc_insertion_point(field_get:surfing.BatchNormalizationParameter.type)
  return static_cast< ::surfing::BatchNormalizationParameter_Type >(type_);
}
inline void BatchNormalizationParameter::set_type(::surfing::BatchNormalizationParameter_Type value) {
  assert(::surfing::BatchNormalizationParameter_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:surfing.BatchNormalizationParameter.type)
}

// -------------------------------------------------------------------

// ConcatenateParameter

// -------------------------------------------------------------------

// ConvolutionParameter

// optional uint32 num_output = 1;
inline bool ConvolutionParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConvolutionParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConvolutionParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConvolutionParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 ConvolutionParameter::num_output() const {
  // @@protoc_insertion_point(field_get:surfing.ConvolutionParameter.num_output)
  return num_output_;
}
inline void ConvolutionParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:surfing.ConvolutionParameter.num_output)
}

// optional uint32 kernel_size = 2;
inline bool ConvolutionParameter::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConvolutionParameter::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConvolutionParameter::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConvolutionParameter::clear_kernel_size() {
  kernel_size_ = 0u;
  clear_has_kernel_size();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:surfing.ConvolutionParameter.kernel_size)
  return kernel_size_;
}
inline void ConvolutionParameter::set_kernel_size(::google::protobuf::uint32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:surfing.ConvolutionParameter.kernel_size)
}

// optional uint32 pad_h = 3 [default = 0];
inline bool ConvolutionParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConvolutionParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConvolutionParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConvolutionParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:surfing.ConvolutionParameter.pad_h)
  return pad_h_;
}
inline void ConvolutionParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:surfing.ConvolutionParameter.pad_h)
}

// optional uint32 pad_w = 4 [default = 0];
inline bool ConvolutionParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConvolutionParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConvolutionParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConvolutionParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:surfing.ConvolutionParameter.pad_w)
  return pad_w_;
}
inline void ConvolutionParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:surfing.ConvolutionParameter.pad_w)
}

// optional uint32 stride_h = 5 [default = 1];
inline bool ConvolutionParameter::has_stride_h() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConvolutionParameter::set_has_stride_h() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConvolutionParameter::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConvolutionParameter::clear_stride_h() {
  stride_h_ = 1u;
  clear_has_stride_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:surfing.ConvolutionParameter.stride_h)
  return stride_h_;
}
inline void ConvolutionParameter::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:surfing.ConvolutionParameter.stride_h)
}

// optional uint32 stride_w = 6 [default = 1];
inline bool ConvolutionParameter::has_stride_w() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConvolutionParameter::set_has_stride_w() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConvolutionParameter::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConvolutionParameter::clear_stride_w() {
  stride_w_ = 1u;
  clear_has_stride_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:surfing.ConvolutionParameter.stride_w)
  return stride_w_;
}
inline void ConvolutionParameter::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:surfing.ConvolutionParameter.stride_w)
}

// optional .surfing.FilterParameter filter_parameter = 7;
inline bool ConvolutionParameter::has_filter_parameter() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConvolutionParameter::set_has_filter_parameter() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConvolutionParameter::clear_has_filter_parameter() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConvolutionParameter::clear_filter_parameter() {
  if (filter_parameter_ != NULL) filter_parameter_->::surfing::FilterParameter::Clear();
  clear_has_filter_parameter();
}
inline const ::surfing::FilterParameter& ConvolutionParameter::filter_parameter() const {
  // @@protoc_insertion_point(field_get:surfing.ConvolutionParameter.filter_parameter)
  return filter_parameter_ != NULL ? *filter_parameter_ : *default_instance_->filter_parameter_;
}
inline ::surfing::FilterParameter* ConvolutionParameter::mutable_filter_parameter() {
  set_has_filter_parameter();
  if (filter_parameter_ == NULL) filter_parameter_ = new ::surfing::FilterParameter;
  // @@protoc_insertion_point(field_mutable:surfing.ConvolutionParameter.filter_parameter)
  return filter_parameter_;
}
inline ::surfing::FilterParameter* ConvolutionParameter::release_filter_parameter() {
  clear_has_filter_parameter();
  ::surfing::FilterParameter* temp = filter_parameter_;
  filter_parameter_ = NULL;
  return temp;
}
inline void ConvolutionParameter::set_allocated_filter_parameter(::surfing::FilterParameter* filter_parameter) {
  delete filter_parameter_;
  filter_parameter_ = filter_parameter;
  if (filter_parameter) {
    set_has_filter_parameter();
  } else {
    clear_has_filter_parameter();
  }
  // @@protoc_insertion_point(field_set_allocated:surfing.ConvolutionParameter.filter_parameter)
}

// -------------------------------------------------------------------

// DataParameter

// optional string source = 1;
inline bool DataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataParameter::clear_source() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& DataParameter::source() const {
  // @@protoc_insertion_point(field_get:surfing.DataParameter.source)
  return *source_;
}
inline void DataParameter::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set:surfing.DataParameter.source)
}
inline void DataParameter::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set_char:surfing.DataParameter.source)
}
inline void DataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:surfing.DataParameter.source)
}
inline ::std::string* DataParameter::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:surfing.DataParameter.source)
  return source_;
}
inline ::std::string* DataParameter::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DataParameter::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:surfing.DataParameter.source)
}

// optional uint32 batch_size = 2;
inline bool DataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:surfing.DataParameter.batch_size)
  return batch_size_;
}
inline void DataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:surfing.DataParameter.batch_size)
}

// optional uint32 num = 3;
inline bool DataParameter::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataParameter::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataParameter::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataParameter::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 DataParameter::num() const {
  // @@protoc_insertion_point(field_get:surfing.DataParameter.num)
  return num_;
}
inline void DataParameter::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:surfing.DataParameter.num)
}

// optional string mean_file = 4;
inline bool DataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataParameter::clear_mean_file() {
  if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_->clear();
  }
  clear_has_mean_file();
}
inline const ::std::string& DataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:surfing.DataParameter.mean_file)
  return *mean_file_;
}
inline void DataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
  // @@protoc_insertion_point(field_set:surfing.DataParameter.mean_file)
}
inline void DataParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:surfing.DataParameter.mean_file)
}
inline void DataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:surfing.DataParameter.mean_file)
}
inline ::std::string* DataParameter::mutable_mean_file() {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:surfing.DataParameter.mean_file)
  return mean_file_;
}
inline ::std::string* DataParameter::release_mean_file() {
  clear_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mean_file_;
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mean_file_;
  }
  if (mean_file) {
    set_has_mean_file();
    mean_file_ = mean_file;
  } else {
    clear_has_mean_file();
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:surfing.DataParameter.mean_file)
}

// repeated uint32 cropped_size = 5;
inline int DataParameter::cropped_size_size() const {
  return cropped_size_.size();
}
inline void DataParameter::clear_cropped_size() {
  cropped_size_.Clear();
}
inline ::google::protobuf::uint32 DataParameter::cropped_size(int index) const {
  // @@protoc_insertion_point(field_get:surfing.DataParameter.cropped_size)
  return cropped_size_.Get(index);
}
inline void DataParameter::set_cropped_size(int index, ::google::protobuf::uint32 value) {
  cropped_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:surfing.DataParameter.cropped_size)
}
inline void DataParameter::add_cropped_size(::google::protobuf::uint32 value) {
  cropped_size_.Add(value);
  // @@protoc_insertion_point(field_add:surfing.DataParameter.cropped_size)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DataParameter::cropped_size() const {
  // @@protoc_insertion_point(field_list:surfing.DataParameter.cropped_size)
  return cropped_size_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DataParameter::mutable_cropped_size() {
  // @@protoc_insertion_point(field_mutable_list:surfing.DataParameter.cropped_size)
  return &cropped_size_;
}

// -------------------------------------------------------------------

// DropoutParameter

// optional float dropout_ratio = 1 [default = 0.5];
inline bool DropoutParameter::has_dropout_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DropoutParameter::set_has_dropout_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DropoutParameter::clear_has_dropout_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DropoutParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  clear_has_dropout_ratio();
}
inline float DropoutParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:surfing.DropoutParameter.dropout_ratio)
  return dropout_ratio_;
}
inline void DropoutParameter::set_dropout_ratio(float value) {
  set_has_dropout_ratio();
  dropout_ratio_ = value;
  // @@protoc_insertion_point(field_set:surfing.DropoutParameter.dropout_ratio)
}

// -------------------------------------------------------------------

// InnerProductParameter

// optional uint32 num_output = 1;
inline bool InnerProductParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InnerProductParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InnerProductParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InnerProductParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 InnerProductParameter::num_output() const {
  // @@protoc_insertion_point(field_get:surfing.InnerProductParameter.num_output)
  return num_output_;
}
inline void InnerProductParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:surfing.InnerProductParameter.num_output)
}

// optional .surfing.FilterParameter filter_parameter = 2;
inline bool InnerProductParameter::has_filter_parameter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InnerProductParameter::set_has_filter_parameter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InnerProductParameter::clear_has_filter_parameter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InnerProductParameter::clear_filter_parameter() {
  if (filter_parameter_ != NULL) filter_parameter_->::surfing::FilterParameter::Clear();
  clear_has_filter_parameter();
}
inline const ::surfing::FilterParameter& InnerProductParameter::filter_parameter() const {
  // @@protoc_insertion_point(field_get:surfing.InnerProductParameter.filter_parameter)
  return filter_parameter_ != NULL ? *filter_parameter_ : *default_instance_->filter_parameter_;
}
inline ::surfing::FilterParameter* InnerProductParameter::mutable_filter_parameter() {
  set_has_filter_parameter();
  if (filter_parameter_ == NULL) filter_parameter_ = new ::surfing::FilterParameter;
  // @@protoc_insertion_point(field_mutable:surfing.InnerProductParameter.filter_parameter)
  return filter_parameter_;
}
inline ::surfing::FilterParameter* InnerProductParameter::release_filter_parameter() {
  clear_has_filter_parameter();
  ::surfing::FilterParameter* temp = filter_parameter_;
  filter_parameter_ = NULL;
  return temp;
}
inline void InnerProductParameter::set_allocated_filter_parameter(::surfing::FilterParameter* filter_parameter) {
  delete filter_parameter_;
  filter_parameter_ = filter_parameter;
  if (filter_parameter) {
    set_has_filter_parameter();
  } else {
    clear_has_filter_parameter();
  }
  // @@protoc_insertion_point(field_set_allocated:surfing.InnerProductParameter.filter_parameter)
}

// -------------------------------------------------------------------

// LCNParameter

// -------------------------------------------------------------------

// LRNParameter

// optional uint32 local_size = 1 [default = 5];
inline bool LRNParameter::has_local_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LRNParameter::set_has_local_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LRNParameter::clear_has_local_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LRNParameter::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
inline ::google::protobuf::uint32 LRNParameter::local_size() const {
  // @@protoc_insertion_point(field_get:surfing.LRNParameter.local_size)
  return local_size_;
}
inline void LRNParameter::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
  // @@protoc_insertion_point(field_set:surfing.LRNParameter.local_size)
}

// optional float alpha = 2 [default = 0.0001];
inline bool LRNParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LRNParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LRNParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LRNParameter::clear_alpha() {
  alpha_ = 0.0001f;
  clear_has_alpha();
}
inline float LRNParameter::alpha() const {
  // @@protoc_insertion_point(field_get:surfing.LRNParameter.alpha)
  return alpha_;
}
inline void LRNParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:surfing.LRNParameter.alpha)
}

// optional float beta = 3 [default = 0.75];
inline bool LRNParameter::has_beta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LRNParameter::set_has_beta() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LRNParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LRNParameter::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
inline float LRNParameter::beta() const {
  // @@protoc_insertion_point(field_get:surfing.LRNParameter.beta)
  return beta_;
}
inline void LRNParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:surfing.LRNParameter.beta)
}

// optional float k = 4 [default = 1];
inline bool LRNParameter::has_k() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LRNParameter::set_has_k() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LRNParameter::clear_has_k() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LRNParameter::clear_k() {
  k_ = 1;
  clear_has_k();
}
inline float LRNParameter::k() const {
  // @@protoc_insertion_point(field_get:surfing.LRNParameter.k)
  return k_;
}
inline void LRNParameter::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:surfing.LRNParameter.k)
}

// -------------------------------------------------------------------

// PoolingParameter

// optional .surfing.PoolingParameter.PoolingMethod pooling_method = 1 [default = MAX];
inline bool PoolingParameter::has_pooling_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PoolingParameter::set_has_pooling_method() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PoolingParameter::clear_has_pooling_method() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PoolingParameter::clear_pooling_method() {
  pooling_method_ = 0;
  clear_has_pooling_method();
}
inline ::surfing::PoolingParameter_PoolingMethod PoolingParameter::pooling_method() const {
  // @@protoc_insertion_point(field_get:surfing.PoolingParameter.pooling_method)
  return static_cast< ::surfing::PoolingParameter_PoolingMethod >(pooling_method_);
}
inline void PoolingParameter::set_pooling_method(::surfing::PoolingParameter_PoolingMethod value) {
  assert(::surfing::PoolingParameter_PoolingMethod_IsValid(value));
  set_has_pooling_method();
  pooling_method_ = value;
  // @@protoc_insertion_point(field_set:surfing.PoolingParameter.pooling_method)
}

// optional uint32 pad_h = 2 [default = 0];
inline bool PoolingParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PoolingParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PoolingParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PoolingParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
inline ::google::protobuf::uint32 PoolingParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:surfing.PoolingParameter.pad_h)
  return pad_h_;
}
inline void PoolingParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:surfing.PoolingParameter.pad_h)
}

// optional uint32 pad_w = 3 [default = 0];
inline bool PoolingParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PoolingParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PoolingParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PoolingParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
inline ::google::protobuf::uint32 PoolingParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:surfing.PoolingParameter.pad_w)
  return pad_w_;
}
inline void PoolingParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:surfing.PoolingParameter.pad_w)
}

// optional uint32 stride_h = 4 [default = 2];
inline bool PoolingParameter::has_stride_h() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PoolingParameter::set_has_stride_h() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PoolingParameter::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PoolingParameter::clear_stride_h() {
  stride_h_ = 2u;
  clear_has_stride_h();
}
inline ::google::protobuf::uint32 PoolingParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:surfing.PoolingParameter.stride_h)
  return stride_h_;
}
inline void PoolingParameter::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:surfing.PoolingParameter.stride_h)
}

// optional uint32 stride_w = 5 [default = 2];
inline bool PoolingParameter::has_stride_w() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PoolingParameter::set_has_stride_w() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PoolingParameter::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PoolingParameter::clear_stride_w() {
  stride_w_ = 2u;
  clear_has_stride_w();
}
inline ::google::protobuf::uint32 PoolingParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:surfing.PoolingParameter.stride_w)
  return stride_w_;
}
inline void PoolingParameter::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:surfing.PoolingParameter.stride_w)
}

// optional uint32 window_h = 6 [default = 2];
inline bool PoolingParameter::has_window_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PoolingParameter::set_has_window_h() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PoolingParameter::clear_has_window_h() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PoolingParameter::clear_window_h() {
  window_h_ = 2u;
  clear_has_window_h();
}
inline ::google::protobuf::uint32 PoolingParameter::window_h() const {
  // @@protoc_insertion_point(field_get:surfing.PoolingParameter.window_h)
  return window_h_;
}
inline void PoolingParameter::set_window_h(::google::protobuf::uint32 value) {
  set_has_window_h();
  window_h_ = value;
  // @@protoc_insertion_point(field_set:surfing.PoolingParameter.window_h)
}

// optional uint32 window_w = 7 [default = 2];
inline bool PoolingParameter::has_window_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PoolingParameter::set_has_window_w() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PoolingParameter::clear_has_window_w() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PoolingParameter::clear_window_w() {
  window_w_ = 2u;
  clear_has_window_w();
}
inline ::google::protobuf::uint32 PoolingParameter::window_w() const {
  // @@protoc_insertion_point(field_get:surfing.PoolingParameter.window_w)
  return window_w_;
}
inline void PoolingParameter::set_window_w(::google::protobuf::uint32 value) {
  set_has_window_w();
  window_w_ = value;
  // @@protoc_insertion_point(field_set:surfing.PoolingParameter.window_w)
}

// -------------------------------------------------------------------

// ReluParameter

// -------------------------------------------------------------------

// ResultParameter

// optional .surfing.ResultParameter.LossType losstype = 1 [default = L1];
inline bool ResultParameter::has_losstype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResultParameter::set_has_losstype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResultParameter::clear_has_losstype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResultParameter::clear_losstype() {
  losstype_ = 0;
  clear_has_losstype();
}
inline ::surfing::ResultParameter_LossType ResultParameter::losstype() const {
  // @@protoc_insertion_point(field_get:surfing.ResultParameter.losstype)
  return static_cast< ::surfing::ResultParameter_LossType >(losstype_);
}
inline void ResultParameter::set_losstype(::surfing::ResultParameter_LossType value) {
  assert(::surfing::ResultParameter_LossType_IsValid(value));
  set_has_losstype();
  losstype_ = value;
  // @@protoc_insertion_point(field_set:surfing.ResultParameter.losstype)
}

// -------------------------------------------------------------------

// SigmoidParameter

// -------------------------------------------------------------------

// SoftmaxParameter

// -------------------------------------------------------------------

// TanhParameter


// @@protoc_insertion_point(namespace_scope)

}  // namespace surfing

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::surfing::FilterParameter_FilterType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::surfing::FilterParameter_FilterType>() {
  return ::surfing::FilterParameter_FilterType_descriptor();
}
template <> struct is_proto_enum< ::surfing::SolverParameter_IS_PRE_TRAIN> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::surfing::SolverParameter_IS_PRE_TRAIN>() {
  return ::surfing::SolverParameter_IS_PRE_TRAIN_descriptor();
}
template <> struct is_proto_enum< ::surfing::LayerParameter_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::surfing::LayerParameter_Type>() {
  return ::surfing::LayerParameter_Type_descriptor();
}
template <> struct is_proto_enum< ::surfing::LayerParameter_Phase> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::surfing::LayerParameter_Phase>() {
  return ::surfing::LayerParameter_Phase_descriptor();
}
template <> struct is_proto_enum< ::surfing::BatchNormalizationParameter_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::surfing::BatchNormalizationParameter_Type>() {
  return ::surfing::BatchNormalizationParameter_Type_descriptor();
}
template <> struct is_proto_enum< ::surfing::PoolingParameter_PoolingMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::surfing::PoolingParameter_PoolingMethod>() {
  return ::surfing::PoolingParameter_PoolingMethod_descriptor();
}
template <> struct is_proto_enum< ::surfing::ResultParameter_LossType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::surfing::ResultParameter_LossType>() {
  return ::surfing::ResultParameter_LossType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_surfing_2eproto__INCLUDED
