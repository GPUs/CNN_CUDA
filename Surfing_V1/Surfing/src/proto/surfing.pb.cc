// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: surfing.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "surfing.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace surfing {

namespace {

const ::google::protobuf::Descriptor* BlobProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Datum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Datum_reflection_ = NULL;
const ::google::protobuf::Descriptor* FilterParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FilterParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FilterParameter_FilterType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SolverParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SolverParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SolverParameter_IS_PRE_TRAIN_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* LayerParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LayerParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LayerParameter_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LayerParameter_Phase_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BatchNormalizationParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchNormalizationParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BatchNormalizationParameter_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ConcatenateParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConcatenateParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConvolutionParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConvolutionParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* DropoutParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DropoutParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* InnerProductParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InnerProductParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCNParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCNParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* LRNParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LRNParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* PoolingParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PoolingParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PoolingParameter_PoolingMethod_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReluParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReluParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResultParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ResultParameter_LossType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SigmoidParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SigmoidParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoftmaxParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoftmaxParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* TanhParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TanhParameter_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_surfing_2eproto() {
  protobuf_AddDesc_surfing_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "surfing.proto");
  GOOGLE_CHECK(file != NULL);
  BlobProto_descriptor_ = file->message_type(0);
  static const int BlobProto_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, diff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, double_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, double_diff_),
  };
  BlobProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobProto_descriptor_,
      BlobProto::default_instance_,
      BlobProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobProto));
  Datum_descriptor_ = file->message_type(1);
  static const int Datum_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, float_data_),
  };
  Datum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Datum_descriptor_,
      Datum::default_instance_,
      Datum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Datum));
  FilterParameter_descriptor_ = file->message_type(2);
  static const int FilterParameter_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterParameter, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterParameter, mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterParameter, std_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterParameter, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterParameter, bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterParameter, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterParameter, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterParameter, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterParameter, width_),
  };
  FilterParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FilterParameter_descriptor_,
      FilterParameter::default_instance_,
      FilterParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FilterParameter));
  FilterParameter_FilterType_descriptor_ = FilterParameter_descriptor_->enum_type(0);
  SolverParameter_descriptor_ = file->message_type(3);
  static const int SolverParameter_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, is_pre_train_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, net_binary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, max_iter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, global_learning_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, momentum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, weight_decay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, display_epoch_),
  };
  SolverParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SolverParameter_descriptor_,
      SolverParameter::default_instance_,
      SolverParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SolverParameter));
  SolverParameter_IS_PRE_TRAIN_descriptor_ = SolverParameter_descriptor_->enum_type(0);
  NetParameter_descriptor_ = file->message_type(4);
  static const int NetParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, layer_),
  };
  NetParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetParameter_descriptor_,
      NetParameter::default_instance_,
      NetParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetParameter));
  LayerParameter_descriptor_ = file->message_type(5);
  static const int LayerParameter_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, phase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, filter_learning_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, bias_learning_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, batch_normalization_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, concat_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, conv_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, dropout_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, inner_product_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, lcn_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, lrn_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, pooling_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, relu_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, result_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, sigmoid_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, softmax_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, tanh_param_),
  };
  LayerParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LayerParameter_descriptor_,
      LayerParameter::default_instance_,
      LayerParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LayerParameter));
  LayerParameter_Type_descriptor_ = LayerParameter_descriptor_->enum_type(0);
  LayerParameter_Phase_descriptor_ = LayerParameter_descriptor_->enum_type(1);
  BatchNormalizationParameter_descriptor_ = file->message_type(6);
  static const int BatchNormalizationParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormalizationParameter, type_),
  };
  BatchNormalizationParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchNormalizationParameter_descriptor_,
      BatchNormalizationParameter::default_instance_,
      BatchNormalizationParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormalizationParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormalizationParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchNormalizationParameter));
  BatchNormalizationParameter_Type_descriptor_ = BatchNormalizationParameter_descriptor_->enum_type(0);
  ConcatenateParameter_descriptor_ = file->message_type(7);
  static const int ConcatenateParameter_offsets_[1] = {
  };
  ConcatenateParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConcatenateParameter_descriptor_,
      ConcatenateParameter::default_instance_,
      ConcatenateParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatenateParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatenateParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConcatenateParameter));
  ConvolutionParameter_descriptor_ = file->message_type(8);
  static const int ConvolutionParameter_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, kernel_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, pad_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, pad_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, stride_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, stride_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, filter_parameter_),
  };
  ConvolutionParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConvolutionParameter_descriptor_,
      ConvolutionParameter::default_instance_,
      ConvolutionParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConvolutionParameter));
  DataParameter_descriptor_ = file->message_type(9);
  static const int DataParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, mean_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, cropped_size_),
  };
  DataParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataParameter_descriptor_,
      DataParameter::default_instance_,
      DataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataParameter));
  DropoutParameter_descriptor_ = file->message_type(10);
  static const int DropoutParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParameter, dropout_ratio_),
  };
  DropoutParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DropoutParameter_descriptor_,
      DropoutParameter::default_instance_,
      DropoutParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DropoutParameter));
  InnerProductParameter_descriptor_ = file->message_type(11);
  static const int InnerProductParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, filter_parameter_),
  };
  InnerProductParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InnerProductParameter_descriptor_,
      InnerProductParameter::default_instance_,
      InnerProductParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InnerProductParameter));
  LCNParameter_descriptor_ = file->message_type(12);
  static const int LCNParameter_offsets_[1] = {
  };
  LCNParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCNParameter_descriptor_,
      LCNParameter::default_instance_,
      LCNParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCNParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCNParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCNParameter));
  LRNParameter_descriptor_ = file->message_type(13);
  static const int LRNParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, local_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, alpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, beta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, k_),
  };
  LRNParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LRNParameter_descriptor_,
      LRNParameter::default_instance_,
      LRNParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LRNParameter));
  PoolingParameter_descriptor_ = file->message_type(14);
  static const int PoolingParameter_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, pooling_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, pad_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, pad_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, stride_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, stride_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, window_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, window_w_),
  };
  PoolingParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PoolingParameter_descriptor_,
      PoolingParameter::default_instance_,
      PoolingParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PoolingParameter));
  PoolingParameter_PoolingMethod_descriptor_ = PoolingParameter_descriptor_->enum_type(0);
  ReluParameter_descriptor_ = file->message_type(15);
  static const int ReluParameter_offsets_[1] = {
  };
  ReluParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReluParameter_descriptor_,
      ReluParameter::default_instance_,
      ReluParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReluParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReluParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReluParameter));
  ResultParameter_descriptor_ = file->message_type(16);
  static const int ResultParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultParameter, losstype_),
  };
  ResultParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResultParameter_descriptor_,
      ResultParameter::default_instance_,
      ResultParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResultParameter));
  ResultParameter_LossType_descriptor_ = ResultParameter_descriptor_->enum_type(0);
  SigmoidParameter_descriptor_ = file->message_type(17);
  static const int SigmoidParameter_offsets_[1] = {
  };
  SigmoidParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SigmoidParameter_descriptor_,
      SigmoidParameter::default_instance_,
      SigmoidParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SigmoidParameter));
  SoftmaxParameter_descriptor_ = file->message_type(18);
  static const int SoftmaxParameter_offsets_[1] = {
  };
  SoftmaxParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoftmaxParameter_descriptor_,
      SoftmaxParameter::default_instance_,
      SoftmaxParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoftmaxParameter));
  TanhParameter_descriptor_ = file->message_type(19);
  static const int TanhParameter_offsets_[1] = {
  };
  TanhParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TanhParameter_descriptor_,
      TanhParameter::default_instance_,
      TanhParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TanhParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TanhParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TanhParameter));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_surfing_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobProto_descriptor_, &BlobProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Datum_descriptor_, &Datum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FilterParameter_descriptor_, &FilterParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SolverParameter_descriptor_, &SolverParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetParameter_descriptor_, &NetParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LayerParameter_descriptor_, &LayerParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchNormalizationParameter_descriptor_, &BatchNormalizationParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConcatenateParameter_descriptor_, &ConcatenateParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConvolutionParameter_descriptor_, &ConvolutionParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataParameter_descriptor_, &DataParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DropoutParameter_descriptor_, &DropoutParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InnerProductParameter_descriptor_, &InnerProductParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCNParameter_descriptor_, &LCNParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LRNParameter_descriptor_, &LRNParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PoolingParameter_descriptor_, &PoolingParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReluParameter_descriptor_, &ReluParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResultParameter_descriptor_, &ResultParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SigmoidParameter_descriptor_, &SigmoidParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoftmaxParameter_descriptor_, &SoftmaxParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TanhParameter_descriptor_, &TanhParameter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_surfing_2eproto() {
  delete BlobProto::default_instance_;
  delete BlobProto_reflection_;
  delete Datum::default_instance_;
  delete Datum_reflection_;
  delete FilterParameter::default_instance_;
  delete FilterParameter_reflection_;
  delete SolverParameter::default_instance_;
  delete SolverParameter_reflection_;
  delete NetParameter::default_instance_;
  delete NetParameter_reflection_;
  delete LayerParameter::default_instance_;
  delete LayerParameter_reflection_;
  delete BatchNormalizationParameter::default_instance_;
  delete BatchNormalizationParameter_reflection_;
  delete ConcatenateParameter::default_instance_;
  delete ConcatenateParameter_reflection_;
  delete ConvolutionParameter::default_instance_;
  delete ConvolutionParameter_reflection_;
  delete DataParameter::default_instance_;
  delete DataParameter_reflection_;
  delete DropoutParameter::default_instance_;
  delete DropoutParameter_reflection_;
  delete InnerProductParameter::default_instance_;
  delete InnerProductParameter_reflection_;
  delete LCNParameter::default_instance_;
  delete LCNParameter_reflection_;
  delete LRNParameter::default_instance_;
  delete LRNParameter_reflection_;
  delete PoolingParameter::default_instance_;
  delete PoolingParameter_reflection_;
  delete ReluParameter::default_instance_;
  delete ReluParameter_reflection_;
  delete ResultParameter::default_instance_;
  delete ResultParameter_reflection_;
  delete SigmoidParameter::default_instance_;
  delete SigmoidParameter_reflection_;
  delete SoftmaxParameter::default_instance_;
  delete SoftmaxParameter_reflection_;
  delete TanhParameter::default_instance_;
  delete TanhParameter_reflection_;
}

void protobuf_AddDesc_surfing_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rsurfing.proto\022\007surfing\"\253\001\n\tBlobProto\022\016"
    "\n\003num\030\001 \001(\005:\0010\022\023\n\010channels\030\002 \001(\005:\0010\022\021\n\006h"
    "eight\030\003 \001(\005:\0010\022\020\n\005width\030\004 \001(\005:\0010\022\020\n\004data"
    "\030\005 \003(\002B\002\020\001\022\020\n\004diff\030\006 \003(\002B\002\020\001\022\027\n\013double_d"
    "ata\030\007 \003(\001B\002\020\001\022\027\n\013double_diff\030\010 \003(\001B\002\020\001\"i"
    "\n\005Datum\022\020\n\010channels\030\001 \001(\005\022\016\n\006height\030\002 \001("
    "\005\022\r\n\005width\030\003 \001(\005\022\014\n\004data\030\004 \001(\014\022\r\n\005label\030"
    "\005 \001(\005\022\022\n\nfloat_data\030\006 \003(\002\"\213\002\n\017FilterPara"
    "meter\022=\n\006filter\030\001 \001(\0162#.surfing.FilterPa"
    "rameter.FilterType:\010GAUSSIAN\022\017\n\004mean\030\002 \001"
    "(\002:\0010\022\020\n\003std\030\003 \001(\002:\0030.1\022\022\n\005range\030\004 \001(\002:\003"
    "0.1\022\017\n\004bias\030\006 \001(\002:\0010\022\016\n\003num\030\007 \001(\005:\0010\022\023\n\010"
    "channels\030\010 \001(\005:\0010\022\021\n\006height\030\t \001(\005:\0010\022\020\n\005"
    "width\030\n \001(\005:\0010\"\'\n\nFilterType\022\014\n\010GAUSSIAN"
    "\020\000\022\013\n\007UNIFORM\020\001\"\244\002\n\017SolverParameter\022@\n\014i"
    "s_pre_train\030\001 \001(\0162%.surfing.SolverParame"
    "ter.IS_PRE_TRAIN:\003NEW\022\013\n\003net\030\002 \001(\t\022\022\n\nne"
    "t_binary\030\003 \001(\t\022\020\n\010max_iter\030\004 \001(\005\022\034\n\024glob"
    "al_learning_rate\030\005 \001(\002\022\020\n\010momentum\030\006 \001(\002"
    "\022\024\n\014weight_decay\030\007 \001(\002\022\022\n\ntest_epoch\030\010 \001"
    "(\005\022\032\n\rdisplay_epoch\030\t \001(\005:\003100\"&\n\014IS_PRE"
    "_TRAIN\022\r\n\tPRE_TRAIN\020\000\022\007\n\003NEW\020\001\"D\n\014NetPar"
    "ameter\022\014\n\004name\030\001 \001(\t\022&\n\005layer\030d \003(\0132\027.su"
    "rfing.LayerParameter\"\215\n\n\016LayerParameter\022"
    "\014\n\004name\030\001 \001(\t\022*\n\004type\030\002 \001(\0162\034.surfing.La"
    "yerParameter.Type\022\016\n\006bottom\030\003 \003(\t\022\013\n\003top"
    "\030\004 \001(\t\022\016\n\003num\030\013 \001(\005:\0010\022\023\n\010channels\030\014 \001(\005"
    ":\0010\022\021\n\006height\030\r \001(\005:\0010\022\020\n\005width\030\016 \001(\005:\0010"
    "\0221\n\005phase\030\005 \001(\0162\035.surfing.LayerParameter"
    ".Phase:\003ALL\022!\n\005param\030\006 \001(\0132\022.surfing.Blo"
    "bProto\022 \n\004bias\030\007 \001(\0132\022.surfing.BlobProto"
    "\022\034\n\024filter_learning_rate\030\010 \001(\002\022\032\n\022bias_l"
    "earning_rate\030\t \001(\002\022G\n\031batch_normalizatio"
    "n_param\030c \001(\0132$.surfing.BatchNormalizati"
    "onParameter\0223\n\014concat_param\030d \001(\0132\035.surf"
    "ing.ConcatenateParameter\0221\n\nconv_param\030e"
    " \001(\0132\035.surfing.ConvolutionParameter\022*\n\nd"
    "ata_param\030f \001(\0132\026.surfing.DataParameter\022"
    "0\n\rdropout_param\030g \001(\0132\031.surfing.Dropout"
    "Parameter\022;\n\023inner_product_param\030h \001(\0132\036"
    ".surfing.InnerProductParameter\022(\n\tlcn_pa"
    "ram\030i \001(\0132\025.surfing.LCNParameter\022(\n\tlrn_"
    "param\030j \001(\0132\025.surfing.LRNParameter\0220\n\rpo"
    "oling_param\030k \001(\0132\031.surfing.PoolingParam"
    "eter\022*\n\nrelu_param\030l \001(\0132\026.surfing.ReluP"
    "arameter\022.\n\014result_param\030m \001(\0132\030.surfing"
    ".ResultParameter\0220\n\rsigmoid_param\030n \001(\0132"
    "\031.surfing.SigmoidParameter\0220\n\rsoftmax_pa"
    "ram\030o \001(\0132\031.surfing.SoftmaxParameter\022*\n\n"
    "tanh_param\030p \001(\0132\026.surfing.TanhParameter"
    "\"\302\001\n\004Type\022\026\n\022BATCHNORMALIZATION\020\r\022\017\n\013CON"
    "CATENATE\020\014\022\017\n\013CONVOLUTION\020\000\022\010\n\004DATA\020\001\022\013\n"
    "\007DROPOUT\020\002\022\020\n\014INNERPRODUCT\020\003\022\007\n\003LCN\020\004\022\007\n"
    "\003LRN\020\005\022\013\n\007POOLING\020\006\022\010\n\004RELU\020\007\022\n\n\006RESULT\020"
    "\010\022\013\n\007SIGMOID\020\t\022\013\n\007SOFTMAX\020\n\022\010\n\004TANH\020\013\"%\n"
    "\005Phase\022\t\n\005TRAIN\020\000\022\010\n\004TEST\020\001\022\007\n\003ALL\020\002\"v\n\033"
    "BatchNormalizationParameter\022=\n\004type\030\001 \001("
    "\0162).surfing.BatchNormalizationParameter."
    "Type:\004CONV\"\030\n\004Type\022\010\n\004CONV\020\000\022\006\n\002IP\020\001\"\026\n\024"
    "ConcatenateParameter\"\301\001\n\024ConvolutionPara"
    "meter\022\022\n\nnum_output\030\001 \001(\r\022\023\n\013kernel_size"
    "\030\002 \001(\r\022\020\n\005pad_h\030\003 \001(\r:\0010\022\020\n\005pad_w\030\004 \001(\r:"
    "\0010\022\023\n\010stride_h\030\005 \001(\r:\0011\022\023\n\010stride_w\030\006 \001("
    "\r:\0011\0222\n\020filter_parameter\030\007 \001(\0132\030.surfing"
    ".FilterParameter\"i\n\rDataParameter\022\016\n\006sou"
    "rce\030\001 \001(\t\022\022\n\nbatch_size\030\002 \001(\r\022\013\n\003num\030\003 \001"
    "(\r\022\021\n\tmean_file\030\004 \001(\t\022\024\n\014cropped_size\030\005 "
    "\003(\r\".\n\020DropoutParameter\022\032\n\rdropout_ratio"
    "\030\001 \001(\002:\0030.5\"_\n\025InnerProductParameter\022\022\n\n"
    "num_output\030\001 \001(\r\0222\n\020filter_parameter\030\002 \001"
    "(\0132\030.surfing.FilterParameter\"\016\n\014LCNParam"
    "eter\"^\n\014LRNParameter\022\025\n\nlocal_size\030\001 \001(\r"
    ":\0015\022\025\n\005alpha\030\002 \001(\002:\0060.0001\022\022\n\004beta\030\003 \001(\002"
    ":\0040.75\022\014\n\001k\030\004 \001(\002:\0011\"\363\001\n\020PoolingParamete"
    "r\022D\n\016pooling_method\030\001 \001(\0162\'.surfing.Pool"
    "ingParameter.PoolingMethod:\003MAX\022\020\n\005pad_h"
    "\030\002 \001(\r:\0010\022\020\n\005pad_w\030\003 \001(\r:\0010\022\023\n\010stride_h\030"
    "\004 \001(\r:\0012\022\023\n\010stride_w\030\005 \001(\r:\0012\022\023\n\010window_"
    "h\030\006 \001(\r:\0012\022\023\n\010window_w\030\007 \001(\r:\0012\"!\n\rPooli"
    "ngMethod\022\007\n\003MAX\020\000\022\007\n\003AVE\020\001\"\017\n\rReluParame"
    "ter\"f\n\017ResultParameter\0227\n\010losstype\030\001 \001(\016"
    "2!.surfing.ResultParameter.LossType:\002L1\""
    "\032\n\010LossType\022\006\n\002L1\020\000\022\006\n\002L2\020\001\"\022\n\020SigmoidPa"
    "rameter\"\022\n\020SoftmaxParameter\"\017\n\rTanhParam"
    "eter", 3364);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "surfing.proto", &protobuf_RegisterTypes);
  BlobProto::default_instance_ = new BlobProto();
  Datum::default_instance_ = new Datum();
  FilterParameter::default_instance_ = new FilterParameter();
  SolverParameter::default_instance_ = new SolverParameter();
  NetParameter::default_instance_ = new NetParameter();
  LayerParameter::default_instance_ = new LayerParameter();
  BatchNormalizationParameter::default_instance_ = new BatchNormalizationParameter();
  ConcatenateParameter::default_instance_ = new ConcatenateParameter();
  ConvolutionParameter::default_instance_ = new ConvolutionParameter();
  DataParameter::default_instance_ = new DataParameter();
  DropoutParameter::default_instance_ = new DropoutParameter();
  InnerProductParameter::default_instance_ = new InnerProductParameter();
  LCNParameter::default_instance_ = new LCNParameter();
  LRNParameter::default_instance_ = new LRNParameter();
  PoolingParameter::default_instance_ = new PoolingParameter();
  ReluParameter::default_instance_ = new ReluParameter();
  ResultParameter::default_instance_ = new ResultParameter();
  SigmoidParameter::default_instance_ = new SigmoidParameter();
  SoftmaxParameter::default_instance_ = new SoftmaxParameter();
  TanhParameter::default_instance_ = new TanhParameter();
  BlobProto::default_instance_->InitAsDefaultInstance();
  Datum::default_instance_->InitAsDefaultInstance();
  FilterParameter::default_instance_->InitAsDefaultInstance();
  SolverParameter::default_instance_->InitAsDefaultInstance();
  NetParameter::default_instance_->InitAsDefaultInstance();
  LayerParameter::default_instance_->InitAsDefaultInstance();
  BatchNormalizationParameter::default_instance_->InitAsDefaultInstance();
  ConcatenateParameter::default_instance_->InitAsDefaultInstance();
  ConvolutionParameter::default_instance_->InitAsDefaultInstance();
  DataParameter::default_instance_->InitAsDefaultInstance();
  DropoutParameter::default_instance_->InitAsDefaultInstance();
  InnerProductParameter::default_instance_->InitAsDefaultInstance();
  LCNParameter::default_instance_->InitAsDefaultInstance();
  LRNParameter::default_instance_->InitAsDefaultInstance();
  PoolingParameter::default_instance_->InitAsDefaultInstance();
  ReluParameter::default_instance_->InitAsDefaultInstance();
  ResultParameter::default_instance_->InitAsDefaultInstance();
  SigmoidParameter::default_instance_->InitAsDefaultInstance();
  SoftmaxParameter::default_instance_->InitAsDefaultInstance();
  TanhParameter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_surfing_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_surfing_2eproto {
  StaticDescriptorInitializer_surfing_2eproto() {
    protobuf_AddDesc_surfing_2eproto();
  }
} static_descriptor_initializer_surfing_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BlobProto::kNumFieldNumber;
const int BlobProto::kChannelsFieldNumber;
const int BlobProto::kHeightFieldNumber;
const int BlobProto::kWidthFieldNumber;
const int BlobProto::kDataFieldNumber;
const int BlobProto::kDiffFieldNumber;
const int BlobProto::kDoubleDataFieldNumber;
const int BlobProto::kDoubleDiffFieldNumber;
#endif  // !_MSC_VER

BlobProto::BlobProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:surfing.BlobProto)
}

void BlobProto::InitAsDefaultInstance() {
}

BlobProto::BlobProto(const BlobProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:surfing.BlobProto)
}

void BlobProto::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  channels_ = 0;
  height_ = 0;
  width_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobProto::~BlobProto() {
  // @@protoc_insertion_point(destructor:surfing.BlobProto)
  SharedDtor();
}

void BlobProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobProto_descriptor_;
}

const BlobProto& BlobProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_surfing_2eproto();
  return *default_instance_;
}

BlobProto* BlobProto::default_instance_ = NULL;

BlobProto* BlobProto::New() const {
  return new BlobProto;
}

void BlobProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(num_, width_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  diff_.Clear();
  double_data_.Clear();
  double_diff_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:surfing.BlobProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channels;
        break;
      }

      // optional int32 channels = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional int32 height = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }

      // optional int32 width = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // repeated float data = 5 [packed = true];
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else if (tag == 45) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_diff;
        break;
      }

      // repeated float diff = 6 [packed = true];
      case 6: {
        if (tag == 50) {
         parse_diff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_diff())));
        } else if (tag == 53) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50, input, this->mutable_diff())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_double_data;
        break;
      }

      // repeated double double_data = 7 [packed = true];
      case 7: {
        if (tag == 58) {
         parse_double_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_double_data())));
        } else if (tag == 57) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 58, input, this->mutable_double_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_double_diff;
        break;
      }

      // repeated double double_diff = 8 [packed = true];
      case 8: {
        if (tag == 66) {
         parse_double_diff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_double_diff())));
        } else if (tag == 65) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 66, input, this->mutable_double_diff())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:surfing.BlobProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:surfing.BlobProto)
  return false;
#undef DO_
}

void BlobProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:surfing.BlobProto)
  // optional int32 num = 1 [default = 0];
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int32 channels = 2 [default = 0];
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channels(), output);
  }

  // optional int32 height = 3 [default = 0];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // optional int32 width = 4 [default = 0];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // repeated float data = 5 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->data(i), output);
  }

  // repeated float diff = 6 [packed = true];
  if (this->diff_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_diff_cached_byte_size_);
  }
  for (int i = 0; i < this->diff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->diff(i), output);
  }

  // repeated double double_data = 7 [packed = true];
  if (this->double_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_double_data_cached_byte_size_);
  }
  for (int i = 0; i < this->double_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->double_data(i), output);
  }

  // repeated double double_diff = 8 [packed = true];
  if (this->double_diff_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_double_diff_cached_byte_size_);
  }
  for (int i = 0; i < this->double_diff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->double_diff(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:surfing.BlobProto)
}

::google::protobuf::uint8* BlobProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:surfing.BlobProto)
  // optional int32 num = 1 [default = 0];
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int32 channels = 2 [default = 0];
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channels(), target);
  }

  // optional int32 height = 3 [default = 0];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // optional int32 width = 4 [default = 0];
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }

  // repeated float data = 5 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->data(i), target);
  }

  // repeated float diff = 6 [packed = true];
  if (this->diff_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _diff_cached_byte_size_, target);
  }
  for (int i = 0; i < this->diff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->diff(i), target);
  }

  // repeated double double_data = 7 [packed = true];
  if (this->double_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _double_data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->double_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->double_data(i), target);
  }

  // repeated double double_diff = 8 [packed = true];
  if (this->double_diff_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _double_diff_cached_byte_size_, target);
  }
  for (int i = 0; i < this->double_diff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->double_diff(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:surfing.BlobProto)
  return target;
}

int BlobProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num = 1 [default = 0];
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 channels = 2 [default = 0];
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

    // optional int32 height = 3 [default = 0];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 width = 4 [default = 0];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

  }
  // repeated float data = 5 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float diff = 6 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->diff_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _diff_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double double_data = 7 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->double_data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _double_data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double double_diff = 8 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->double_diff_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _double_diff_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobProto::MergeFrom(const BlobProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  diff_.MergeFrom(from.diff_);
  double_data_.MergeFrom(from.double_data_);
  double_diff_.MergeFrom(from.double_diff_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_channels()) {
      set_channels(from.channels());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobProto::CopyFrom(const BlobProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobProto::IsInitialized() const {

  return true;
}

void BlobProto::Swap(BlobProto* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(channels_, other->channels_);
    std::swap(height_, other->height_);
    std::swap(width_, other->width_);
    data_.Swap(&other->data_);
    diff_.Swap(&other->diff_);
    double_data_.Swap(&other->double_data_);
    double_diff_.Swap(&other->double_diff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobProto_descriptor_;
  metadata.reflection = BlobProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Datum::kChannelsFieldNumber;
const int Datum::kHeightFieldNumber;
const int Datum::kWidthFieldNumber;
const int Datum::kDataFieldNumber;
const int Datum::kLabelFieldNumber;
const int Datum::kFloatDataFieldNumber;
#endif  // !_MSC_VER

Datum::Datum()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:surfing.Datum)
}

void Datum::InitAsDefaultInstance() {
}

Datum::Datum(const Datum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:surfing.Datum)
}

void Datum::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channels_ = 0;
  height_ = 0;
  width_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Datum::~Datum() {
  // @@protoc_insertion_point(destructor:surfing.Datum)
  SharedDtor();
}

void Datum::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void Datum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Datum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Datum_descriptor_;
}

const Datum& Datum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_surfing_2eproto();
  return *default_instance_;
}

Datum* Datum::default_instance_ = NULL;

Datum* Datum::New() const {
  return new Datum;
}

void Datum::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Datum*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(channels_, height_);
    ZR_(width_, label_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  float_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Datum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:surfing.Datum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channels = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // optional int32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }

      // optional int32 width = 3;
      case 3: {
        if (tag == 24) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_label;
        break;
      }

      // optional int32 label = 5;
      case 5: {
        if (tag == 40) {
         parse_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_)));
          set_has_label();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_float_data;
        break;
      }

      // repeated float float_data = 6;
      case 6: {
        if (tag == 53) {
         parse_float_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53, input, this->mutable_float_data())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_float_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_float_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:surfing.Datum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:surfing.Datum)
  return false;
#undef DO_
}

void Datum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:surfing.Datum)
  // optional int32 channels = 1;
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channels(), output);
  }

  // optional int32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // optional int32 width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional int32 label = 5;
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->label(), output);
  }

  // repeated float float_data = 6;
  for (int i = 0; i < this->float_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->float_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:surfing.Datum)
}

::google::protobuf::uint8* Datum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:surfing.Datum)
  // optional int32 channels = 1;
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channels(), target);
  }

  // optional int32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // optional int32 width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional int32 label = 5;
  if (has_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->label(), target);
  }

  // repeated float float_data = 6;
  for (int i = 0; i < this->float_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(6, this->float_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:surfing.Datum)
  return target;
}

int Datum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 channels = 1;
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

    // optional int32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int32 label = 5;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label());
    }

  }
  // repeated float float_data = 6;
  {
    int data_size = 0;
    data_size = 4 * this->float_data_size();
    total_size += 1 * this->float_data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Datum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Datum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Datum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Datum::MergeFrom(const Datum& from) {
  GOOGLE_CHECK_NE(&from, this);
  float_data_.MergeFrom(from.float_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channels()) {
      set_channels(from.channels());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Datum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Datum::CopyFrom(const Datum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Datum::IsInitialized() const {

  return true;
}

void Datum::Swap(Datum* other) {
  if (other != this) {
    std::swap(channels_, other->channels_);
    std::swap(height_, other->height_);
    std::swap(width_, other->width_);
    std::swap(data_, other->data_);
    std::swap(label_, other->label_);
    float_data_.Swap(&other->float_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Datum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Datum_descriptor_;
  metadata.reflection = Datum_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FilterParameter_FilterType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FilterParameter_FilterType_descriptor_;
}
bool FilterParameter_FilterType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FilterParameter_FilterType FilterParameter::GAUSSIAN;
const FilterParameter_FilterType FilterParameter::UNIFORM;
const FilterParameter_FilterType FilterParameter::FilterType_MIN;
const FilterParameter_FilterType FilterParameter::FilterType_MAX;
const int FilterParameter::FilterType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FilterParameter::kFilterFieldNumber;
const int FilterParameter::kMeanFieldNumber;
const int FilterParameter::kStdFieldNumber;
const int FilterParameter::kRangeFieldNumber;
const int FilterParameter::kBiasFieldNumber;
const int FilterParameter::kNumFieldNumber;
const int FilterParameter::kChannelsFieldNumber;
const int FilterParameter::kHeightFieldNumber;
const int FilterParameter::kWidthFieldNumber;
#endif  // !_MSC_VER

FilterParameter::FilterParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:surfing.FilterParameter)
}

void FilterParameter::InitAsDefaultInstance() {
}

FilterParameter::FilterParameter(const FilterParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:surfing.FilterParameter)
}

void FilterParameter::SharedCtor() {
  _cached_size_ = 0;
  filter_ = 0;
  mean_ = 0;
  std_ = 0.1f;
  range_ = 0.1f;
  bias_ = 0;
  num_ = 0;
  channels_ = 0;
  height_ = 0;
  width_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FilterParameter::~FilterParameter() {
  // @@protoc_insertion_point(destructor:surfing.FilterParameter)
  SharedDtor();
}

void FilterParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FilterParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilterParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FilterParameter_descriptor_;
}

const FilterParameter& FilterParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_surfing_2eproto();
  return *default_instance_;
}

FilterParameter* FilterParameter::default_instance_ = NULL;

FilterParameter* FilterParameter::New() const {
  return new FilterParameter;
}

void FilterParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FilterParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(filter_, mean_);
    ZR_(bias_, height_);
    std_ = 0.1f;
    range_ = 0.1f;
  }
  width_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FilterParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:surfing.FilterParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .surfing.FilterParameter.FilterType filter = 1 [default = GAUSSIAN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::surfing::FilterParameter_FilterType_IsValid(value)) {
            set_filter(static_cast< ::surfing::FilterParameter_FilterType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_mean;
        break;
      }

      // optional float mean = 2 [default = 0];
      case 2: {
        if (tag == 21) {
         parse_mean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_)));
          set_has_mean();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_std;
        break;
      }

      // optional float std = 3 [default = 0.1];
      case 3: {
        if (tag == 29) {
         parse_std:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &std_)));
          set_has_std();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_range;
        break;
      }

      // optional float range = 4 [default = 0.1];
      case 4: {
        if (tag == 37) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_bias;
        break;
      }

      // optional float bias = 6 [default = 0];
      case 6: {
        if (tag == 53) {
         parse_bias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_)));
          set_has_bias();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_num;
        break;
      }

      // optional int32 num = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_channels;
        break;
      }

      // optional int32 channels = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_height;
        break;
      }

      // optional int32 height = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_width;
        break;
      }

      // optional int32 width = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:surfing.FilterParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:surfing.FilterParameter)
  return false;
#undef DO_
}

void FilterParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:surfing.FilterParameter)
  // optional .surfing.FilterParameter.FilterType filter = 1 [default = GAUSSIAN];
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->filter(), output);
  }

  // optional float mean = 2 [default = 0];
  if (has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->mean(), output);
  }

  // optional float std = 3 [default = 0.1];
  if (has_std()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->std(), output);
  }

  // optional float range = 4 [default = 0.1];
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->range(), output);
  }

  // optional float bias = 6 [default = 0];
  if (has_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->bias(), output);
  }

  // optional int32 num = 7 [default = 0];
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->num(), output);
  }

  // optional int32 channels = 8 [default = 0];
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->channels(), output);
  }

  // optional int32 height = 9 [default = 0];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->height(), output);
  }

  // optional int32 width = 10 [default = 0];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->width(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:surfing.FilterParameter)
}

::google::protobuf::uint8* FilterParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:surfing.FilterParameter)
  // optional .surfing.FilterParameter.FilterType filter = 1 [default = GAUSSIAN];
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->filter(), target);
  }

  // optional float mean = 2 [default = 0];
  if (has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->mean(), target);
  }

  // optional float std = 3 [default = 0.1];
  if (has_std()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->std(), target);
  }

  // optional float range = 4 [default = 0.1];
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->range(), target);
  }

  // optional float bias = 6 [default = 0];
  if (has_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->bias(), target);
  }

  // optional int32 num = 7 [default = 0];
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->num(), target);
  }

  // optional int32 channels = 8 [default = 0];
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->channels(), target);
  }

  // optional int32 height = 9 [default = 0];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->height(), target);
  }

  // optional int32 width = 10 [default = 0];
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->width(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:surfing.FilterParameter)
  return target;
}

int FilterParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .surfing.FilterParameter.FilterType filter = 1 [default = GAUSSIAN];
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter());
    }

    // optional float mean = 2 [default = 0];
    if (has_mean()) {
      total_size += 1 + 4;
    }

    // optional float std = 3 [default = 0.1];
    if (has_std()) {
      total_size += 1 + 4;
    }

    // optional float range = 4 [default = 0.1];
    if (has_range()) {
      total_size += 1 + 4;
    }

    // optional float bias = 6 [default = 0];
    if (has_bias()) {
      total_size += 1 + 4;
    }

    // optional int32 num = 7 [default = 0];
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 channels = 8 [default = 0];
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

    // optional int32 height = 9 [default = 0];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 width = 10 [default = 0];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilterParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FilterParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FilterParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FilterParameter::MergeFrom(const FilterParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filter()) {
      set_filter(from.filter());
    }
    if (from.has_mean()) {
      set_mean(from.mean());
    }
    if (from.has_std()) {
      set_std(from.std());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
    if (from.has_bias()) {
      set_bias(from.bias());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_channels()) {
      set_channels(from.channels());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FilterParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterParameter::CopyFrom(const FilterParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterParameter::IsInitialized() const {

  return true;
}

void FilterParameter::Swap(FilterParameter* other) {
  if (other != this) {
    std::swap(filter_, other->filter_);
    std::swap(mean_, other->mean_);
    std::swap(std_, other->std_);
    std::swap(range_, other->range_);
    std::swap(bias_, other->bias_);
    std::swap(num_, other->num_);
    std::swap(channels_, other->channels_);
    std::swap(height_, other->height_);
    std::swap(width_, other->width_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FilterParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FilterParameter_descriptor_;
  metadata.reflection = FilterParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SolverParameter_IS_PRE_TRAIN_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverParameter_IS_PRE_TRAIN_descriptor_;
}
bool SolverParameter_IS_PRE_TRAIN_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SolverParameter_IS_PRE_TRAIN SolverParameter::PRE_TRAIN;
const SolverParameter_IS_PRE_TRAIN SolverParameter::NEW;
const SolverParameter_IS_PRE_TRAIN SolverParameter::IS_PRE_TRAIN_MIN;
const SolverParameter_IS_PRE_TRAIN SolverParameter::IS_PRE_TRAIN_MAX;
const int SolverParameter::IS_PRE_TRAIN_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SolverParameter::kIsPreTrainFieldNumber;
const int SolverParameter::kNetFieldNumber;
const int SolverParameter::kNetBinaryFieldNumber;
const int SolverParameter::kMaxIterFieldNumber;
const int SolverParameter::kGlobalLearningRateFieldNumber;
const int SolverParameter::kMomentumFieldNumber;
const int SolverParameter::kWeightDecayFieldNumber;
const int SolverParameter::kTestEpochFieldNumber;
const int SolverParameter::kDisplayEpochFieldNumber;
#endif  // !_MSC_VER

SolverParameter::SolverParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:surfing.SolverParameter)
}

void SolverParameter::InitAsDefaultInstance() {
}

SolverParameter::SolverParameter(const SolverParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:surfing.SolverParameter)
}

void SolverParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  is_pre_train_ = 1;
  net_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  net_binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_iter_ = 0;
  global_learning_rate_ = 0;
  momentum_ = 0;
  weight_decay_ = 0;
  test_epoch_ = 0;
  display_epoch_ = 100;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SolverParameter::~SolverParameter() {
  // @@protoc_insertion_point(destructor:surfing.SolverParameter)
  SharedDtor();
}

void SolverParameter::SharedDtor() {
  if (net_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete net_;
  }
  if (net_binary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete net_binary_;
  }
  if (this != default_instance_) {
  }
}

void SolverParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverParameter_descriptor_;
}

const SolverParameter& SolverParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_surfing_2eproto();
  return *default_instance_;
}

SolverParameter* SolverParameter::default_instance_ = NULL;

SolverParameter* SolverParameter::New() const {
  return new SolverParameter;
}

void SolverParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SolverParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(global_learning_rate_, test_epoch_);
    is_pre_train_ = 1;
    if (has_net()) {
      if (net_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        net_->clear();
      }
    }
    if (has_net_binary()) {
      if (net_binary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        net_binary_->clear();
      }
    }
    max_iter_ = 0;
  }
  display_epoch_ = 100;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SolverParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:surfing.SolverParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .surfing.SolverParameter.IS_PRE_TRAIN is_pre_train = 1 [default = NEW];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::surfing::SolverParameter_IS_PRE_TRAIN_IsValid(value)) {
            set_is_pre_train(static_cast< ::surfing::SolverParameter_IS_PRE_TRAIN >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_net;
        break;
      }

      // optional string net = 2;
      case 2: {
        if (tag == 18) {
         parse_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->net().data(), this->net().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "net");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_net_binary;
        break;
      }

      // optional string net_binary = 3;
      case 3: {
        if (tag == 26) {
         parse_net_binary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net_binary()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->net_binary().data(), this->net_binary().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "net_binary");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_iter;
        break;
      }

      // optional int32 max_iter = 4;
      case 4: {
        if (tag == 32) {
         parse_max_iter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_iter_)));
          set_has_max_iter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_global_learning_rate;
        break;
      }

      // optional float global_learning_rate = 5;
      case 5: {
        if (tag == 45) {
         parse_global_learning_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &global_learning_rate_)));
          set_has_global_learning_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_momentum;
        break;
      }

      // optional float momentum = 6;
      case 6: {
        if (tag == 53) {
         parse_momentum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum_)));
          set_has_momentum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_weight_decay;
        break;
      }

      // optional float weight_decay = 7;
      case 7: {
        if (tag == 61) {
         parse_weight_decay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_decay_)));
          set_has_weight_decay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_test_epoch;
        break;
      }

      // optional int32 test_epoch = 8;
      case 8: {
        if (tag == 64) {
         parse_test_epoch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_epoch_)));
          set_has_test_epoch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_display_epoch;
        break;
      }

      // optional int32 display_epoch = 9 [default = 100];
      case 9: {
        if (tag == 72) {
         parse_display_epoch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_epoch_)));
          set_has_display_epoch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:surfing.SolverParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:surfing.SolverParameter)
  return false;
#undef DO_
}

void SolverParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:surfing.SolverParameter)
  // optional .surfing.SolverParameter.IS_PRE_TRAIN is_pre_train = 1 [default = NEW];
  if (has_is_pre_train()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->is_pre_train(), output);
  }

  // optional string net = 2;
  if (has_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net().data(), this->net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->net(), output);
  }

  // optional string net_binary = 3;
  if (has_net_binary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net_binary().data(), this->net_binary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "net_binary");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->net_binary(), output);
  }

  // optional int32 max_iter = 4;
  if (has_max_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_iter(), output);
  }

  // optional float global_learning_rate = 5;
  if (has_global_learning_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->global_learning_rate(), output);
  }

  // optional float momentum = 6;
  if (has_momentum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->momentum(), output);
  }

  // optional float weight_decay = 7;
  if (has_weight_decay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->weight_decay(), output);
  }

  // optional int32 test_epoch = 8;
  if (has_test_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->test_epoch(), output);
  }

  // optional int32 display_epoch = 9 [default = 100];
  if (has_display_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->display_epoch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:surfing.SolverParameter)
}

::google::protobuf::uint8* SolverParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:surfing.SolverParameter)
  // optional .surfing.SolverParameter.IS_PRE_TRAIN is_pre_train = 1 [default = NEW];
  if (has_is_pre_train()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->is_pre_train(), target);
  }

  // optional string net = 2;
  if (has_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net().data(), this->net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->net(), target);
  }

  // optional string net_binary = 3;
  if (has_net_binary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net_binary().data(), this->net_binary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "net_binary");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->net_binary(), target);
  }

  // optional int32 max_iter = 4;
  if (has_max_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_iter(), target);
  }

  // optional float global_learning_rate = 5;
  if (has_global_learning_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->global_learning_rate(), target);
  }

  // optional float momentum = 6;
  if (has_momentum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->momentum(), target);
  }

  // optional float weight_decay = 7;
  if (has_weight_decay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->weight_decay(), target);
  }

  // optional int32 test_epoch = 8;
  if (has_test_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->test_epoch(), target);
  }

  // optional int32 display_epoch = 9 [default = 100];
  if (has_display_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->display_epoch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:surfing.SolverParameter)
  return target;
}

int SolverParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .surfing.SolverParameter.IS_PRE_TRAIN is_pre_train = 1 [default = NEW];
    if (has_is_pre_train()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->is_pre_train());
    }

    // optional string net = 2;
    if (has_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->net());
    }

    // optional string net_binary = 3;
    if (has_net_binary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->net_binary());
    }

    // optional int32 max_iter = 4;
    if (has_max_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_iter());
    }

    // optional float global_learning_rate = 5;
    if (has_global_learning_rate()) {
      total_size += 1 + 4;
    }

    // optional float momentum = 6;
    if (has_momentum()) {
      total_size += 1 + 4;
    }

    // optional float weight_decay = 7;
    if (has_weight_decay()) {
      total_size += 1 + 4;
    }

    // optional int32 test_epoch = 8;
    if (has_test_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->test_epoch());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 display_epoch = 9 [default = 100];
    if (has_display_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->display_epoch());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolverParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SolverParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SolverParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SolverParameter::MergeFrom(const SolverParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_pre_train()) {
      set_is_pre_train(from.is_pre_train());
    }
    if (from.has_net()) {
      set_net(from.net());
    }
    if (from.has_net_binary()) {
      set_net_binary(from.net_binary());
    }
    if (from.has_max_iter()) {
      set_max_iter(from.max_iter());
    }
    if (from.has_global_learning_rate()) {
      set_global_learning_rate(from.global_learning_rate());
    }
    if (from.has_momentum()) {
      set_momentum(from.momentum());
    }
    if (from.has_weight_decay()) {
      set_weight_decay(from.weight_decay());
    }
    if (from.has_test_epoch()) {
      set_test_epoch(from.test_epoch());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_display_epoch()) {
      set_display_epoch(from.display_epoch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SolverParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverParameter::CopyFrom(const SolverParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverParameter::IsInitialized() const {

  return true;
}

void SolverParameter::Swap(SolverParameter* other) {
  if (other != this) {
    std::swap(is_pre_train_, other->is_pre_train_);
    std::swap(net_, other->net_);
    std::swap(net_binary_, other->net_binary_);
    std::swap(max_iter_, other->max_iter_);
    std::swap(global_learning_rate_, other->global_learning_rate_);
    std::swap(momentum_, other->momentum_);
    std::swap(weight_decay_, other->weight_decay_);
    std::swap(test_epoch_, other->test_epoch_);
    std::swap(display_epoch_, other->display_epoch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SolverParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SolverParameter_descriptor_;
  metadata.reflection = SolverParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetParameter::kNameFieldNumber;
const int NetParameter::kLayerFieldNumber;
#endif  // !_MSC_VER

NetParameter::NetParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:surfing.NetParameter)
}

void NetParameter::InitAsDefaultInstance() {
}

NetParameter::NetParameter(const NetParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:surfing.NetParameter)
}

void NetParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetParameter::~NetParameter() {
  // @@protoc_insertion_point(destructor:surfing.NetParameter)
  SharedDtor();
}

void NetParameter::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void NetParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetParameter_descriptor_;
}

const NetParameter& NetParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_surfing_2eproto();
  return *default_instance_;
}

NetParameter* NetParameter::default_instance_ = NULL;

NetParameter* NetParameter::New() const {
  return new NetParameter;
}

void NetParameter::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  layer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:surfing.NetParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_layer;
        break;
      }

      // repeated .surfing.LayerParameter layer = 100;
      case 100: {
        if (tag == 802) {
         parse_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_layer;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:surfing.NetParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:surfing.NetParameter)
  return false;
#undef DO_
}

void NetParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:surfing.NetParameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .surfing.LayerParameter layer = 100;
  for (int i = 0; i < this->layer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->layer(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:surfing.NetParameter)
}

::google::protobuf::uint8* NetParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:surfing.NetParameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .surfing.LayerParameter layer = 100;
  for (int i = 0; i < this->layer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->layer(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:surfing.NetParameter)
  return target;
}

int NetParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .surfing.LayerParameter layer = 100;
  total_size += 2 * this->layer_size();
  for (int i = 0; i < this->layer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layer(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetParameter::MergeFrom(const NetParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  layer_.MergeFrom(from.layer_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetParameter::CopyFrom(const NetParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetParameter::IsInitialized() const {

  return true;
}

void NetParameter::Swap(NetParameter* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    layer_.Swap(&other->layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetParameter_descriptor_;
  metadata.reflection = NetParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LayerParameter_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LayerParameter_Type_descriptor_;
}
bool LayerParameter_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LayerParameter_Type LayerParameter::BATCHNORMALIZATION;
const LayerParameter_Type LayerParameter::CONCATENATE;
const LayerParameter_Type LayerParameter::CONVOLUTION;
const LayerParameter_Type LayerParameter::DATA;
const LayerParameter_Type LayerParameter::DROPOUT;
const LayerParameter_Type LayerParameter::INNERPRODUCT;
const LayerParameter_Type LayerParameter::LCN;
const LayerParameter_Type LayerParameter::LRN;
const LayerParameter_Type LayerParameter::POOLING;
const LayerParameter_Type LayerParameter::RELU;
const LayerParameter_Type LayerParameter::RESULT;
const LayerParameter_Type LayerParameter::SIGMOID;
const LayerParameter_Type LayerParameter::SOFTMAX;
const LayerParameter_Type LayerParameter::TANH;
const LayerParameter_Type LayerParameter::Type_MIN;
const LayerParameter_Type LayerParameter::Type_MAX;
const int LayerParameter::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* LayerParameter_Phase_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LayerParameter_Phase_descriptor_;
}
bool LayerParameter_Phase_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LayerParameter_Phase LayerParameter::TRAIN;
const LayerParameter_Phase LayerParameter::TEST;
const LayerParameter_Phase LayerParameter::ALL;
const LayerParameter_Phase LayerParameter::Phase_MIN;
const LayerParameter_Phase LayerParameter::Phase_MAX;
const int LayerParameter::Phase_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LayerParameter::kNameFieldNumber;
const int LayerParameter::kTypeFieldNumber;
const int LayerParameter::kBottomFieldNumber;
const int LayerParameter::kTopFieldNumber;
const int LayerParameter::kNumFieldNumber;
const int LayerParameter::kChannelsFieldNumber;
const int LayerParameter::kHeightFieldNumber;
const int LayerParameter::kWidthFieldNumber;
const int LayerParameter::kPhaseFieldNumber;
const int LayerParameter::kParamFieldNumber;
const int LayerParameter::kBiasFieldNumber;
const int LayerParameter::kFilterLearningRateFieldNumber;
const int LayerParameter::kBiasLearningRateFieldNumber;
const int LayerParameter::kBatchNormalizationParamFieldNumber;
const int LayerParameter::kConcatParamFieldNumber;
const int LayerParameter::kConvParamFieldNumber;
const int LayerParameter::kDataParamFieldNumber;
const int LayerParameter::kDropoutParamFieldNumber;
const int LayerParameter::kInnerProductParamFieldNumber;
const int LayerParameter::kLcnParamFieldNumber;
const int LayerParameter::kLrnParamFieldNumber;
const int LayerParameter::kPoolingParamFieldNumber;
const int LayerParameter::kReluParamFieldNumber;
const int LayerParameter::kResultParamFieldNumber;
const int LayerParameter::kSigmoidParamFieldNumber;
const int LayerParameter::kSoftmaxParamFieldNumber;
const int LayerParameter::kTanhParamFieldNumber;
#endif  // !_MSC_VER

LayerParameter::LayerParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:surfing.LayerParameter)
}

void LayerParameter::InitAsDefaultInstance() {
  param_ = const_cast< ::surfing::BlobProto*>(&::surfing::BlobProto::default_instance());
  bias_ = const_cast< ::surfing::BlobProto*>(&::surfing::BlobProto::default_instance());
  batch_normalization_param_ = const_cast< ::surfing::BatchNormalizationParameter*>(&::surfing::BatchNormalizationParameter::default_instance());
  concat_param_ = const_cast< ::surfing::ConcatenateParameter*>(&::surfing::ConcatenateParameter::default_instance());
  conv_param_ = const_cast< ::surfing::ConvolutionParameter*>(&::surfing::ConvolutionParameter::default_instance());
  data_param_ = const_cast< ::surfing::DataParameter*>(&::surfing::DataParameter::default_instance());
  dropout_param_ = const_cast< ::surfing::DropoutParameter*>(&::surfing::DropoutParameter::default_instance());
  inner_product_param_ = const_cast< ::surfing::InnerProductParameter*>(&::surfing::InnerProductParameter::default_instance());
  lcn_param_ = const_cast< ::surfing::LCNParameter*>(&::surfing::LCNParameter::default_instance());
  lrn_param_ = const_cast< ::surfing::LRNParameter*>(&::surfing::LRNParameter::default_instance());
  pooling_param_ = const_cast< ::surfing::PoolingParameter*>(&::surfing::PoolingParameter::default_instance());
  relu_param_ = const_cast< ::surfing::ReluParameter*>(&::surfing::ReluParameter::default_instance());
  result_param_ = const_cast< ::surfing::ResultParameter*>(&::surfing::ResultParameter::default_instance());
  sigmoid_param_ = const_cast< ::surfing::SigmoidParameter*>(&::surfing::SigmoidParameter::default_instance());
  softmax_param_ = const_cast< ::surfing::SoftmaxParameter*>(&::surfing::SoftmaxParameter::default_instance());
  tanh_param_ = const_cast< ::surfing::TanhParameter*>(&::surfing::TanhParameter::default_instance());
}

LayerParameter::LayerParameter(const LayerParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:surfing.LayerParameter)
}

void LayerParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 13;
  top_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_ = 0;
  channels_ = 0;
  height_ = 0;
  width_ = 0;
  phase_ = 2;
  param_ = NULL;
  bias_ = NULL;
  filter_learning_rate_ = 0;
  bias_learning_rate_ = 0;
  batch_normalization_param_ = NULL;
  concat_param_ = NULL;
  conv_param_ = NULL;
  data_param_ = NULL;
  dropout_param_ = NULL;
  inner_product_param_ = NULL;
  lcn_param_ = NULL;
  lrn_param_ = NULL;
  pooling_param_ = NULL;
  relu_param_ = NULL;
  result_param_ = NULL;
  sigmoid_param_ = NULL;
  softmax_param_ = NULL;
  tanh_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LayerParameter::~LayerParameter() {
  // @@protoc_insertion_point(destructor:surfing.LayerParameter)
  SharedDtor();
}

void LayerParameter::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (top_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete top_;
  }
  if (this != default_instance_) {
    delete param_;
    delete bias_;
    delete batch_normalization_param_;
    delete concat_param_;
    delete conv_param_;
    delete data_param_;
    delete dropout_param_;
    delete inner_product_param_;
    delete lcn_param_;
    delete lrn_param_;
    delete pooling_param_;
    delete relu_param_;
    delete result_param_;
    delete sigmoid_param_;
    delete softmax_param_;
    delete tanh_param_;
  }
}

void LayerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayerParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LayerParameter_descriptor_;
}

const LayerParameter& LayerParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_surfing_2eproto();
  return *default_instance_;
}

LayerParameter* LayerParameter::default_instance_ = NULL;

LayerParameter* LayerParameter::New() const {
  return new LayerParameter;
}

void LayerParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LayerParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 251) {
    ZR_(channels_, width_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    type_ = 13;
    if (has_top()) {
      if (top_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        top_->clear();
      }
    }
    num_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(filter_learning_rate_, bias_learning_rate_);
    phase_ = 2;
    if (has_param()) {
      if (param_ != NULL) param_->::surfing::BlobProto::Clear();
    }
    if (has_bias()) {
      if (bias_ != NULL) bias_->::surfing::BlobProto::Clear();
    }
    if (has_batch_normalization_param()) {
      if (batch_normalization_param_ != NULL) batch_normalization_param_->::surfing::BatchNormalizationParameter::Clear();
    }
    if (has_concat_param()) {
      if (concat_param_ != NULL) concat_param_->::surfing::ConcatenateParameter::Clear();
    }
    if (has_conv_param()) {
      if (conv_param_ != NULL) conv_param_->::surfing::ConvolutionParameter::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    if (has_data_param()) {
      if (data_param_ != NULL) data_param_->::surfing::DataParameter::Clear();
    }
    if (has_dropout_param()) {
      if (dropout_param_ != NULL) dropout_param_->::surfing::DropoutParameter::Clear();
    }
    if (has_inner_product_param()) {
      if (inner_product_param_ != NULL) inner_product_param_->::surfing::InnerProductParameter::Clear();
    }
    if (has_lcn_param()) {
      if (lcn_param_ != NULL) lcn_param_->::surfing::LCNParameter::Clear();
    }
    if (has_lrn_param()) {
      if (lrn_param_ != NULL) lrn_param_->::surfing::LRNParameter::Clear();
    }
    if (has_pooling_param()) {
      if (pooling_param_ != NULL) pooling_param_->::surfing::PoolingParameter::Clear();
    }
    if (has_relu_param()) {
      if (relu_param_ != NULL) relu_param_->::surfing::ReluParameter::Clear();
    }
    if (has_result_param()) {
      if (result_param_ != NULL) result_param_->::surfing::ResultParameter::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 117440512) {
    if (has_sigmoid_param()) {
      if (sigmoid_param_ != NULL) sigmoid_param_->::surfing::SigmoidParameter::Clear();
    }
    if (has_softmax_param()) {
      if (softmax_param_ != NULL) softmax_param_->::surfing::SoftmaxParameter::Clear();
    }
    if (has_tanh_param()) {
      if (tanh_param_ != NULL) tanh_param_->::surfing::TanhParameter::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  bottom_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LayerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:surfing.LayerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .surfing.LayerParameter.Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::surfing::LayerParameter_Type_IsValid(value)) {
            set_type(static_cast< ::surfing::LayerParameter_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bottom;
        break;
      }

      // repeated string bottom = 3;
      case 3: {
        if (tag == 26) {
         parse_bottom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bottom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bottom(this->bottom_size() - 1).data(),
            this->bottom(this->bottom_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bottom");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bottom;
        if (input->ExpectTag(34)) goto parse_top;
        break;
      }

      // optional string top = 4;
      case 4: {
        if (tag == 34) {
         parse_top:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_top()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->top().data(), this->top().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "top");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_phase;
        break;
      }

      // optional .surfing.LayerParameter.Phase phase = 5 [default = ALL];
      case 5: {
        if (tag == 40) {
         parse_phase:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::surfing::LayerParameter_Phase_IsValid(value)) {
            set_phase(static_cast< ::surfing::LayerParameter_Phase >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_param;
        break;
      }

      // optional .surfing.BlobProto param = 6;
      case 6: {
        if (tag == 50) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_bias;
        break;
      }

      // optional .surfing.BlobProto bias = 7;
      case 7: {
        if (tag == 58) {
         parse_bias:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_filter_learning_rate;
        break;
      }

      // optional float filter_learning_rate = 8;
      case 8: {
        if (tag == 69) {
         parse_filter_learning_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &filter_learning_rate_)));
          set_has_filter_learning_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_bias_learning_rate;
        break;
      }

      // optional float bias_learning_rate = 9;
      case 9: {
        if (tag == 77) {
         parse_bias_learning_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_learning_rate_)));
          set_has_bias_learning_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_num;
        break;
      }

      // optional int32 num = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_channels;
        break;
      }

      // optional int32 channels = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_height;
        break;
      }

      // optional int32 height = 13 [default = 0];
      case 13: {
        if (tag == 104) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_width;
        break;
      }

      // optional int32 width = 14 [default = 0];
      case 14: {
        if (tag == 112) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(794)) goto parse_batch_normalization_param;
        break;
      }

      // optional .surfing.BatchNormalizationParameter batch_normalization_param = 99;
      case 99: {
        if (tag == 794) {
         parse_batch_normalization_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_batch_normalization_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_concat_param;
        break;
      }

      // optional .surfing.ConcatenateParameter concat_param = 100;
      case 100: {
        if (tag == 802) {
         parse_concat_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_concat_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_conv_param;
        break;
      }

      // optional .surfing.ConvolutionParameter conv_param = 101;
      case 101: {
        if (tag == 810) {
         parse_conv_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conv_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(818)) goto parse_data_param;
        break;
      }

      // optional .surfing.DataParameter data_param = 102;
      case 102: {
        if (tag == 818) {
         parse_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(826)) goto parse_dropout_param;
        break;
      }

      // optional .surfing.DropoutParameter dropout_param = 103;
      case 103: {
        if (tag == 826) {
         parse_dropout_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dropout_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(834)) goto parse_inner_product_param;
        break;
      }

      // optional .surfing.InnerProductParameter inner_product_param = 104;
      case 104: {
        if (tag == 834) {
         parse_inner_product_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inner_product_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(842)) goto parse_lcn_param;
        break;
      }

      // optional .surfing.LCNParameter lcn_param = 105;
      case 105: {
        if (tag == 842) {
         parse_lcn_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lcn_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(850)) goto parse_lrn_param;
        break;
      }

      // optional .surfing.LRNParameter lrn_param = 106;
      case 106: {
        if (tag == 850) {
         parse_lrn_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lrn_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(858)) goto parse_pooling_param;
        break;
      }

      // optional .surfing.PoolingParameter pooling_param = 107;
      case 107: {
        if (tag == 858) {
         parse_pooling_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pooling_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(866)) goto parse_relu_param;
        break;
      }

      // optional .surfing.ReluParameter relu_param = 108;
      case 108: {
        if (tag == 866) {
         parse_relu_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relu_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(874)) goto parse_result_param;
        break;
      }

      // optional .surfing.ResultParameter result_param = 109;
      case 109: {
        if (tag == 874) {
         parse_result_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(882)) goto parse_sigmoid_param;
        break;
      }

      // optional .surfing.SigmoidParameter sigmoid_param = 110;
      case 110: {
        if (tag == 882) {
         parse_sigmoid_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sigmoid_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(890)) goto parse_softmax_param;
        break;
      }

      // optional .surfing.SoftmaxParameter softmax_param = 111;
      case 111: {
        if (tag == 890) {
         parse_softmax_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_softmax_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(898)) goto parse_tanh_param;
        break;
      }

      // optional .surfing.TanhParameter tanh_param = 112;
      case 112: {
        if (tag == 898) {
         parse_tanh_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tanh_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:surfing.LayerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:surfing.LayerParameter)
  return false;
#undef DO_
}

void LayerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:surfing.LayerParameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .surfing.LayerParameter.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated string bottom = 3;
  for (int i = 0; i < this->bottom_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->bottom(i).data(), this->bottom(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "bottom");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bottom(i), output);
  }

  // optional string top = 4;
  if (has_top()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->top().data(), this->top().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "top");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->top(), output);
  }

  // optional .surfing.LayerParameter.Phase phase = 5 [default = ALL];
  if (has_phase()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->phase(), output);
  }

  // optional .surfing.BlobProto param = 6;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->param(), output);
  }

  // optional .surfing.BlobProto bias = 7;
  if (has_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->bias(), output);
  }

  // optional float filter_learning_rate = 8;
  if (has_filter_learning_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->filter_learning_rate(), output);
  }

  // optional float bias_learning_rate = 9;
  if (has_bias_learning_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->bias_learning_rate(), output);
  }

  // optional int32 num = 11 [default = 0];
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->num(), output);
  }

  // optional int32 channels = 12 [default = 0];
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->channels(), output);
  }

  // optional int32 height = 13 [default = 0];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->height(), output);
  }

  // optional int32 width = 14 [default = 0];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->width(), output);
  }

  // optional .surfing.BatchNormalizationParameter batch_normalization_param = 99;
  if (has_batch_normalization_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      99, this->batch_normalization_param(), output);
  }

  // optional .surfing.ConcatenateParameter concat_param = 100;
  if (has_concat_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->concat_param(), output);
  }

  // optional .surfing.ConvolutionParameter conv_param = 101;
  if (has_conv_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->conv_param(), output);
  }

  // optional .surfing.DataParameter data_param = 102;
  if (has_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, this->data_param(), output);
  }

  // optional .surfing.DropoutParameter dropout_param = 103;
  if (has_dropout_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, this->dropout_param(), output);
  }

  // optional .surfing.InnerProductParameter inner_product_param = 104;
  if (has_inner_product_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, this->inner_product_param(), output);
  }

  // optional .surfing.LCNParameter lcn_param = 105;
  if (has_lcn_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, this->lcn_param(), output);
  }

  // optional .surfing.LRNParameter lrn_param = 106;
  if (has_lrn_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, this->lrn_param(), output);
  }

  // optional .surfing.PoolingParameter pooling_param = 107;
  if (has_pooling_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      107, this->pooling_param(), output);
  }

  // optional .surfing.ReluParameter relu_param = 108;
  if (has_relu_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      108, this->relu_param(), output);
  }

  // optional .surfing.ResultParameter result_param = 109;
  if (has_result_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      109, this->result_param(), output);
  }

  // optional .surfing.SigmoidParameter sigmoid_param = 110;
  if (has_sigmoid_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      110, this->sigmoid_param(), output);
  }

  // optional .surfing.SoftmaxParameter softmax_param = 111;
  if (has_softmax_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      111, this->softmax_param(), output);
  }

  // optional .surfing.TanhParameter tanh_param = 112;
  if (has_tanh_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      112, this->tanh_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:surfing.LayerParameter)
}

::google::protobuf::uint8* LayerParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:surfing.LayerParameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .surfing.LayerParameter.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated string bottom = 3;
  for (int i = 0; i < this->bottom_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bottom(i).data(), this->bottom(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bottom");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->bottom(i), target);
  }

  // optional string top = 4;
  if (has_top()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->top().data(), this->top().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "top");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->top(), target);
  }

  // optional .surfing.LayerParameter.Phase phase = 5 [default = ALL];
  if (has_phase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->phase(), target);
  }

  // optional .surfing.BlobProto param = 6;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->param(), target);
  }

  // optional .surfing.BlobProto bias = 7;
  if (has_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->bias(), target);
  }

  // optional float filter_learning_rate = 8;
  if (has_filter_learning_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->filter_learning_rate(), target);
  }

  // optional float bias_learning_rate = 9;
  if (has_bias_learning_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->bias_learning_rate(), target);
  }

  // optional int32 num = 11 [default = 0];
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->num(), target);
  }

  // optional int32 channels = 12 [default = 0];
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->channels(), target);
  }

  // optional int32 height = 13 [default = 0];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->height(), target);
  }

  // optional int32 width = 14 [default = 0];
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->width(), target);
  }

  // optional .surfing.BatchNormalizationParameter batch_normalization_param = 99;
  if (has_batch_normalization_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        99, this->batch_normalization_param(), target);
  }

  // optional .surfing.ConcatenateParameter concat_param = 100;
  if (has_concat_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->concat_param(), target);
  }

  // optional .surfing.ConvolutionParameter conv_param = 101;
  if (has_conv_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->conv_param(), target);
  }

  // optional .surfing.DataParameter data_param = 102;
  if (has_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, this->data_param(), target);
  }

  // optional .surfing.DropoutParameter dropout_param = 103;
  if (has_dropout_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->dropout_param(), target);
  }

  // optional .surfing.InnerProductParameter inner_product_param = 104;
  if (has_inner_product_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        104, this->inner_product_param(), target);
  }

  // optional .surfing.LCNParameter lcn_param = 105;
  if (has_lcn_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        105, this->lcn_param(), target);
  }

  // optional .surfing.LRNParameter lrn_param = 106;
  if (has_lrn_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        106, this->lrn_param(), target);
  }

  // optional .surfing.PoolingParameter pooling_param = 107;
  if (has_pooling_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        107, this->pooling_param(), target);
  }

  // optional .surfing.ReluParameter relu_param = 108;
  if (has_relu_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        108, this->relu_param(), target);
  }

  // optional .surfing.ResultParameter result_param = 109;
  if (has_result_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        109, this->result_param(), target);
  }

  // optional .surfing.SigmoidParameter sigmoid_param = 110;
  if (has_sigmoid_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        110, this->sigmoid_param(), target);
  }

  // optional .surfing.SoftmaxParameter softmax_param = 111;
  if (has_softmax_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        111, this->softmax_param(), target);
  }

  // optional .surfing.TanhParameter tanh_param = 112;
  if (has_tanh_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        112, this->tanh_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:surfing.LayerParameter)
  return target;
}

int LayerParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .surfing.LayerParameter.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string top = 4;
    if (has_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->top());
    }

    // optional int32 num = 11 [default = 0];
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 channels = 12 [default = 0];
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

    // optional int32 height = 13 [default = 0];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 width = 14 [default = 0];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .surfing.LayerParameter.Phase phase = 5 [default = ALL];
    if (has_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
    }

    // optional .surfing.BlobProto param = 6;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->param());
    }

    // optional .surfing.BlobProto bias = 7;
    if (has_bias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bias());
    }

    // optional float filter_learning_rate = 8;
    if (has_filter_learning_rate()) {
      total_size += 1 + 4;
    }

    // optional float bias_learning_rate = 9;
    if (has_bias_learning_rate()) {
      total_size += 1 + 4;
    }

    // optional .surfing.BatchNormalizationParameter batch_normalization_param = 99;
    if (has_batch_normalization_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->batch_normalization_param());
    }

    // optional .surfing.ConcatenateParameter concat_param = 100;
    if (has_concat_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->concat_param());
    }

    // optional .surfing.ConvolutionParameter conv_param = 101;
    if (has_conv_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->conv_param());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .surfing.DataParameter data_param = 102;
    if (has_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_param());
    }

    // optional .surfing.DropoutParameter dropout_param = 103;
    if (has_dropout_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dropout_param());
    }

    // optional .surfing.InnerProductParameter inner_product_param = 104;
    if (has_inner_product_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inner_product_param());
    }

    // optional .surfing.LCNParameter lcn_param = 105;
    if (has_lcn_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lcn_param());
    }

    // optional .surfing.LRNParameter lrn_param = 106;
    if (has_lrn_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lrn_param());
    }

    // optional .surfing.PoolingParameter pooling_param = 107;
    if (has_pooling_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pooling_param());
    }

    // optional .surfing.ReluParameter relu_param = 108;
    if (has_relu_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->relu_param());
    }

    // optional .surfing.ResultParameter result_param = 109;
    if (has_result_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result_param());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .surfing.SigmoidParameter sigmoid_param = 110;
    if (has_sigmoid_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sigmoid_param());
    }

    // optional .surfing.SoftmaxParameter softmax_param = 111;
    if (has_softmax_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->softmax_param());
    }

    // optional .surfing.TanhParameter tanh_param = 112;
    if (has_tanh_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tanh_param());
    }

  }
  // repeated string bottom = 3;
  total_size += 1 * this->bottom_size();
  for (int i = 0; i < this->bottom_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bottom(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LayerParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LayerParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LayerParameter::MergeFrom(const LayerParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  bottom_.MergeFrom(from.bottom_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_channels()) {
      set_channels(from.channels());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_phase()) {
      set_phase(from.phase());
    }
    if (from.has_param()) {
      mutable_param()->::surfing::BlobProto::MergeFrom(from.param());
    }
    if (from.has_bias()) {
      mutable_bias()->::surfing::BlobProto::MergeFrom(from.bias());
    }
    if (from.has_filter_learning_rate()) {
      set_filter_learning_rate(from.filter_learning_rate());
    }
    if (from.has_bias_learning_rate()) {
      set_bias_learning_rate(from.bias_learning_rate());
    }
    if (from.has_batch_normalization_param()) {
      mutable_batch_normalization_param()->::surfing::BatchNormalizationParameter::MergeFrom(from.batch_normalization_param());
    }
    if (from.has_concat_param()) {
      mutable_concat_param()->::surfing::ConcatenateParameter::MergeFrom(from.concat_param());
    }
    if (from.has_conv_param()) {
      mutable_conv_param()->::surfing::ConvolutionParameter::MergeFrom(from.conv_param());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_data_param()) {
      mutable_data_param()->::surfing::DataParameter::MergeFrom(from.data_param());
    }
    if (from.has_dropout_param()) {
      mutable_dropout_param()->::surfing::DropoutParameter::MergeFrom(from.dropout_param());
    }
    if (from.has_inner_product_param()) {
      mutable_inner_product_param()->::surfing::InnerProductParameter::MergeFrom(from.inner_product_param());
    }
    if (from.has_lcn_param()) {
      mutable_lcn_param()->::surfing::LCNParameter::MergeFrom(from.lcn_param());
    }
    if (from.has_lrn_param()) {
      mutable_lrn_param()->::surfing::LRNParameter::MergeFrom(from.lrn_param());
    }
    if (from.has_pooling_param()) {
      mutable_pooling_param()->::surfing::PoolingParameter::MergeFrom(from.pooling_param());
    }
    if (from.has_relu_param()) {
      mutable_relu_param()->::surfing::ReluParameter::MergeFrom(from.relu_param());
    }
    if (from.has_result_param()) {
      mutable_result_param()->::surfing::ResultParameter::MergeFrom(from.result_param());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_sigmoid_param()) {
      mutable_sigmoid_param()->::surfing::SigmoidParameter::MergeFrom(from.sigmoid_param());
    }
    if (from.has_softmax_param()) {
      mutable_softmax_param()->::surfing::SoftmaxParameter::MergeFrom(from.softmax_param());
    }
    if (from.has_tanh_param()) {
      mutable_tanh_param()->::surfing::TanhParameter::MergeFrom(from.tanh_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LayerParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayerParameter::CopyFrom(const LayerParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerParameter::IsInitialized() const {

  return true;
}

void LayerParameter::Swap(LayerParameter* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    bottom_.Swap(&other->bottom_);
    std::swap(top_, other->top_);
    std::swap(num_, other->num_);
    std::swap(channels_, other->channels_);
    std::swap(height_, other->height_);
    std::swap(width_, other->width_);
    std::swap(phase_, other->phase_);
    std::swap(param_, other->param_);
    std::swap(bias_, other->bias_);
    std::swap(filter_learning_rate_, other->filter_learning_rate_);
    std::swap(bias_learning_rate_, other->bias_learning_rate_);
    std::swap(batch_normalization_param_, other->batch_normalization_param_);
    std::swap(concat_param_, other->concat_param_);
    std::swap(conv_param_, other->conv_param_);
    std::swap(data_param_, other->data_param_);
    std::swap(dropout_param_, other->dropout_param_);
    std::swap(inner_product_param_, other->inner_product_param_);
    std::swap(lcn_param_, other->lcn_param_);
    std::swap(lrn_param_, other->lrn_param_);
    std::swap(pooling_param_, other->pooling_param_);
    std::swap(relu_param_, other->relu_param_);
    std::swap(result_param_, other->result_param_);
    std::swap(sigmoid_param_, other->sigmoid_param_);
    std::swap(softmax_param_, other->softmax_param_);
    std::swap(tanh_param_, other->tanh_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LayerParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LayerParameter_descriptor_;
  metadata.reflection = LayerParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BatchNormalizationParameter_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchNormalizationParameter_Type_descriptor_;
}
bool BatchNormalizationParameter_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BatchNormalizationParameter_Type BatchNormalizationParameter::CONV;
const BatchNormalizationParameter_Type BatchNormalizationParameter::IP;
const BatchNormalizationParameter_Type BatchNormalizationParameter::Type_MIN;
const BatchNormalizationParameter_Type BatchNormalizationParameter::Type_MAX;
const int BatchNormalizationParameter::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BatchNormalizationParameter::kTypeFieldNumber;
#endif  // !_MSC_VER

BatchNormalizationParameter::BatchNormalizationParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:surfing.BatchNormalizationParameter)
}

void BatchNormalizationParameter::InitAsDefaultInstance() {
}

BatchNormalizationParameter::BatchNormalizationParameter(const BatchNormalizationParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:surfing.BatchNormalizationParameter)
}

void BatchNormalizationParameter::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchNormalizationParameter::~BatchNormalizationParameter() {
  // @@protoc_insertion_point(destructor:surfing.BatchNormalizationParameter)
  SharedDtor();
}

void BatchNormalizationParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BatchNormalizationParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchNormalizationParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchNormalizationParameter_descriptor_;
}

const BatchNormalizationParameter& BatchNormalizationParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_surfing_2eproto();
  return *default_instance_;
}

BatchNormalizationParameter* BatchNormalizationParameter::default_instance_ = NULL;

BatchNormalizationParameter* BatchNormalizationParameter::New() const {
  return new BatchNormalizationParameter;
}

void BatchNormalizationParameter::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchNormalizationParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:surfing.BatchNormalizationParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .surfing.BatchNormalizationParameter.Type type = 1 [default = CONV];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::surfing::BatchNormalizationParameter_Type_IsValid(value)) {
            set_type(static_cast< ::surfing::BatchNormalizationParameter_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:surfing.BatchNormalizationParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:surfing.BatchNormalizationParameter)
  return false;
#undef DO_
}

void BatchNormalizationParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:surfing.BatchNormalizationParameter)
  // optional .surfing.BatchNormalizationParameter.Type type = 1 [default = CONV];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:surfing.BatchNormalizationParameter)
}

::google::protobuf::uint8* BatchNormalizationParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:surfing.BatchNormalizationParameter)
  // optional .surfing.BatchNormalizationParameter.Type type = 1 [default = CONV];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:surfing.BatchNormalizationParameter)
  return target;
}

int BatchNormalizationParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .surfing.BatchNormalizationParameter.Type type = 1 [default = CONV];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchNormalizationParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchNormalizationParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchNormalizationParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchNormalizationParameter::MergeFrom(const BatchNormalizationParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchNormalizationParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchNormalizationParameter::CopyFrom(const BatchNormalizationParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchNormalizationParameter::IsInitialized() const {

  return true;
}

void BatchNormalizationParameter::Swap(BatchNormalizationParameter* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchNormalizationParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchNormalizationParameter_descriptor_;
  metadata.reflection = BatchNormalizationParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ConcatenateParameter::ConcatenateParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:surfing.ConcatenateParameter)
}

void ConcatenateParameter::InitAsDefaultInstance() {
}

ConcatenateParameter::ConcatenateParameter(const ConcatenateParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:surfing.ConcatenateParameter)
}

void ConcatenateParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConcatenateParameter::~ConcatenateParameter() {
  // @@protoc_insertion_point(destructor:surfing.ConcatenateParameter)
  SharedDtor();
}

void ConcatenateParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConcatenateParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConcatenateParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConcatenateParameter_descriptor_;
}

const ConcatenateParameter& ConcatenateParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_surfing_2eproto();
  return *default_instance_;
}

ConcatenateParameter* ConcatenateParameter::default_instance_ = NULL;

ConcatenateParameter* ConcatenateParameter::New() const {
  return new ConcatenateParameter;
}

void ConcatenateParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConcatenateParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:surfing.ConcatenateParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:surfing.ConcatenateParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:surfing.ConcatenateParameter)
  return false;
#undef DO_
}

void ConcatenateParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:surfing.ConcatenateParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:surfing.ConcatenateParameter)
}

::google::protobuf::uint8* ConcatenateParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:surfing.ConcatenateParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:surfing.ConcatenateParameter)
  return target;
}

int ConcatenateParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConcatenateParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConcatenateParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConcatenateParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConcatenateParameter::MergeFrom(const ConcatenateParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConcatenateParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConcatenateParameter::CopyFrom(const ConcatenateParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcatenateParameter::IsInitialized() const {

  return true;
}

void ConcatenateParameter::Swap(ConcatenateParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConcatenateParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConcatenateParameter_descriptor_;
  metadata.reflection = ConcatenateParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConvolutionParameter::kNumOutputFieldNumber;
const int ConvolutionParameter::kKernelSizeFieldNumber;
const int ConvolutionParameter::kPadHFieldNumber;
const int ConvolutionParameter::kPadWFieldNumber;
const int ConvolutionParameter::kStrideHFieldNumber;
const int ConvolutionParameter::kStrideWFieldNumber;
const int ConvolutionParameter::kFilterParameterFieldNumber;
#endif  // !_MSC_VER

ConvolutionParameter::ConvolutionParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:surfing.ConvolutionParameter)
}

void ConvolutionParameter::InitAsDefaultInstance() {
  filter_parameter_ = const_cast< ::surfing::FilterParameter*>(&::surfing::FilterParameter::default_instance());
}

ConvolutionParameter::ConvolutionParameter(const ConvolutionParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:surfing.ConvolutionParameter)
}

void ConvolutionParameter::SharedCtor() {
  _cached_size_ = 0;
  num_output_ = 0u;
  kernel_size_ = 0u;
  pad_h_ = 0u;
  pad_w_ = 0u;
  stride_h_ = 1u;
  stride_w_ = 1u;
  filter_parameter_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConvolutionParameter::~ConvolutionParameter() {
  // @@protoc_insertion_point(destructor:surfing.ConvolutionParameter)
  SharedDtor();
}

void ConvolutionParameter::SharedDtor() {
  if (this != default_instance_) {
    delete filter_parameter_;
  }
}

void ConvolutionParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvolutionParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConvolutionParameter_descriptor_;
}

const ConvolutionParameter& ConvolutionParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_surfing_2eproto();
  return *default_instance_;
}

ConvolutionParameter* ConvolutionParameter::default_instance_ = NULL;

ConvolutionParameter* ConvolutionParameter::New() const {
  return new ConvolutionParameter;
}

void ConvolutionParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ConvolutionParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(num_output_, pad_w_);
    stride_h_ = 1u;
    stride_w_ = 1u;
    if (has_filter_parameter()) {
      if (filter_parameter_ != NULL) filter_parameter_->::surfing::FilterParameter::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConvolutionParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:surfing.ConvolutionParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
          set_has_num_output();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_kernel_size;
        break;
      }

      // optional uint32 kernel_size = 2;
      case 2: {
        if (tag == 16) {
         parse_kernel_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_size_)));
          set_has_kernel_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pad_h;
        break;
      }

      // optional uint32 pad_h = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_pad_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_h_)));
          set_has_pad_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pad_w;
        break;
      }

      // optional uint32 pad_w = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_pad_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_w_)));
          set_has_pad_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_stride_h;
        break;
      }

      // optional uint32 stride_h = 5 [default = 1];
      case 5: {
        if (tag == 40) {
         parse_stride_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_h_)));
          set_has_stride_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_stride_w;
        break;
      }

      // optional uint32 stride_w = 6 [default = 1];
      case 6: {
        if (tag == 48) {
         parse_stride_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_w_)));
          set_has_stride_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_filter_parameter;
        break;
      }

      // optional .surfing.FilterParameter filter_parameter = 7;
      case 7: {
        if (tag == 58) {
         parse_filter_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter_parameter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:surfing.ConvolutionParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:surfing.ConvolutionParameter)
  return false;
#undef DO_
}

void ConvolutionParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:surfing.ConvolutionParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional uint32 kernel_size = 2;
  if (has_kernel_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kernel_size(), output);
  }

  // optional uint32 pad_h = 3 [default = 0];
  if (has_pad_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pad_h(), output);
  }

  // optional uint32 pad_w = 4 [default = 0];
  if (has_pad_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pad_w(), output);
  }

  // optional uint32 stride_h = 5 [default = 1];
  if (has_stride_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->stride_h(), output);
  }

  // optional uint32 stride_w = 6 [default = 1];
  if (has_stride_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->stride_w(), output);
  }

  // optional .surfing.FilterParameter filter_parameter = 7;
  if (has_filter_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->filter_parameter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:surfing.ConvolutionParameter)
}

::google::protobuf::uint8* ConvolutionParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:surfing.ConvolutionParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional uint32 kernel_size = 2;
  if (has_kernel_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kernel_size(), target);
  }

  // optional uint32 pad_h = 3 [default = 0];
  if (has_pad_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pad_h(), target);
  }

  // optional uint32 pad_w = 4 [default = 0];
  if (has_pad_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pad_w(), target);
  }

  // optional uint32 stride_h = 5 [default = 1];
  if (has_stride_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->stride_h(), target);
  }

  // optional uint32 stride_w = 6 [default = 1];
  if (has_stride_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->stride_w(), target);
  }

  // optional .surfing.FilterParameter filter_parameter = 7;
  if (has_filter_parameter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->filter_parameter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:surfing.ConvolutionParameter)
  return target;
}

int ConvolutionParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional uint32 kernel_size = 2;
    if (has_kernel_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_size());
    }

    // optional uint32 pad_h = 3 [default = 0];
    if (has_pad_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_h());
    }

    // optional uint32 pad_w = 4 [default = 0];
    if (has_pad_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_w());
    }

    // optional uint32 stride_h = 5 [default = 1];
    if (has_stride_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_h());
    }

    // optional uint32 stride_w = 6 [default = 1];
    if (has_stride_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_w());
    }

    // optional .surfing.FilterParameter filter_parameter = 7;
    if (has_filter_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter_parameter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConvolutionParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConvolutionParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConvolutionParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConvolutionParameter::MergeFrom(const ConvolutionParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_kernel_size()) {
      set_kernel_size(from.kernel_size());
    }
    if (from.has_pad_h()) {
      set_pad_h(from.pad_h());
    }
    if (from.has_pad_w()) {
      set_pad_w(from.pad_w());
    }
    if (from.has_stride_h()) {
      set_stride_h(from.stride_h());
    }
    if (from.has_stride_w()) {
      set_stride_w(from.stride_w());
    }
    if (from.has_filter_parameter()) {
      mutable_filter_parameter()->::surfing::FilterParameter::MergeFrom(from.filter_parameter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConvolutionParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvolutionParameter::CopyFrom(const ConvolutionParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvolutionParameter::IsInitialized() const {

  return true;
}

void ConvolutionParameter::Swap(ConvolutionParameter* other) {
  if (other != this) {
    std::swap(num_output_, other->num_output_);
    std::swap(kernel_size_, other->kernel_size_);
    std::swap(pad_h_, other->pad_h_);
    std::swap(pad_w_, other->pad_w_);
    std::swap(stride_h_, other->stride_h_);
    std::swap(stride_w_, other->stride_w_);
    std::swap(filter_parameter_, other->filter_parameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConvolutionParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConvolutionParameter_descriptor_;
  metadata.reflection = ConvolutionParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataParameter::kSourceFieldNumber;
const int DataParameter::kBatchSizeFieldNumber;
const int DataParameter::kNumFieldNumber;
const int DataParameter::kMeanFileFieldNumber;
const int DataParameter::kCroppedSizeFieldNumber;
#endif  // !_MSC_VER

DataParameter::DataParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:surfing.DataParameter)
}

void DataParameter::InitAsDefaultInstance() {
}

DataParameter::DataParameter(const DataParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:surfing.DataParameter)
}

void DataParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batch_size_ = 0u;
  num_ = 0u;
  mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataParameter::~DataParameter() {
  // @@protoc_insertion_point(destructor:surfing.DataParameter)
  SharedDtor();
}

void DataParameter::SharedDtor() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mean_file_;
  }
  if (this != default_instance_) {
  }
}

void DataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataParameter_descriptor_;
}

const DataParameter& DataParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_surfing_2eproto();
  return *default_instance_;
}

DataParameter* DataParameter::default_instance_ = NULL;

DataParameter* DataParameter::New() const {
  return new DataParameter;
}

void DataParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DataParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(batch_size_, num_);
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        source_->clear();
      }
    }
    if (has_mean_file()) {
      if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mean_file_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  cropped_size_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:surfing.DataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_batch_size;
        break;
      }

      // optional uint32 batch_size = 2;
      case 2: {
        if (tag == 16) {
         parse_batch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
          set_has_batch_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mean_file;
        break;
      }

      // optional string mean_file = 4;
      case 4: {
        if (tag == 34) {
         parse_mean_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mean_file().data(), this->mean_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mean_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cropped_size;
        break;
      }

      // repeated uint32 cropped_size = 5;
      case 5: {
        if (tag == 40) {
         parse_cropped_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_cropped_size())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cropped_size())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cropped_size;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:surfing.DataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:surfing.DataParameter)
  return false;
#undef DO_
}

void DataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:surfing.DataParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional uint32 batch_size = 2;
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->batch_size(), output);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  // optional string mean_file = 4;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mean_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mean_file(), output);
  }

  // repeated uint32 cropped_size = 5;
  for (int i = 0; i < this->cropped_size_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->cropped_size(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:surfing.DataParameter)
}

::google::protobuf::uint8* DataParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:surfing.DataParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional uint32 batch_size = 2;
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->batch_size(), target);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  // optional string mean_file = 4;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mean_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mean_file(), target);
  }

  // repeated uint32 cropped_size = 5;
  for (int i = 0; i < this->cropped_size_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->cropped_size(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:surfing.DataParameter)
  return target;
}

int DataParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional uint32 batch_size = 2;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional string mean_file = 4;
    if (has_mean_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mean_file());
    }

  }
  // repeated uint32 cropped_size = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->cropped_size_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cropped_size(i));
    }
    total_size += 1 * this->cropped_size_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataParameter::MergeFrom(const DataParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  cropped_size_.MergeFrom(from.cropped_size_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_mean_file()) {
      set_mean_file(from.mean_file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataParameter::CopyFrom(const DataParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataParameter::IsInitialized() const {

  return true;
}

void DataParameter::Swap(DataParameter* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    std::swap(batch_size_, other->batch_size_);
    std::swap(num_, other->num_);
    std::swap(mean_file_, other->mean_file_);
    cropped_size_.Swap(&other->cropped_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataParameter_descriptor_;
  metadata.reflection = DataParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DropoutParameter::kDropoutRatioFieldNumber;
#endif  // !_MSC_VER

DropoutParameter::DropoutParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:surfing.DropoutParameter)
}

void DropoutParameter::InitAsDefaultInstance() {
}

DropoutParameter::DropoutParameter(const DropoutParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:surfing.DropoutParameter)
}

void DropoutParameter::SharedCtor() {
  _cached_size_ = 0;
  dropout_ratio_ = 0.5f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DropoutParameter::~DropoutParameter() {
  // @@protoc_insertion_point(destructor:surfing.DropoutParameter)
  SharedDtor();
}

void DropoutParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DropoutParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropoutParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DropoutParameter_descriptor_;
}

const DropoutParameter& DropoutParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_surfing_2eproto();
  return *default_instance_;
}

DropoutParameter* DropoutParameter::default_instance_ = NULL;

DropoutParameter* DropoutParameter::New() const {
  return new DropoutParameter;
}

void DropoutParameter::Clear() {
  dropout_ratio_ = 0.5f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DropoutParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:surfing.DropoutParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float dropout_ratio = 1 [default = 0.5];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dropout_ratio_)));
          set_has_dropout_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:surfing.DropoutParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:surfing.DropoutParameter)
  return false;
#undef DO_
}

void DropoutParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:surfing.DropoutParameter)
  // optional float dropout_ratio = 1 [default = 0.5];
  if (has_dropout_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->dropout_ratio(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:surfing.DropoutParameter)
}

::google::protobuf::uint8* DropoutParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:surfing.DropoutParameter)
  // optional float dropout_ratio = 1 [default = 0.5];
  if (has_dropout_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->dropout_ratio(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:surfing.DropoutParameter)
  return target;
}

int DropoutParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float dropout_ratio = 1 [default = 0.5];
    if (has_dropout_ratio()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropoutParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DropoutParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DropoutParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DropoutParameter::MergeFrom(const DropoutParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dropout_ratio()) {
      set_dropout_ratio(from.dropout_ratio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DropoutParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropoutParameter::CopyFrom(const DropoutParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropoutParameter::IsInitialized() const {

  return true;
}

void DropoutParameter::Swap(DropoutParameter* other) {
  if (other != this) {
    std::swap(dropout_ratio_, other->dropout_ratio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DropoutParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DropoutParameter_descriptor_;
  metadata.reflection = DropoutParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InnerProductParameter::kNumOutputFieldNumber;
const int InnerProductParameter::kFilterParameterFieldNumber;
#endif  // !_MSC_VER

InnerProductParameter::InnerProductParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:surfing.InnerProductParameter)
}

void InnerProductParameter::InitAsDefaultInstance() {
  filter_parameter_ = const_cast< ::surfing::FilterParameter*>(&::surfing::FilterParameter::default_instance());
}

InnerProductParameter::InnerProductParameter(const InnerProductParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:surfing.InnerProductParameter)
}

void InnerProductParameter::SharedCtor() {
  _cached_size_ = 0;
  num_output_ = 0u;
  filter_parameter_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InnerProductParameter::~InnerProductParameter() {
  // @@protoc_insertion_point(destructor:surfing.InnerProductParameter)
  SharedDtor();
}

void InnerProductParameter::SharedDtor() {
  if (this != default_instance_) {
    delete filter_parameter_;
  }
}

void InnerProductParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InnerProductParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InnerProductParameter_descriptor_;
}

const InnerProductParameter& InnerProductParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_surfing_2eproto();
  return *default_instance_;
}

InnerProductParameter* InnerProductParameter::default_instance_ = NULL;

InnerProductParameter* InnerProductParameter::New() const {
  return new InnerProductParameter;
}

void InnerProductParameter::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    num_output_ = 0u;
    if (has_filter_parameter()) {
      if (filter_parameter_ != NULL) filter_parameter_->::surfing::FilterParameter::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InnerProductParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:surfing.InnerProductParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
          set_has_num_output();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_filter_parameter;
        break;
      }

      // optional .surfing.FilterParameter filter_parameter = 2;
      case 2: {
        if (tag == 18) {
         parse_filter_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter_parameter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:surfing.InnerProductParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:surfing.InnerProductParameter)
  return false;
#undef DO_
}

void InnerProductParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:surfing.InnerProductParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional .surfing.FilterParameter filter_parameter = 2;
  if (has_filter_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->filter_parameter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:surfing.InnerProductParameter)
}

::google::protobuf::uint8* InnerProductParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:surfing.InnerProductParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional .surfing.FilterParameter filter_parameter = 2;
  if (has_filter_parameter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->filter_parameter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:surfing.InnerProductParameter)
  return target;
}

int InnerProductParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional .surfing.FilterParameter filter_parameter = 2;
    if (has_filter_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter_parameter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InnerProductParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InnerProductParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InnerProductParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InnerProductParameter::MergeFrom(const InnerProductParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_filter_parameter()) {
      mutable_filter_parameter()->::surfing::FilterParameter::MergeFrom(from.filter_parameter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InnerProductParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnerProductParameter::CopyFrom(const InnerProductParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerProductParameter::IsInitialized() const {

  return true;
}

void InnerProductParameter::Swap(InnerProductParameter* other) {
  if (other != this) {
    std::swap(num_output_, other->num_output_);
    std::swap(filter_parameter_, other->filter_parameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InnerProductParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InnerProductParameter_descriptor_;
  metadata.reflection = InnerProductParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LCNParameter::LCNParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:surfing.LCNParameter)
}

void LCNParameter::InitAsDefaultInstance() {
}

LCNParameter::LCNParameter(const LCNParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:surfing.LCNParameter)
}

void LCNParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCNParameter::~LCNParameter() {
  // @@protoc_insertion_point(destructor:surfing.LCNParameter)
  SharedDtor();
}

void LCNParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCNParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCNParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCNParameter_descriptor_;
}

const LCNParameter& LCNParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_surfing_2eproto();
  return *default_instance_;
}

LCNParameter* LCNParameter::default_instance_ = NULL;

LCNParameter* LCNParameter::New() const {
  return new LCNParameter;
}

void LCNParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCNParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:surfing.LCNParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:surfing.LCNParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:surfing.LCNParameter)
  return false;
#undef DO_
}

void LCNParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:surfing.LCNParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:surfing.LCNParameter)
}

::google::protobuf::uint8* LCNParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:surfing.LCNParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:surfing.LCNParameter)
  return target;
}

int LCNParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCNParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCNParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCNParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCNParameter::MergeFrom(const LCNParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCNParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCNParameter::CopyFrom(const LCNParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCNParameter::IsInitialized() const {

  return true;
}

void LCNParameter::Swap(LCNParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCNParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCNParameter_descriptor_;
  metadata.reflection = LCNParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LRNParameter::kLocalSizeFieldNumber;
const int LRNParameter::kAlphaFieldNumber;
const int LRNParameter::kBetaFieldNumber;
const int LRNParameter::kKFieldNumber;
#endif  // !_MSC_VER

LRNParameter::LRNParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:surfing.LRNParameter)
}

void LRNParameter::InitAsDefaultInstance() {
}

LRNParameter::LRNParameter(const LRNParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:surfing.LRNParameter)
}

void LRNParameter::SharedCtor() {
  _cached_size_ = 0;
  local_size_ = 5u;
  alpha_ = 0.0001f;
  beta_ = 0.75f;
  k_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LRNParameter::~LRNParameter() {
  // @@protoc_insertion_point(destructor:surfing.LRNParameter)
  SharedDtor();
}

void LRNParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LRNParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LRNParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LRNParameter_descriptor_;
}

const LRNParameter& LRNParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_surfing_2eproto();
  return *default_instance_;
}

LRNParameter* LRNParameter::default_instance_ = NULL;

LRNParameter* LRNParameter::New() const {
  return new LRNParameter;
}

void LRNParameter::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    local_size_ = 5u;
    alpha_ = 0.0001f;
    beta_ = 0.75f;
    k_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LRNParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:surfing.LRNParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 local_size = 1 [default = 5];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_size_)));
          set_has_local_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_alpha;
        break;
      }

      // optional float alpha = 2 [default = 0.0001];
      case 2: {
        if (tag == 21) {
         parse_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
          set_has_alpha();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_beta;
        break;
      }

      // optional float beta = 3 [default = 0.75];
      case 3: {
        if (tag == 29) {
         parse_beta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
          set_has_beta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_k;
        break;
      }

      // optional float k = 4 [default = 1];
      case 4: {
        if (tag == 37) {
         parse_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k_)));
          set_has_k();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:surfing.LRNParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:surfing.LRNParameter)
  return false;
#undef DO_
}

void LRNParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:surfing.LRNParameter)
  // optional uint32 local_size = 1 [default = 5];
  if (has_local_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->local_size(), output);
  }

  // optional float alpha = 2 [default = 0.0001];
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->alpha(), output);
  }

  // optional float beta = 3 [default = 0.75];
  if (has_beta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->beta(), output);
  }

  // optional float k = 4 [default = 1];
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->k(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:surfing.LRNParameter)
}

::google::protobuf::uint8* LRNParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:surfing.LRNParameter)
  // optional uint32 local_size = 1 [default = 5];
  if (has_local_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->local_size(), target);
  }

  // optional float alpha = 2 [default = 0.0001];
  if (has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->alpha(), target);
  }

  // optional float beta = 3 [default = 0.75];
  if (has_beta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->beta(), target);
  }

  // optional float k = 4 [default = 1];
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->k(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:surfing.LRNParameter)
  return target;
}

int LRNParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 local_size = 1 [default = 5];
    if (has_local_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_size());
    }

    // optional float alpha = 2 [default = 0.0001];
    if (has_alpha()) {
      total_size += 1 + 4;
    }

    // optional float beta = 3 [default = 0.75];
    if (has_beta()) {
      total_size += 1 + 4;
    }

    // optional float k = 4 [default = 1];
    if (has_k()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LRNParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LRNParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LRNParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LRNParameter::MergeFrom(const LRNParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_local_size()) {
      set_local_size(from.local_size());
    }
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
    if (from.has_beta()) {
      set_beta(from.beta());
    }
    if (from.has_k()) {
      set_k(from.k());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LRNParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LRNParameter::CopyFrom(const LRNParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LRNParameter::IsInitialized() const {

  return true;
}

void LRNParameter::Swap(LRNParameter* other) {
  if (other != this) {
    std::swap(local_size_, other->local_size_);
    std::swap(alpha_, other->alpha_);
    std::swap(beta_, other->beta_);
    std::swap(k_, other->k_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LRNParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LRNParameter_descriptor_;
  metadata.reflection = LRNParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PoolingParameter_PoolingMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoolingParameter_PoolingMethod_descriptor_;
}
bool PoolingParameter_PoolingMethod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PoolingParameter_PoolingMethod PoolingParameter::MAX;
const PoolingParameter_PoolingMethod PoolingParameter::AVE;
const PoolingParameter_PoolingMethod PoolingParameter::PoolingMethod_MIN;
const PoolingParameter_PoolingMethod PoolingParameter::PoolingMethod_MAX;
const int PoolingParameter::PoolingMethod_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PoolingParameter::kPoolingMethodFieldNumber;
const int PoolingParameter::kPadHFieldNumber;
const int PoolingParameter::kPadWFieldNumber;
const int PoolingParameter::kStrideHFieldNumber;
const int PoolingParameter::kStrideWFieldNumber;
const int PoolingParameter::kWindowHFieldNumber;
const int PoolingParameter::kWindowWFieldNumber;
#endif  // !_MSC_VER

PoolingParameter::PoolingParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:surfing.PoolingParameter)
}

void PoolingParameter::InitAsDefaultInstance() {
}

PoolingParameter::PoolingParameter(const PoolingParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:surfing.PoolingParameter)
}

void PoolingParameter::SharedCtor() {
  _cached_size_ = 0;
  pooling_method_ = 0;
  pad_h_ = 0u;
  pad_w_ = 0u;
  stride_h_ = 2u;
  stride_w_ = 2u;
  window_h_ = 2u;
  window_w_ = 2u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PoolingParameter::~PoolingParameter() {
  // @@protoc_insertion_point(destructor:surfing.PoolingParameter)
  SharedDtor();
}

void PoolingParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PoolingParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoolingParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoolingParameter_descriptor_;
}

const PoolingParameter& PoolingParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_surfing_2eproto();
  return *default_instance_;
}

PoolingParameter* PoolingParameter::default_instance_ = NULL;

PoolingParameter* PoolingParameter::New() const {
  return new PoolingParameter;
}

void PoolingParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PoolingParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(pooling_method_, pad_w_);
    stride_h_ = 2u;
    stride_w_ = 2u;
    window_h_ = 2u;
    window_w_ = 2u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PoolingParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:surfing.PoolingParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .surfing.PoolingParameter.PoolingMethod pooling_method = 1 [default = MAX];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::surfing::PoolingParameter_PoolingMethod_IsValid(value)) {
            set_pooling_method(static_cast< ::surfing::PoolingParameter_PoolingMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pad_h;
        break;
      }

      // optional uint32 pad_h = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_pad_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_h_)));
          set_has_pad_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pad_w;
        break;
      }

      // optional uint32 pad_w = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_pad_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_w_)));
          set_has_pad_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_stride_h;
        break;
      }

      // optional uint32 stride_h = 4 [default = 2];
      case 4: {
        if (tag == 32) {
         parse_stride_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_h_)));
          set_has_stride_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_stride_w;
        break;
      }

      // optional uint32 stride_w = 5 [default = 2];
      case 5: {
        if (tag == 40) {
         parse_stride_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_w_)));
          set_has_stride_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_window_h;
        break;
      }

      // optional uint32 window_h = 6 [default = 2];
      case 6: {
        if (tag == 48) {
         parse_window_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &window_h_)));
          set_has_window_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_window_w;
        break;
      }

      // optional uint32 window_w = 7 [default = 2];
      case 7: {
        if (tag == 56) {
         parse_window_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &window_w_)));
          set_has_window_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:surfing.PoolingParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:surfing.PoolingParameter)
  return false;
#undef DO_
}

void PoolingParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:surfing.PoolingParameter)
  // optional .surfing.PoolingParameter.PoolingMethod pooling_method = 1 [default = MAX];
  if (has_pooling_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pooling_method(), output);
  }

  // optional uint32 pad_h = 2 [default = 0];
  if (has_pad_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pad_h(), output);
  }

  // optional uint32 pad_w = 3 [default = 0];
  if (has_pad_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pad_w(), output);
  }

  // optional uint32 stride_h = 4 [default = 2];
  if (has_stride_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->stride_h(), output);
  }

  // optional uint32 stride_w = 5 [default = 2];
  if (has_stride_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->stride_w(), output);
  }

  // optional uint32 window_h = 6 [default = 2];
  if (has_window_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->window_h(), output);
  }

  // optional uint32 window_w = 7 [default = 2];
  if (has_window_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->window_w(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:surfing.PoolingParameter)
}

::google::protobuf::uint8* PoolingParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:surfing.PoolingParameter)
  // optional .surfing.PoolingParameter.PoolingMethod pooling_method = 1 [default = MAX];
  if (has_pooling_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pooling_method(), target);
  }

  // optional uint32 pad_h = 2 [default = 0];
  if (has_pad_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pad_h(), target);
  }

  // optional uint32 pad_w = 3 [default = 0];
  if (has_pad_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pad_w(), target);
  }

  // optional uint32 stride_h = 4 [default = 2];
  if (has_stride_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->stride_h(), target);
  }

  // optional uint32 stride_w = 5 [default = 2];
  if (has_stride_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->stride_w(), target);
  }

  // optional uint32 window_h = 6 [default = 2];
  if (has_window_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->window_h(), target);
  }

  // optional uint32 window_w = 7 [default = 2];
  if (has_window_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->window_w(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:surfing.PoolingParameter)
  return target;
}

int PoolingParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .surfing.PoolingParameter.PoolingMethod pooling_method = 1 [default = MAX];
    if (has_pooling_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pooling_method());
    }

    // optional uint32 pad_h = 2 [default = 0];
    if (has_pad_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_h());
    }

    // optional uint32 pad_w = 3 [default = 0];
    if (has_pad_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_w());
    }

    // optional uint32 stride_h = 4 [default = 2];
    if (has_stride_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_h());
    }

    // optional uint32 stride_w = 5 [default = 2];
    if (has_stride_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_w());
    }

    // optional uint32 window_h = 6 [default = 2];
    if (has_window_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->window_h());
    }

    // optional uint32 window_w = 7 [default = 2];
    if (has_window_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->window_w());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoolingParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PoolingParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PoolingParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PoolingParameter::MergeFrom(const PoolingParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pooling_method()) {
      set_pooling_method(from.pooling_method());
    }
    if (from.has_pad_h()) {
      set_pad_h(from.pad_h());
    }
    if (from.has_pad_w()) {
      set_pad_w(from.pad_w());
    }
    if (from.has_stride_h()) {
      set_stride_h(from.stride_h());
    }
    if (from.has_stride_w()) {
      set_stride_w(from.stride_w());
    }
    if (from.has_window_h()) {
      set_window_h(from.window_h());
    }
    if (from.has_window_w()) {
      set_window_w(from.window_w());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PoolingParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoolingParameter::CopyFrom(const PoolingParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoolingParameter::IsInitialized() const {

  return true;
}

void PoolingParameter::Swap(PoolingParameter* other) {
  if (other != this) {
    std::swap(pooling_method_, other->pooling_method_);
    std::swap(pad_h_, other->pad_h_);
    std::swap(pad_w_, other->pad_w_);
    std::swap(stride_h_, other->stride_h_);
    std::swap(stride_w_, other->stride_w_);
    std::swap(window_h_, other->window_h_);
    std::swap(window_w_, other->window_w_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PoolingParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PoolingParameter_descriptor_;
  metadata.reflection = PoolingParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReluParameter::ReluParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:surfing.ReluParameter)
}

void ReluParameter::InitAsDefaultInstance() {
}

ReluParameter::ReluParameter(const ReluParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:surfing.ReluParameter)
}

void ReluParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReluParameter::~ReluParameter() {
  // @@protoc_insertion_point(destructor:surfing.ReluParameter)
  SharedDtor();
}

void ReluParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReluParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReluParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReluParameter_descriptor_;
}

const ReluParameter& ReluParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_surfing_2eproto();
  return *default_instance_;
}

ReluParameter* ReluParameter::default_instance_ = NULL;

ReluParameter* ReluParameter::New() const {
  return new ReluParameter;
}

void ReluParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReluParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:surfing.ReluParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:surfing.ReluParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:surfing.ReluParameter)
  return false;
#undef DO_
}

void ReluParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:surfing.ReluParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:surfing.ReluParameter)
}

::google::protobuf::uint8* ReluParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:surfing.ReluParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:surfing.ReluParameter)
  return target;
}

int ReluParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReluParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReluParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReluParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReluParameter::MergeFrom(const ReluParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReluParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReluParameter::CopyFrom(const ReluParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReluParameter::IsInitialized() const {

  return true;
}

void ReluParameter::Swap(ReluParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReluParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReluParameter_descriptor_;
  metadata.reflection = ReluParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ResultParameter_LossType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultParameter_LossType_descriptor_;
}
bool ResultParameter_LossType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ResultParameter_LossType ResultParameter::L1;
const ResultParameter_LossType ResultParameter::L2;
const ResultParameter_LossType ResultParameter::LossType_MIN;
const ResultParameter_LossType ResultParameter::LossType_MAX;
const int ResultParameter::LossType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ResultParameter::kLosstypeFieldNumber;
#endif  // !_MSC_VER

ResultParameter::ResultParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:surfing.ResultParameter)
}

void ResultParameter::InitAsDefaultInstance() {
}

ResultParameter::ResultParameter(const ResultParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:surfing.ResultParameter)
}

void ResultParameter::SharedCtor() {
  _cached_size_ = 0;
  losstype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResultParameter::~ResultParameter() {
  // @@protoc_insertion_point(destructor:surfing.ResultParameter)
  SharedDtor();
}

void ResultParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResultParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultParameter_descriptor_;
}

const ResultParameter& ResultParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_surfing_2eproto();
  return *default_instance_;
}

ResultParameter* ResultParameter::default_instance_ = NULL;

ResultParameter* ResultParameter::New() const {
  return new ResultParameter;
}

void ResultParameter::Clear() {
  losstype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResultParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:surfing.ResultParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .surfing.ResultParameter.LossType losstype = 1 [default = L1];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::surfing::ResultParameter_LossType_IsValid(value)) {
            set_losstype(static_cast< ::surfing::ResultParameter_LossType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:surfing.ResultParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:surfing.ResultParameter)
  return false;
#undef DO_
}

void ResultParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:surfing.ResultParameter)
  // optional .surfing.ResultParameter.LossType losstype = 1 [default = L1];
  if (has_losstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->losstype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:surfing.ResultParameter)
}

::google::protobuf::uint8* ResultParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:surfing.ResultParameter)
  // optional .surfing.ResultParameter.LossType losstype = 1 [default = L1];
  if (has_losstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->losstype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:surfing.ResultParameter)
  return target;
}

int ResultParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .surfing.ResultParameter.LossType losstype = 1 [default = L1];
    if (has_losstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->losstype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResultParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResultParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResultParameter::MergeFrom(const ResultParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_losstype()) {
      set_losstype(from.losstype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResultParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultParameter::CopyFrom(const ResultParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultParameter::IsInitialized() const {

  return true;
}

void ResultParameter::Swap(ResultParameter* other) {
  if (other != this) {
    std::swap(losstype_, other->losstype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResultParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultParameter_descriptor_;
  metadata.reflection = ResultParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SigmoidParameter::SigmoidParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:surfing.SigmoidParameter)
}

void SigmoidParameter::InitAsDefaultInstance() {
}

SigmoidParameter::SigmoidParameter(const SigmoidParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:surfing.SigmoidParameter)
}

void SigmoidParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SigmoidParameter::~SigmoidParameter() {
  // @@protoc_insertion_point(destructor:surfing.SigmoidParameter)
  SharedDtor();
}

void SigmoidParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SigmoidParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SigmoidParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SigmoidParameter_descriptor_;
}

const SigmoidParameter& SigmoidParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_surfing_2eproto();
  return *default_instance_;
}

SigmoidParameter* SigmoidParameter::default_instance_ = NULL;

SigmoidParameter* SigmoidParameter::New() const {
  return new SigmoidParameter;
}

void SigmoidParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SigmoidParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:surfing.SigmoidParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:surfing.SigmoidParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:surfing.SigmoidParameter)
  return false;
#undef DO_
}

void SigmoidParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:surfing.SigmoidParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:surfing.SigmoidParameter)
}

::google::protobuf::uint8* SigmoidParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:surfing.SigmoidParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:surfing.SigmoidParameter)
  return target;
}

int SigmoidParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SigmoidParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SigmoidParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SigmoidParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SigmoidParameter::MergeFrom(const SigmoidParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SigmoidParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigmoidParameter::CopyFrom(const SigmoidParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmoidParameter::IsInitialized() const {

  return true;
}

void SigmoidParameter::Swap(SigmoidParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SigmoidParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SigmoidParameter_descriptor_;
  metadata.reflection = SigmoidParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SoftmaxParameter::SoftmaxParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:surfing.SoftmaxParameter)
}

void SoftmaxParameter::InitAsDefaultInstance() {
}

SoftmaxParameter::SoftmaxParameter(const SoftmaxParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:surfing.SoftmaxParameter)
}

void SoftmaxParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoftmaxParameter::~SoftmaxParameter() {
  // @@protoc_insertion_point(destructor:surfing.SoftmaxParameter)
  SharedDtor();
}

void SoftmaxParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SoftmaxParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftmaxParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoftmaxParameter_descriptor_;
}

const SoftmaxParameter& SoftmaxParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_surfing_2eproto();
  return *default_instance_;
}

SoftmaxParameter* SoftmaxParameter::default_instance_ = NULL;

SoftmaxParameter* SoftmaxParameter::New() const {
  return new SoftmaxParameter;
}

void SoftmaxParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoftmaxParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:surfing.SoftmaxParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:surfing.SoftmaxParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:surfing.SoftmaxParameter)
  return false;
#undef DO_
}

void SoftmaxParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:surfing.SoftmaxParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:surfing.SoftmaxParameter)
}

::google::protobuf::uint8* SoftmaxParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:surfing.SoftmaxParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:surfing.SoftmaxParameter)
  return target;
}

int SoftmaxParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftmaxParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoftmaxParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoftmaxParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoftmaxParameter::MergeFrom(const SoftmaxParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoftmaxParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftmaxParameter::CopyFrom(const SoftmaxParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftmaxParameter::IsInitialized() const {

  return true;
}

void SoftmaxParameter::Swap(SoftmaxParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoftmaxParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoftmaxParameter_descriptor_;
  metadata.reflection = SoftmaxParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TanhParameter::TanhParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:surfing.TanhParameter)
}

void TanhParameter::InitAsDefaultInstance() {
}

TanhParameter::TanhParameter(const TanhParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:surfing.TanhParameter)
}

void TanhParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TanhParameter::~TanhParameter() {
  // @@protoc_insertion_point(destructor:surfing.TanhParameter)
  SharedDtor();
}

void TanhParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TanhParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TanhParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TanhParameter_descriptor_;
}

const TanhParameter& TanhParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_surfing_2eproto();
  return *default_instance_;
}

TanhParameter* TanhParameter::default_instance_ = NULL;

TanhParameter* TanhParameter::New() const {
  return new TanhParameter;
}

void TanhParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TanhParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:surfing.TanhParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:surfing.TanhParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:surfing.TanhParameter)
  return false;
#undef DO_
}

void TanhParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:surfing.TanhParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:surfing.TanhParameter)
}

::google::protobuf::uint8* TanhParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:surfing.TanhParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:surfing.TanhParameter)
  return target;
}

int TanhParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TanhParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TanhParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TanhParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TanhParameter::MergeFrom(const TanhParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TanhParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TanhParameter::CopyFrom(const TanhParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TanhParameter::IsInitialized() const {

  return true;
}

void TanhParameter::Swap(TanhParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TanhParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TanhParameter_descriptor_;
  metadata.reflection = TanhParameter_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace surfing

// @@protoc_insertion_point(global_scope)
